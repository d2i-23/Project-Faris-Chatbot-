{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { Live2DCubismFramework as cubismid } from './cubismid';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nvar csmString = csmstring.csmString;\nvar CubismId = cubismid.CubismId;\nvar csmVector = csmvector.csmVector;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismIdManager {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._ids = void 0;\n      this._ids = new csmVector();\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      for (let i = 0; i < this._ids.getSize(); ++i) {\n        this._ids.set(i, void 0);\n      }\n      this._ids = null;\n    }\n\n    /**\r\n     * ID名をリストから登録\r\n     *\r\n     * @param ids ID名リスト\r\n     * @param count IDの個数\r\n     */\n    registerIds(ids) {\n      for (let i = 0; i < ids.length; i++) {\n        this.registerId(ids[i]);\n      }\n    }\n\n    /**\r\n     * ID名を登録\r\n     *\r\n     * @param id ID名\r\n     */\n    registerId(id) {\n      let result = null;\n      if ('string' == typeof id) {\n        if ((result = this.findId(id)) != null) {\n          return result;\n        }\n        result = new CubismId(id);\n        this._ids.pushBack(result);\n      } else {\n        return this.registerId(id.s);\n      }\n      return result;\n    }\n\n    /**\r\n     * ID名からIDを取得する\r\n     *\r\n     * @param id ID名\r\n     */\n    getId(id) {\n      return this.registerId(id);\n    }\n\n    /**\r\n     * ID名からIDの確認\r\n     *\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\n    isExist(id) {\n      if ('string' == typeof id) {\n        return this.findId(id) != null;\n      }\n      return this.isExist(id.s);\n    }\n\n    /**\r\n     * ID名からIDを検索する。\r\n     *\r\n     * @param id ID名\r\n     * @return 登録されているID。なければNULL。\r\n     */\n    findId(id) {\n      for (let i = 0; i < this._ids.getSize(); ++i) {\n        if (this._ids.at(i).getString().isEqual(id)) {\n          return this._ids.at(i);\n        }\n      }\n      return null;\n    }\n\n    // 登録されているIDのリスト\n  }\n  _Live2DCubismFramework.CubismIdManager = CubismIdManager;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","csmvector","cubismid","csmstring","csmString","CubismId","csmVector","_Live2DCubismFramework","CubismIdManager","constructor","_ids","release","i","getSize","set","registerIds","ids","length","registerId","id","result","findId","pushBack","s","getId","isExist","at","getString","isEqual"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/id/cubismidmanager.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { Live2DCubismFramework as cubismid } from './cubismid';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport csmString = csmstring.csmString;\r\nimport CubismId = cubismid.CubismId;\r\nimport csmVector = csmvector.csmVector;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * ID名の管理\r\n   *\r\n   * ID名を管理する。\r\n   */\r\n  export class CubismIdManager {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._ids = new csmVector<CubismId>();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      for (let i = 0; i < this._ids.getSize(); ++i) {\r\n        this._ids.set(i, void 0);\r\n      }\r\n      this._ids = null;\r\n    }\r\n\r\n    /**\r\n     * ID名をリストから登録\r\n     *\r\n     * @param ids ID名リスト\r\n     * @param count IDの個数\r\n     */\r\n    public registerIds(ids: string[] | csmString[]): void {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        this.registerId(ids[i]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * ID名を登録\r\n     *\r\n     * @param id ID名\r\n     */\r\n    public registerId(id: string | csmString): CubismId {\r\n      let result: CubismId = null;\r\n\r\n      if ('string' == typeof id) {\r\n        if ((result = this.findId(id)) != null) {\r\n          return result;\r\n        }\r\n\r\n        result = new CubismId(id);\r\n        this._ids.pushBack(result);\r\n      } else {\r\n        return this.registerId(id.s);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * ID名からIDを取得する\r\n     *\r\n     * @param id ID名\r\n     */\r\n    public getId(id: csmString | string): CubismId {\r\n      return this.registerId(id);\r\n    }\r\n\r\n    /**\r\n     * ID名からIDの確認\r\n     *\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\r\n    public isExist(id: csmString | string): boolean {\r\n      if ('string' == typeof id) {\r\n        return this.findId(id) != null;\r\n      }\r\n      return this.isExist(id.s);\r\n    }\r\n\r\n    /**\r\n     * ID名からIDを検索する。\r\n     *\r\n     * @param id ID名\r\n     * @return 登録されているID。なければNULL。\r\n     */\r\n    private findId(id: string): CubismId {\r\n      for (let i = 0; i < this._ids.getSize(); ++i) {\r\n        if (\r\n          this._ids\r\n            .at(i)\r\n            .getString()\r\n            .isEqual(id)\r\n        ) {\r\n          return this._ids.at(i);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    private _ids: csmVector<CubismId>; // 登録されているIDのリスト\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}