{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class csmString {\n    /**\r\n     * 文字列を後方に追加する\r\n     *\r\n     * @param c 追加する文字列\r\n     * @return 更新された文字列\r\n     */\n    append(c, length) {\n      this.s += length !== undefined ? c.substr(0, length) : c;\n      return this;\n    }\n\n    /**\r\n     * 文字サイズを拡張して文字を埋める\r\n     * @param length    拡張する文字数\r\n     * @param v         埋める文字\r\n     * @return 更新された文字列\r\n     */\n    expansion(length, v) {\n      for (let i = 0; i < length; i++) {\n        this.append(v);\n      }\n      return this;\n    }\n\n    /**\r\n     * 文字列の長さをバイト数で取得する\r\n     */\n    getBytes() {\n      return encodeURIComponent(this.s).replace(/%../g, 'x').length;\n    }\n\n    /**\r\n     * 文字列の長さを返す\r\n     */\n    getLength() {\n      return this.s.length;\n    }\n\n    /**\r\n     * 文字列比較 <\r\n     * @param s 比較する文字列\r\n     * @return true:    比較する文字列より小さい\r\n     * @return false:   比較する文字列より大きい\r\n     */\n    isLess(s) {\n      return this.s < s.s;\n    }\n\n    /**\r\n     * 文字列比較 >\r\n     * @param s 比較する文字列\r\n     * @return true:    比較する文字列より大きい\r\n     * @return false:   比較する文字列より小さい\r\n     */\n    isGreat(s) {\n      return this.s > s.s;\n    }\n\n    /**\r\n     * 文字列比較 ==\r\n     * @param s 比較する文字列\r\n     * @return true:    比較する文字列と等しい\r\n     * @return false:   比較する文字列と異なる\r\n     */\n    isEqual(s) {\n      return this.s == s;\n    }\n\n    /**\r\n     * 文字列が空かどうか\r\n     * @return true: 空の文字列\r\n     * @return false: 値が設定されている\r\n     */\n    isEmpty() {\n      return this.s.length == 0;\n    }\n\n    /**\r\n     * 引数付きコンストラクタ\r\n     */\n    constructor(s) {\n      this.s = void 0;\n      this.s = s;\n    }\n  }\n  _Live2DCubismFramework.csmString = csmString;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","_Live2DCubismFramework","csmString","append","c","length","s","undefined","substr","expansion","v","i","getBytes","encodeURIComponent","replace","getLength","isLess","isGreat","isEqual","isEmpty","constructor"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/type/csmstring.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * 文字列クラス。\r\n   */\r\n  export class csmString {\r\n    /**\r\n     * 文字列を後方に追加する\r\n     *\r\n     * @param c 追加する文字列\r\n     * @return 更新された文字列\r\n     */\r\n    public append(c: string, length?: number): csmString {\r\n      this.s += length !== undefined ? c.substr(0, length) : c;\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 文字サイズを拡張して文字を埋める\r\n     * @param length    拡張する文字数\r\n     * @param v         埋める文字\r\n     * @return 更新された文字列\r\n     */\r\n    public expansion(length: number, v: string): csmString {\r\n      for (let i = 0; i < length; i++) {\r\n        this.append(v);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 文字列の長さをバイト数で取得する\r\n     */\r\n    public getBytes(): number {\r\n      return encodeURIComponent(this.s).replace(/%../g, 'x').length;\r\n    }\r\n\r\n    /**\r\n     * 文字列の長さを返す\r\n     */\r\n    public getLength(): number {\r\n      return this.s.length;\r\n    }\r\n\r\n    /**\r\n     * 文字列比較 <\r\n     * @param s 比較する文字列\r\n     * @return true:    比較する文字列より小さい\r\n     * @return false:   比較する文字列より大きい\r\n     */\r\n    public isLess(s: csmString): boolean {\r\n      return this.s < s.s;\r\n    }\r\n\r\n    /**\r\n     * 文字列比較 >\r\n     * @param s 比較する文字列\r\n     * @return true:    比較する文字列より大きい\r\n     * @return false:   比較する文字列より小さい\r\n     */\r\n    public isGreat(s: csmString): boolean {\r\n      return this.s > s.s;\r\n    }\r\n\r\n    /**\r\n     * 文字列比較 ==\r\n     * @param s 比較する文字列\r\n     * @return true:    比較する文字列と等しい\r\n     * @return false:   比較する文字列と異なる\r\n     */\r\n    public isEqual(s: string): boolean {\r\n      return this.s == s;\r\n    }\r\n\r\n    /**\r\n     * 文字列が空かどうか\r\n     * @return true: 空の文字列\r\n     * @return false: 値が設定されている\r\n     */\r\n    public isEmpty(): boolean {\r\n      return this.s.length == 0;\r\n    }\r\n\r\n    /**\r\n     * 引数付きコンストラクタ\r\n     */\r\n    public constructor(s: string) {\r\n      this.s = s;\r\n    }\r\n\r\n    s: string;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAAA,qBAAA;AA6FC,WAAAC,sBAAA;EAzFQ,MAAMC,SAAS,CAAC;IACrB;AACJ;AACA;AACA;AACA;AACA;IACWC,MAAMA,CAACC,CAAS,EAAEC,MAAe,EAAa;MACnD,IAAI,CAACC,CAAC,IAAID,MAAM,KAAKE,SAAS,GAAGH,CAAC,CAACI,MAAM,CAAC,CAAC,EAAEH,MAAM,CAAC,GAAGD,CAAC;MAExD,OAAO,IAAI;IACb;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWK,SAASA,CAACJ,MAAc,EAAEK,CAAS,EAAa;MACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;QAC/B,IAAI,CAACR,MAAM,CAACO,CAAC,CAAC;MAChB;MAEA,OAAO,IAAI;IACb;;IAEA;AACJ;AACA;IACWE,QAAQA,CAAA,EAAW;MACxB,OAAOC,kBAAkB,CAAC,IAAI,CAACP,CAAC,CAAC,CAACQ,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACT,MAAM;IAC/D;;IAEA;AACJ;AACA;IACWU,SAASA,CAAA,EAAW;MACzB,OAAO,IAAI,CAACT,CAAC,CAACD,MAAM;IACtB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWW,MAAMA,CAACV,CAAY,EAAW;MACnC,OAAO,IAAI,CAACA,CAAC,GAAGA,CAAC,CAACA,CAAC;IACrB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWW,OAAOA,CAACX,CAAY,EAAW;MACpC,OAAO,IAAI,CAACA,CAAC,GAAGA,CAAC,CAACA,CAAC;IACrB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWY,OAAOA,CAACZ,CAAS,EAAW;MACjC,OAAO,IAAI,CAACA,CAAC,IAAIA,CAAC;IACpB;;IAEA;AACJ;AACA;AACA;AACA;IACWa,OAAOA,CAAA,EAAY;MACxB,OAAO,IAAI,CAACb,CAAC,CAACD,MAAM,IAAI,CAAC;IAC3B;;IAEA;AACJ;AACA;IACWe,WAAWA,CAACd,CAAS,EAAE;MAAA,KAI9BA,CAAC;MAHC,IAAI,CAACA,CAAC,GAAGA,CAAC;IACZ;EAGF;EAACL,sBAAA,CAAAC,SAAA,GAAAA,SAAA;AAAA,GA5FcF,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}