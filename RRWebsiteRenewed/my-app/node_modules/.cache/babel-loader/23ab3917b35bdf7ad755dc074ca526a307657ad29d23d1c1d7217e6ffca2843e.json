{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { Live2DCubismFramework as cubismMatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { Live2DCubismFramework as cubismviewmatrix } from '../Framework/src/math/cubismviewmatrix';\nvar Csm_CubismViewMatrix = cubismviewmatrix.CubismViewMatrix;\nvar Csm_CubismMatrix44 = cubismMatrix44.CubismMatrix44;\nimport { TouchManager } from './touchmanager';\nimport { LAppLive2DManager } from './lapplive2dmanager';\nimport { LAppDelegate, canvas, gl } from './lappdelegate';\nimport { LAppPal } from './lapppal';\nimport * as LAppDefine from './lappdefine';\n\n/**\n * 描画クラス。\n */\nexport class LAppView {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._touchManager = void 0;\n    // タッチマネージャー\n    this._deviceToScreen = void 0;\n    // デバイスからスクリーンへの行列\n    this._viewMatrix = void 0;\n    // viewMatrix\n    this._programId = void 0;\n    // シェーダID\n    this._back = void 0;\n    // 背景画像\n    this._gear = void 0;\n    // ギア画像\n    this._changeModel = void 0;\n    // モデル切り替えフラグ\n    this._isClick = void 0;\n    this._programId = null;\n    this._back = null;\n    this._gear = null;\n\n    // タッチ関係のイベント管理\n    this._touchManager = new TouchManager();\n\n    // デバイス座標からスクリーン座標に変換するための\n    this._deviceToScreen = new Csm_CubismMatrix44();\n\n    // 画面の表示の拡大縮小や移動の変換を行う行列\n    this._viewMatrix = new Csm_CubismViewMatrix();\n  }\n\n  /**\n   * 初期化する。\n   */\n  initialize() {\n    const {\n      width,\n      height\n    } = canvas;\n    const ratio = height / width;\n    const left = LAppDefine.ViewLogicalLeft;\n    const right = LAppDefine.ViewLogicalRight;\n    const bottom = -ratio;\n    const top = ratio;\n    this._viewMatrix.setScreenRect(left, right, bottom, top); // デバイスに対応する画面の範囲。 Xの左端、Xの右端、Yの下端、Yの上端\n\n    const screenW = Math.abs(left - right);\n    this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\n    this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\n\n    // 表示範囲の設定\n    this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale); // 限界拡張率\n    this._viewMatrix.setMinScale(LAppDefine.ViewMinScale); // 限界縮小率\n\n    // 表示できる最大範囲\n    this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);\n  }\n\n  /**\n   * 解放する\n   */\n  release() {\n    this._viewMatrix = null;\n    this._touchManager = null;\n    this._deviceToScreen = null;\n    if (this._gear) {\n      this._gear.release();\n    }\n    this._gear = null;\n    if (this._back) {\n      this._back.release();\n    }\n    this._back = null;\n    gl.deleteProgram(this._programId);\n    this._programId = null;\n  }\n\n  /**\n   * 描画する。\n   */\n  render() {\n    gl.useProgram(this._programId);\n    if (this._back) {\n      this._back.render(this._programId);\n    }\n    if (this._gear) {\n      this._gear.render(this._programId);\n    }\n    gl.flush();\n    const live2DManager = LAppLive2DManager.getInstance();\n    live2DManager.onUpdate();\n  }\n\n  /**\n   * 画像の初期化を行う。\n   */\n  initializeSprite() {\n    const width = canvas.width;\n    const height = canvas.height;\n    const textureManager = LAppDelegate.getInstance().getTextureManager();\n    const resourcesPath = LAppDefine.ResourcesPath;\n    let imageName = '';\n\n    // 不加载画布，用于做看板娘\n\n    // // 背景画像初期化\n    // imageName = LAppDefine.BackImageName;\n\n    // // 非同期なのでコールバック関数を作成\n    // const initBackGroundTexture = (textureInfo: TextureInfo): void => {\n    //   const x: number = width * 0.5;\n    //   const y: number = height * 0.5;\n\n    //   const fwidth = textureInfo.width * 2.0;\n    //   const fheight = height * 0.95;\n    //   this._back = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n    // };\n\n    // textureManager.createTextureFromPngFile(\n    //   resourcesPath + imageName,\n    //   false,\n    //   initBackGroundTexture\n    // );\n\n    // // 歯車画像初期化\n    // imageName = LAppDefine.GearImageName;\n    // const initGearTexture = (textureInfo: TextureInfo): void => {\n    //   const x = width - textureInfo.width * 0.5;\n    //   const y = height - textureInfo.height * 0.5;\n    //   const fwidth = textureInfo.width;\n    //   const fheight = textureInfo.height;\n    //   this._gear = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n    // };\n\n    // textureManager.createTextureFromPngFile(\n    //   resourcesPath + imageName,\n    //   false,\n    //   initGearTexture\n    // );\n\n    // // シェーダーを作成\n    // if (this._programId == null) {\n    //   this._programId = LAppDelegate.getInstance().createShader();\n    // }\n  }\n\n  /**\n   * タッチされた時に呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  onTouchesBegan(pointX, pointY) {\n    this._touchManager.touchesBegan(pointX, pointY);\n  }\n\n  /**\n   * タッチしているときにポインタが動いたら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  onTouchesMoved(pointX, pointY) {\n    const viewX = this.transformViewX(this._touchManager.getX());\n    const viewY = this.transformViewY(this._touchManager.getY());\n    this._touchManager.touchesMoved(pointX, pointY);\n    const live2DManager = LAppLive2DManager.getInstance();\n    live2DManager.onDrag(viewX, viewY);\n  }\n\n  /**\n   * タッチが終了したら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  onTouchesEnded(pointX, pointY) {\n    // タッチ終了\n    const live2DManager = LAppLive2DManager.getInstance();\n    live2DManager.onDrag(0.0, 0.0);\n    {\n      // シングルタップ\n      const x = this._deviceToScreen.transformX(this._touchManager.getX()); // 論理座標変換した座標を取得。\n      const y = this._deviceToScreen.transformY(this._touchManager.getY()); // 論理座標変化した座標を取得。\n\n      if (LAppDefine.DebugTouchLogEnable) {\n        LAppPal.printMessage(`[APP]touchesEnded x: ${x} y: ${y}`);\n      }\n      live2DManager.onTap(x, y);\n\n      // 歯車にタップしたか\n      // if (this._gear.isHit(pointX, pointY)) {\n      //   live2DManager.nextScene();\n      // }\n    }\n  }\n\n  /**\n   * X座標をView座標に変換する。\n   *\n   * @param deviceX デバイスX座標\n   */\n  transformViewX(deviceX) {\n    const screenX = this._deviceToScreen.transformX(deviceX); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformX(screenX); // 拡大、縮小、移動後の値。\n  }\n\n  /**\n   * Y座標をView座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  transformViewY(deviceY) {\n    const screenY = this._deviceToScreen.transformY(deviceY); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformY(screenY);\n  }\n\n  /**\n   * X座標をScreen座標に変換する。\n   * @param deviceX デバイスX座標\n   */\n  transformScreenX(deviceX) {\n    return this._deviceToScreen.transformX(deviceX);\n  }\n\n  /**\n   * Y座標をScreen座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  transformScreenY(deviceY) {\n    return this._deviceToScreen.transformY(deviceY);\n  }\n\n  // クリック中\n}","map":{"version":3,"names":["Live2DCubismFramework","cubismMatrix44","cubismviewmatrix","Csm_CubismViewMatrix","CubismViewMatrix","Csm_CubismMatrix44","CubismMatrix44","TouchManager","LAppLive2DManager","LAppDelegate","canvas","gl","LAppPal","LAppDefine","LAppView","constructor","_touchManager","_deviceToScreen","_viewMatrix","_programId","_back","_gear","_changeModel","_isClick","initialize","width","height","ratio","left","ViewLogicalLeft","right","ViewLogicalRight","bottom","top","setScreenRect","screenW","Math","abs","scaleRelative","translateRelative","setMaxScale","ViewMaxScale","setMinScale","ViewMinScale","setMaxScreenRect","ViewLogicalMaxLeft","ViewLogicalMaxRight","ViewLogicalMaxBottom","ViewLogicalMaxTop","release","deleteProgram","render","useProgram","flush","live2DManager","getInstance","onUpdate","initializeSprite","textureManager","getTextureManager","resourcesPath","ResourcesPath","imageName","onTouchesBegan","pointX","pointY","touchesBegan","onTouchesMoved","viewX","transformViewX","getX","viewY","transformViewY","getY","touchesMoved","onDrag","onTouchesEnded","x","transformX","y","transformY","DebugTouchLogEnable","printMessage","onTap","deviceX","screenX","invertTransformX","deviceY","screenY","invertTransformY","transformScreenX","transformScreenY"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/src/lappview.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { Live2DCubismFramework as cubismMatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { Live2DCubismFramework as cubismviewmatrix } from '../Framework/src/math/cubismviewmatrix';\nimport Csm_CubismViewMatrix = cubismviewmatrix.CubismViewMatrix;\nimport Csm_CubismMatrix44 = cubismMatrix44.CubismMatrix44;\nimport { TouchManager } from './touchmanager';\nimport { LAppLive2DManager } from './lapplive2dmanager';\nimport { LAppDelegate, canvas, gl } from './lappdelegate';\nimport { LAppSprite } from './lappsprite';\nimport { TextureInfo } from './lapptexturemanager';\nimport { LAppPal } from './lapppal';\nimport * as LAppDefine from './lappdefine';\n\n/**\n * 描画クラス。\n */\nexport class LAppView {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._programId = null;\n    this._back = null;\n    this._gear = null;\n\n    // タッチ関係のイベント管理\n    this._touchManager = new TouchManager();\n\n    // デバイス座標からスクリーン座標に変換するための\n    this._deviceToScreen = new Csm_CubismMatrix44();\n\n    // 画面の表示の拡大縮小や移動の変換を行う行列\n    this._viewMatrix = new Csm_CubismViewMatrix();\n  }\n\n  /**\n   * 初期化する。\n   */\n  public initialize(): void {\n    const { width, height } = canvas;\n\n    const ratio: number = height / width;\n    const left: number = LAppDefine.ViewLogicalLeft;\n    const right: number = LAppDefine.ViewLogicalRight;\n    const bottom: number = -ratio;\n    const top: number = ratio;\n\n    this._viewMatrix.setScreenRect(left, right, bottom, top); // デバイスに対応する画面の範囲。 Xの左端、Xの右端、Yの下端、Yの上端\n\n    const screenW: number = Math.abs(left - right);\n    this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\n    this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\n\n    // 表示範囲の設定\n    this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale); // 限界拡張率\n    this._viewMatrix.setMinScale(LAppDefine.ViewMinScale); // 限界縮小率\n\n    // 表示できる最大範囲\n    this._viewMatrix.setMaxScreenRect(\n      LAppDefine.ViewLogicalMaxLeft,\n      LAppDefine.ViewLogicalMaxRight,\n      LAppDefine.ViewLogicalMaxBottom,\n      LAppDefine.ViewLogicalMaxTop\n    );\n  }\n\n  /**\n   * 解放する\n   */\n  public release(): void {\n    this._viewMatrix = null;\n    this._touchManager = null;\n    this._deviceToScreen = null;\n\n    if(this._gear){\n      this._gear.release();\n    }\n    this._gear = null;\n\n    if(this._back){\n      this._back.release();\n    }\n    this._back = null;\n\n    gl.deleteProgram(this._programId);\n    this._programId = null;\n  }\n\n  /**\n   * 描画する。\n   */\n  public render(): void {\n    gl.useProgram(this._programId);\n\n    if (this._back) {\n      this._back.render(this._programId);\n    }\n    if (this._gear) {\n      this._gear.render(this._programId);\n    }\n\n    gl.flush();\n\n    const live2DManager: LAppLive2DManager = LAppLive2DManager.getInstance();\n\n    live2DManager.onUpdate();\n  }\n\n  /**\n   * 画像の初期化を行う。\n   */\n  public initializeSprite(): void {\n    const width: number = canvas.width;\n    const height: number = canvas.height;\n\n    const textureManager = LAppDelegate.getInstance().getTextureManager();\n    const resourcesPath = LAppDefine.ResourcesPath;\n\n    let imageName = '';\n\n    // 不加载画布，用于做看板娘\n\n    // // 背景画像初期化\n    // imageName = LAppDefine.BackImageName;\n\n    // // 非同期なのでコールバック関数を作成\n    // const initBackGroundTexture = (textureInfo: TextureInfo): void => {\n    //   const x: number = width * 0.5;\n    //   const y: number = height * 0.5;\n\n    //   const fwidth = textureInfo.width * 2.0;\n    //   const fheight = height * 0.95;\n    //   this._back = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n    // };\n\n    // textureManager.createTextureFromPngFile(\n    //   resourcesPath + imageName,\n    //   false,\n    //   initBackGroundTexture\n    // );\n\n    // // 歯車画像初期化\n    // imageName = LAppDefine.GearImageName;\n    // const initGearTexture = (textureInfo: TextureInfo): void => {\n    //   const x = width - textureInfo.width * 0.5;\n    //   const y = height - textureInfo.height * 0.5;\n    //   const fwidth = textureInfo.width;\n    //   const fheight = textureInfo.height;\n    //   this._gear = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n    // };\n\n    // textureManager.createTextureFromPngFile(\n    //   resourcesPath + imageName,\n    //   false,\n    //   initGearTexture\n    // );\n\n    // // シェーダーを作成\n    // if (this._programId == null) {\n    //   this._programId = LAppDelegate.getInstance().createShader();\n    // }\n  }\n\n  /**\n   * タッチされた時に呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesBegan(pointX: number, pointY: number): void {\n    this._touchManager.touchesBegan(pointX, pointY);\n  }\n\n  /**\n   * タッチしているときにポインタが動いたら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesMoved(pointX: number, pointY: number): void {\n    const viewX: number = this.transformViewX(this._touchManager.getX());\n    const viewY: number = this.transformViewY(this._touchManager.getY());\n\n    this._touchManager.touchesMoved(pointX, pointY);\n\n    const live2DManager: LAppLive2DManager = LAppLive2DManager.getInstance();\n    live2DManager.onDrag(viewX, viewY);\n  }\n\n  /**\n   * タッチが終了したら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesEnded(pointX: number, pointY: number): void {\n    // タッチ終了\n    const live2DManager: LAppLive2DManager = LAppLive2DManager.getInstance();\n    live2DManager.onDrag(0.0, 0.0);\n\n    {\n      // シングルタップ\n      const x: number = this._deviceToScreen.transformX(\n        this._touchManager.getX()\n      ); // 論理座標変換した座標を取得。\n      const y: number = this._deviceToScreen.transformY(\n        this._touchManager.getY()\n      ); // 論理座標変化した座標を取得。\n\n      if (LAppDefine.DebugTouchLogEnable) {\n        LAppPal.printMessage(`[APP]touchesEnded x: ${x} y: ${y}`);\n      }\n      live2DManager.onTap(x, y);\n\n      // 歯車にタップしたか\n      // if (this._gear.isHit(pointX, pointY)) {\n      //   live2DManager.nextScene();\n      // }\n    }\n  }\n\n  /**\n   * X座標をView座標に変換する。\n   *\n   * @param deviceX デバイスX座標\n   */\n  public transformViewX(deviceX: number): number {\n    const screenX: number = this._deviceToScreen.transformX(deviceX); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformX(screenX); // 拡大、縮小、移動後の値。\n  }\n\n  /**\n   * Y座標をView座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  public transformViewY(deviceY: number): number {\n    const screenY: number = this._deviceToScreen.transformY(deviceY); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformY(screenY);\n  }\n\n  /**\n   * X座標をScreen座標に変換する。\n   * @param deviceX デバイスX座標\n   */\n  public transformScreenX(deviceX: number): number {\n    return this._deviceToScreen.transformX(deviceX);\n  }\n\n  /**\n   * Y座標をScreen座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  public transformScreenY(deviceY: number): number {\n    return this._deviceToScreen.transformY(deviceY);\n  }\n\n  _touchManager: TouchManager; // タッチマネージャー\n  _deviceToScreen: Csm_CubismMatrix44; // デバイスからスクリーンへの行列\n  _viewMatrix: Csm_CubismViewMatrix; // viewMatrix\n  _programId: WebGLProgram; // シェーダID\n  _back: LAppSprite; // 背景画像\n  _gear: LAppSprite; // ギア画像\n  _changeModel: boolean; // モデル切り替えフラグ\n  _isClick: boolean; // クリック中\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}