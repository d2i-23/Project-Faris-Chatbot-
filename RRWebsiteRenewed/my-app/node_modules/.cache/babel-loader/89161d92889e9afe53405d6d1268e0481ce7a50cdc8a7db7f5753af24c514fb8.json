{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismLogDebug } from '../utils/cubismdebug';\n\n/**\n * Key-Valueのペアを定義するクラス\n * csmMapクラスの内部データで使用する。\n */\nexport class csmPair {\n  /**\n   * コンストラクタ\n   * @param key Keyとしてセットする値\n   * @param value Valueとしてセットする値\n   */\n  constructor(key, value) {\n    this.first = void 0;\n    // keyとして用いる変数\n    this.second = void 0;\n    this.first = key == undefined ? null : key;\n    this.second = value == undefined ? null : value;\n  }\n\n  // valueとして用いる変数\n}\n\n/**\n * マップ型\n */\nexport class csmMap {\n  /**\n   * 引数付きコンストラクタ\n   * @param size 初期化時点で確保するサイズ\n   */\n  constructor(size) {\n    // コンテナの初期化のデフォルトサイズ\n    this._keyValues = void 0;\n    // key-valueペアの配列\n    this._dummyValue = void 0;\n    // 空の値を返す為のダミー\n    this._size = void 0;\n    if (size != undefined) {\n      if (size < 1) {\n        this._keyValues = [];\n        this._dummyValue = null;\n        this._size = 0;\n      } else {\n        this._keyValues = new Array(size);\n        this._size = size;\n      }\n    } else {\n      this._keyValues = [];\n      this._dummyValue = null;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * デストラクタ\n   */\n  release() {\n    this.clear();\n  }\n\n  /**\n   * キーを追加する\n   * @param key 新たに追加するキー\n   */\n  appendKey(key) {\n    // 新しくKey/Valueのペアを作る\n    this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\n    // 新しいkey/valueのインデックスは_size\n\n    this._keyValues[this._size] = new csmPair(key);\n    this._size += 1;\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(get)\n   * @param key 添字から特定されるValue値\n   */\n  getValue(key) {\n    let found = -1;\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n    if (found >= 0) {\n      return this._keyValues[found].second;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      return this._keyValues[this._size - 1].second;\n    }\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(set)\n   * @param key 添字から特定されるValue値\n   * @param value 代入するValue値\n   */\n  setValue(key, value) {\n    let found = -1;\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n    if (found >= 0) {\n      this._keyValues[found].second = value;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      this._keyValues[this._size - 1].second = value;\n    }\n  }\n\n  /**\n   * 引数で渡したKeyを持つ要素が存在するか\n   * @param key 存在を確認するkey\n   * @return true 引数で渡したkeyを持つ要素が存在する\n   * @return false 引数で渡したkeyを持つ要素が存在しない\n   */\n  isExist(key) {\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * keyValueのポインタを全て解放する\n   */\n  clear() {\n    this._keyValues = void 0;\n    this._keyValues = null;\n    this._keyValues = [];\n    this._size = 0;\n  }\n\n  /**\n   * コンテナのサイズを取得する\n   *\n   * @return コンテナのサイズ\n   */\n  getSize() {\n    return this._size;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\n   * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\n   */\n  prepareCapacity(newSize, fitToSize) {\n    if (newSize > this._keyValues.length) {\n      if (this._keyValues.length == 0) {\n        if (!fitToSize && newSize < csmMap.DefaultSize) newSize = csmMap.DefaultSize;\n        this._keyValues.length = newSize;\n      } else {\n        if (!fitToSize && newSize < this._keyValues.length * 2) newSize = this._keyValues.length * 2;\n        this._keyValues.length = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  begin() {\n    const ite = new iterator(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  end() {\n    const ite = new iterator(this, this._size); // 終了\n    return ite;\n  }\n\n  /**\n   * コンテナから要素を削除する\n   *\n   * @param ite 削除する要素\n   */\n  erase(ite) {\n    const index = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._keyValues.splice(index, 1);\n    --this._size;\n    const ite2 = new iterator(this, index); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナの値を32ビット符号付き整数型でダンプする\n   */\n  dumpAsInt() {\n    for (let i = 0; i < this._size; i++) {\n      CubismLogDebug('{0} ,', this._keyValues[i]);\n      CubismLogDebug('\\n');\n    }\n  }\n\n  // コンテナの要素数\n}\n\n/**\n * csmMap<T>のイテレータ\n */\ncsmMap.DefaultSize = 10;\nexport class iterator {\n  /**\n   * コンストラクタ\n   */\n  constructor(v, idx) {\n    this._index = void 0;\n    // コンテナのインデックス値\n    this._map = void 0;\n    this._map = v != undefined ? v : new csmMap();\n    this._index = idx != undefined ? idx : 0;\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  set(ite) {\n    this._index = ite._index;\n    this._map = ite._map;\n    return this;\n  }\n\n  /**\n   * 前置き++演算子のオーバーロード\n   */\n  preIncrement() {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算子のオーバーロード\n   */\n  preDecrement() {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子のオーバーロード\n   */\n  increment() {\n    const iteold = new iterator(this._map, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子のオーバーロード\n   */\n  decrement() {\n    const iteold = new iterator(this._map, this._index); // 古い値を保存\n    this._map = iteold._map;\n    this._index = iteold._index;\n    return this;\n  }\n\n  /**\n   * *演算子のオーバーロード\n   */\n  ptr() {\n    return this._map._keyValues[this._index];\n  }\n\n  /**\n   * !=演算\n   */\n  notEqual(ite) {\n    return this._index != ite._index || this._map != ite._map;\n  }\n\n  // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmmap';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const csmMap = _Live2DCubismFramework.csmMap = $.csmMap;\n  const csmPair = _Live2DCubismFramework.csmPair = $.csmPair;\n  const iterator = _Live2DCubismFramework.iterator = $.iterator;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismLogDebug","csmPair","constructor","key","value","first","second","undefined","csmMap","size","_keyValues","_dummyValue","_size","Array","release","clear","appendKey","prepareCapacity","getValue","found","i","setValue","isExist","getSize","newSize","fitToSize","length","DefaultSize","begin","ite","iterator","end","erase","index","_index","splice","ite2","dumpAsInt","v","idx","_map","set","preIncrement","preDecrement","increment","iteold","decrement","ptr","notEqual","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/type/csmmap.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismLogDebug } from '../utils/cubismdebug';\n\n/**\n * Key-Valueのペアを定義するクラス\n * csmMapクラスの内部データで使用する。\n */\nexport class csmPair<_KeyT, _ValT> {\n  /**\n   * コンストラクタ\n   * @param key Keyとしてセットする値\n   * @param value Valueとしてセットする値\n   */\n  public constructor(key?: _KeyT, value?: _ValT) {\n    this.first = key == undefined ? null : key;\n\n    this.second = value == undefined ? null : value;\n  }\n\n  public first: _KeyT; // keyとして用いる変数\n  public second: _ValT; // valueとして用いる変数\n}\n\n/**\n * マップ型\n */\nexport class csmMap<_KeyT, _ValT> {\n  /**\n   * 引数付きコンストラクタ\n   * @param size 初期化時点で確保するサイズ\n   */\n  public constructor(size?: number) {\n    if (size != undefined) {\n      if (size < 1) {\n        this._keyValues = [];\n        this._dummyValue = null;\n        this._size = 0;\n      } else {\n        this._keyValues = new Array(size);\n        this._size = size;\n      }\n    } else {\n      this._keyValues = [];\n      this._dummyValue = null;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * デストラクタ\n   */\n  public release() {\n    this.clear();\n  }\n\n  /**\n   * キーを追加する\n   * @param key 新たに追加するキー\n   */\n  public appendKey(key: _KeyT): void {\n    // 新しくKey/Valueのペアを作る\n    this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\n    // 新しいkey/valueのインデックスは_size\n\n    this._keyValues[this._size] = new csmPair<_KeyT, _ValT>(key);\n    this._size += 1;\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(get)\n   * @param key 添字から特定されるValue値\n   */\n  public getValue(key: _KeyT): _ValT {\n    let found = -1;\n\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found >= 0) {\n      return this._keyValues[found].second;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      return this._keyValues[this._size - 1].second;\n    }\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(set)\n   * @param key 添字から特定されるValue値\n   * @param value 代入するValue値\n   */\n  public setValue(key: _KeyT, value: _ValT): void {\n    let found = -1;\n\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found >= 0) {\n      this._keyValues[found].second = value;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      this._keyValues[this._size - 1].second = value;\n    }\n  }\n\n  /**\n   * 引数で渡したKeyを持つ要素が存在するか\n   * @param key 存在を確認するkey\n   * @return true 引数で渡したkeyを持つ要素が存在する\n   * @return false 引数で渡したkeyを持つ要素が存在しない\n   */\n  public isExist(key: _KeyT): boolean {\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * keyValueのポインタを全て解放する\n   */\n  public clear(): void {\n    this._keyValues = void 0;\n    this._keyValues = null;\n    this._keyValues = [];\n\n    this._size = 0;\n  }\n\n  /**\n   * コンテナのサイズを取得する\n   *\n   * @return コンテナのサイズ\n   */\n  public getSize(): number {\n    return this._size;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\n   * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\n   */\n  public prepareCapacity(newSize: number, fitToSize: boolean): void {\n    if (newSize > this._keyValues.length) {\n      if (this._keyValues.length == 0) {\n        if (!fitToSize && newSize < csmMap.DefaultSize)\n          newSize = csmMap.DefaultSize;\n        this._keyValues.length = newSize;\n      } else {\n        if (!fitToSize && newSize < this._keyValues.length * 2)\n          newSize = this._keyValues.length * 2;\n        this._keyValues.length = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  public begin(): iterator<_KeyT, _ValT> {\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  public end(): iterator<_KeyT, _ValT> {\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\n      this,\n      this._size\n    ); // 終了\n    return ite;\n  }\n\n  /**\n   * コンテナから要素を削除する\n   *\n   * @param ite 削除する要素\n   */\n  public erase(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\n    const index: number = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._keyValues.splice(index, 1);\n    --this._size;\n\n    const ite2: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\n      this,\n      index\n    ); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナの値を32ビット符号付き整数型でダンプする\n   */\n  public dumpAsInt() {\n    for (let i = 0; i < this._size; i++) {\n      CubismLogDebug('{0} ,', this._keyValues[i]);\n      CubismLogDebug('\\n');\n    }\n  }\n\n  public static readonly DefaultSize = 10; // コンテナの初期化のデフォルトサイズ\n  public _keyValues: csmPair<_KeyT, _ValT>[]; // key-valueペアの配列\n  public _dummyValue: _ValT; // 空の値を返す為のダミー\n  public _size: number; // コンテナの要素数\n}\n\n/**\n * csmMap<T>のイテレータ\n */\nexport class iterator<_KeyT, _ValT> {\n  /**\n   * コンストラクタ\n   */\n  constructor(v?: csmMap<_KeyT, _ValT>, idx?: number) {\n    this._map = v != undefined ? v : new csmMap<_KeyT, _ValT>();\n\n    this._index = idx != undefined ? idx : 0;\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public set(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\n    this._index = ite._index;\n    this._map = ite._map;\n    return this;\n  }\n\n  /**\n   * 前置き++演算子のオーバーロード\n   */\n  public preIncrement(): iterator<_KeyT, _ValT> {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算子のオーバーロード\n   */\n  public preDecrement(): iterator<_KeyT, _ValT> {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子のオーバーロード\n   */\n  public increment(): iterator<_KeyT, _ValT> {\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子のオーバーロード\n   */\n  public decrement(): iterator<_KeyT, _ValT> {\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index); // 古い値を保存\n    this._map = iteold._map;\n    this._index = iteold._index;\n    return this;\n  }\n\n  /**\n   * *演算子のオーバーロード\n   */\n  public ptr(): csmPair<_KeyT, _ValT> {\n    return this._map._keyValues[this._index];\n  }\n\n  /**\n   * !=演算\n   */\n  public notEqual(ite: iterator<_KeyT, _ValT>): boolean {\n    return this._index != ite._index || this._map != ite._map;\n  }\n\n  _index: number; // コンテナのインデックス値\n  _map: csmMap<_KeyT, _ValT>; // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmmap';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmMap = $.csmMap;\n  export type csmMap<K, V> = $.csmMap<K, V>;\n  export const csmPair = $.csmPair;\n  export type csmPair<K, V> = $.csmPair<K, V>;\n  export const iterator = $.iterator;\n  export type iterator<K, V> = $.iterator<K, V>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}