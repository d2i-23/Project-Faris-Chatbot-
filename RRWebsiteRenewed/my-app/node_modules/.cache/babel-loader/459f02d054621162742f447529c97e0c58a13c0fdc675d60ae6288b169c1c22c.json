{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { CubismJson } from '../utils/cubismjson';\n\n// JSON keys\nconst Position = 'Position';\nconst X = 'X';\nconst Y = 'Y';\nconst Angle = 'Angle';\nconst Type = 'Type';\nconst Id = 'Id';\n\n// Meta\nconst Meta = 'Meta';\nconst EffectiveForces = 'EffectiveForces';\nconst TotalInputCount = 'TotalInputCount';\nconst TotalOutputCount = 'TotalOutputCount';\nconst PhysicsSettingCount = 'PhysicsSettingCount';\nconst Gravity = 'Gravity';\nconst Wind = 'Wind';\nconst VertexCount = 'VertexCount';\nconst Fps = 'Fps';\n\n// PhysicsSettings\nconst PhysicsSettings = 'PhysicsSettings';\nconst Normalization = 'Normalization';\nconst Minimum = 'Minimum';\nconst Maximum = 'Maximum';\nconst Default = 'Default';\nconst Reflect = 'Reflect';\nconst Weight = 'Weight';\n\n// Input\nconst Input = 'Input';\nconst Source = 'Source';\n\n// Output\nconst Output = 'Output';\nconst Scale = 'Scale';\nconst VertexIndex = 'VertexIndex';\nconst Destination = 'Destination';\n\n// Particle\nconst Vertices = 'Vertices';\nconst Mobility = 'Mobility';\nconst Delay = 'Delay';\nconst Radius = 'Radius';\nconst Acceleration = 'Acceleration';\n\n/**\n * physics3.jsonのコンテナ。\n */\nexport class CubismPhysicsJson {\n  /**\n   * コンストラクタ\n   * @param buffer physics3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  constructor(buffer, size) {\n    this._json = void 0;\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * 重力の取得\n   * @return 重力\n   */\n  getGravity() {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(X).toFloat();\n    ret.y = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(Y).toFloat();\n    return ret;\n  }\n\n  /**\n   * 風の取得\n   * @return 風\n   */\n  getWind() {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(X).toFloat();\n    ret.y = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(Y).toFloat();\n    return ret;\n  }\n\n  /**\n   * 物理演算設定FPSの取得\n   * @return 物理演算設定FPS\n   */\n  getFps() {\n    return this._json.getRoot().getValueByString(Meta).getValueByString(Fps).toFloat(0.0);\n  }\n\n  /**\n   * 物理店の管理の個数の取得\n   * @return 物理店の管理の個数\n   */\n  getSubRigCount() {\n    return this._json.getRoot().getValueByString(Meta).getValueByString(PhysicsSettingCount).toInt();\n  }\n\n  /**\n   * 入力の総合計の取得\n   * @return 入力の総合計\n   */\n  getTotalInputCount() {\n    return this._json.getRoot().getValueByString(Meta).getValueByString(TotalInputCount).toInt();\n  }\n\n  /**\n   * 出力の総合計の取得\n   * @return 出力の総合計\n   */\n  getTotalOutputCount() {\n    return this._json.getRoot().getValueByString(Meta).getValueByString(TotalOutputCount).toInt();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @return 物理点の個数\n   */\n  getVertexCount() {\n    return this._json.getRoot().getValueByString(Meta).getValueByString(VertexCount).toInt();\n  }\n\n  /**\n   * 正規化された位置の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最小値\n   */\n  getNormalizationPositionMinimumValue(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Position).getValueByString(Minimum).toFloat();\n  }\n\n  /**\n   * 正規化された位置の最大値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最大値\n   */\n  getNormalizationPositionMaximumValue(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Position).getValueByString(Maximum).toFloat();\n  }\n\n  /**\n   * 正規化された位置のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置のデフォルト値\n   */\n  getNormalizationPositionDefaultValue(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Position).getValueByString(Default).toFloat();\n  }\n\n  /**\n   * 正規化された角度の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度の最小値\n   */\n  getNormalizationAngleMinimumValue(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Angle).getValueByString(Minimum).toFloat();\n  }\n\n  /**\n   * 正規化された角度の最大値の取得\n   * @param physicsSettingIndex\n   * @return 正規化された角度の最大値\n   */\n  getNormalizationAngleMaximumValue(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Angle).getValueByString(Maximum).toFloat();\n  }\n\n  /**\n   * 正規化された角度のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度のデフォルト値\n   */\n  getNormalizationAngleDefaultValue(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Angle).getValueByString(Default).toFloat();\n  }\n\n  /**\n   * 入力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 入力の個数\n   */\n  getInputCount(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getVector().getSize();\n  }\n\n  /**\n   * 入力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の重み\n   */\n  getInputWeight(physicsSettingIndex, inputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Weight).toFloat();\n  }\n\n  /**\n   * 入力の反転の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の反転\n   */\n  getInputReflect(physicsSettingIndex, inputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Reflect).toBoolean();\n  }\n\n  /**\n   * 入力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の種類\n   */\n  getInputType(physicsSettingIndex, inputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Type).getRawString();\n  }\n\n  /**\n   * 入力元のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力元のID\n   */\n  getInputSourceId(physicsSettingIndex, inputIndex) {\n    return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Source).getValueByString(Id).getRawString());\n  }\n\n  /**\n   * 出力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 出力の個数\n   */\n  getOutputCount(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getVector().getSize();\n  }\n\n  /**\n   * 出力の物理点のインデックスの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の物理点のインデックス\n   */\n  getOutputVertexIndex(physicsSettingIndex, outputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(VertexIndex).toInt();\n  }\n\n  /**\n   * 出力の角度のスケールを取得する\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の角度のスケール\n   */\n  getOutputAngleScale(physicsSettingIndex, outputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Scale).toFloat();\n  }\n\n  /**\n   * 出力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の重み\n   */\n  getOutputWeight(physicsSettingIndex, outputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Weight).toFloat();\n  }\n\n  /**\n   * 出力先のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力先のID\n   */\n  getOutputDestinationId(physicsSettingIndex, outputIndex) {\n    return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Destination).getValueByString(Id).getRawString());\n  }\n\n  /**\n   * 出力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の種類\n   */\n  getOutputType(physicsSettingIndex, outputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Type).getRawString();\n  }\n\n  /**\n   * 出力の反転の取得\n   * @param physicsSettingIndex 物理演算のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の反転\n   */\n  getOutputReflect(physicsSettingIndex, outputIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Reflect).toBoolean();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @param physicsSettingIndex 物理演算男設定のインデックス\n   * @return 物理点の個数\n   */\n  getParticleCount(physicsSettingIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getVector().getSize();\n  }\n\n  /**\n   * 物理点の動きやすさの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の動きやすさ\n   */\n  getParticleMobility(physicsSettingIndex, vertexIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Mobility).toFloat();\n  }\n\n  /**\n   * 物理点の遅れの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の遅れ\n   */\n  getParticleDelay(physicsSettingIndex, vertexIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Delay).toFloat();\n  }\n\n  /**\n   * 物理点の加速度の取得\n   * @param physicsSettingIndex 物理演算の設定\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の加速度\n   */\n  getParticleAcceleration(physicsSettingIndex, vertexIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Acceleration).toFloat();\n  }\n\n  /**\n   * 物理点の距離の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の距離\n   */\n  getParticleRadius(physicsSettingIndex, vertexIndex) {\n    return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Radius).toFloat();\n  }\n\n  /**\n   * 物理点の位置の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexInde 物理点のインデックス\n   * @return 物理点の位置\n   */\n  getParticlePosition(physicsSettingIndex, vertexIndex) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Position).getValueByString(X).toFloat();\n    ret.y = this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Position).getValueByString(Y).toFloat();\n    return ret;\n  }\n\n  // physics3.jsonデータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismPhysicsJson = _Live2DCubismFramework.CubismPhysicsJson = $.CubismPhysicsJson;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismFramework","CubismVector2","CubismJson","Position","X","Y","Angle","Type","Id","Meta","EffectiveForces","TotalInputCount","TotalOutputCount","PhysicsSettingCount","Gravity","Wind","VertexCount","Fps","PhysicsSettings","Normalization","Minimum","Maximum","Default","Reflect","Weight","Input","Source","Output","Scale","VertexIndex","Destination","Vertices","Mobility","Delay","Radius","Acceleration","CubismPhysicsJson","constructor","buffer","size","_json","create","release","delete","getGravity","ret","x","getRoot","getValueByString","toFloat","y","getWind","getFps","getSubRigCount","toInt","getTotalInputCount","getTotalOutputCount","getVertexCount","getNormalizationPositionMinimumValue","physicsSettingIndex","getValueByIndex","getNormalizationPositionMaximumValue","getNormalizationPositionDefaultValue","getNormalizationAngleMinimumValue","getNormalizationAngleMaximumValue","getNormalizationAngleDefaultValue","getInputCount","getVector","getSize","getInputWeight","inputIndex","getInputReflect","toBoolean","getInputType","getRawString","getInputSourceId","getIdManager","getId","getOutputCount","getOutputVertexIndex","outputIndex","getOutputAngleScale","getOutputWeight","getOutputDestinationId","getOutputType","getOutputReflect","getParticleCount","getParticleMobility","vertexIndex","getParticleDelay","getParticleAcceleration","getParticleRadius","getParticlePosition","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["D:/Personal/PythonStuff/RR/RRWebsiteRenewed/my-app/src/Framework/src/physics/cubismphysicsjson.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { CubismJson } from '../utils/cubismjson';\n\n// JSON keys\nconst Position = 'Position';\nconst X = 'X';\nconst Y = 'Y';\nconst Angle = 'Angle';\nconst Type = 'Type';\nconst Id = 'Id';\n\n// Meta\nconst Meta = 'Meta';\nconst EffectiveForces = 'EffectiveForces';\nconst TotalInputCount = 'TotalInputCount';\nconst TotalOutputCount = 'TotalOutputCount';\nconst PhysicsSettingCount = 'PhysicsSettingCount';\nconst Gravity = 'Gravity';\nconst Wind = 'Wind';\nconst VertexCount = 'VertexCount';\nconst Fps = 'Fps';\n\n// PhysicsSettings\nconst PhysicsSettings = 'PhysicsSettings';\nconst Normalization = 'Normalization';\nconst Minimum = 'Minimum';\nconst Maximum = 'Maximum';\nconst Default = 'Default';\nconst Reflect = 'Reflect';\nconst Weight = 'Weight';\n\n// Input\nconst Input = 'Input';\nconst Source = 'Source';\n\n// Output\nconst Output = 'Output';\nconst Scale = 'Scale';\nconst VertexIndex = 'VertexIndex';\nconst Destination = 'Destination';\n\n// Particle\nconst Vertices = 'Vertices';\nconst Mobility = 'Mobility';\nconst Delay = 'Delay';\nconst Radius = 'Radius';\nconst Acceleration = 'Acceleration';\n\n/**\n * physics3.jsonのコンテナ。\n */\nexport class CubismPhysicsJson {\n  /**\n   * コンストラクタ\n   * @param buffer physics3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * 重力の取得\n   * @return 重力\n   */\n  public getGravity(): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Gravity)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Gravity)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  /**\n   * 風の取得\n   * @return 風\n   */\n  public getWind(): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Wind)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Wind)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  /**\n   * 物理演算設定FPSの取得\n   * @return 物理演算設定FPS\n   */\n  public getFps(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Fps)\n      .toFloat(0.0);\n  }\n\n  /**\n   * 物理店の管理の個数の取得\n   * @return 物理店の管理の個数\n   */\n  public getSubRigCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(PhysicsSettingCount)\n      .toInt();\n  }\n\n  /**\n   * 入力の総合計の取得\n   * @return 入力の総合計\n   */\n  public getTotalInputCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalInputCount)\n      .toInt();\n  }\n\n  /**\n   * 出力の総合計の取得\n   * @return 出力の総合計\n   */\n  public getTotalOutputCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalOutputCount)\n      .toInt();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @return 物理点の個数\n   */\n  public getVertexCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(VertexCount)\n      .toInt();\n  }\n\n  /**\n   * 正規化された位置の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最小値\n   */\n  public getNormalizationPositionMinimumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Minimum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された位置の最大値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最大値\n   */\n  public getNormalizationPositionMaximumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Maximum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された位置のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置のデフォルト値\n   */\n  public getNormalizationPositionDefaultValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Default)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度の最小値\n   */\n  public getNormalizationAngleMinimumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Minimum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度の最大値の取得\n   * @param physicsSettingIndex\n   * @return 正規化された角度の最大値\n   */\n  public getNormalizationAngleMaximumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Maximum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度のデフォルト値\n   */\n  public getNormalizationAngleDefaultValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Default)\n      .toFloat();\n  }\n\n  /**\n   * 入力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 入力の個数\n   */\n  public getInputCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 入力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の重み\n   */\n  public getInputWeight(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Weight)\n      .toFloat();\n  }\n\n  /**\n   * 入力の反転の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の反転\n   */\n  public getInputReflect(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Reflect)\n      .toBoolean();\n  }\n\n  /**\n   * 入力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の種類\n   */\n  public getInputType(physicsSettingIndex: number, inputIndex: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Type)\n      .getRawString();\n  }\n\n  /**\n   * 入力元のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力元のID\n   */\n  public getInputSourceId(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(PhysicsSettings)\n        .getValueByIndex(physicsSettingIndex)\n        .getValueByString(Input)\n        .getValueByIndex(inputIndex)\n        .getValueByString(Source)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 出力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 出力の個数\n   */\n  public getOutputCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 出力の物理点のインデックスの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の物理点のインデックス\n   */\n  public getOutputVertexIndex(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(VertexIndex)\n      .toInt();\n  }\n\n  /**\n   * 出力の角度のスケールを取得する\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の角度のスケール\n   */\n  public getOutputAngleScale(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Scale)\n      .toFloat();\n  }\n\n  /**\n   * 出力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の重み\n   */\n  public getOutputWeight(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Weight)\n      .toFloat();\n  }\n\n  /**\n   * 出力先のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力先のID\n   */\n  public getOutputDestinationId(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(PhysicsSettings)\n        .getValueByIndex(physicsSettingIndex)\n        .getValueByString(Output)\n        .getValueByIndex(outputIndex)\n        .getValueByString(Destination)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 出力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の種類\n   */\n  public getOutputType(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): string {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Type)\n      .getRawString();\n  }\n\n  /**\n   * 出力の反転の取得\n   * @param physicsSettingIndex 物理演算のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の反転\n   */\n  public getOutputReflect(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Reflect)\n      .toBoolean();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @param physicsSettingIndex 物理演算男設定のインデックス\n   * @return 物理点の個数\n   */\n  public getParticleCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 物理点の動きやすさの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の動きやすさ\n   */\n  public getParticleMobility(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Mobility)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の遅れの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の遅れ\n   */\n  public getParticleDelay(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Delay)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の加速度の取得\n   * @param physicsSettingIndex 物理演算の設定\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の加速度\n   */\n  public getParticleAcceleration(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Acceleration)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の距離の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の距離\n   */\n  public getParticleRadius(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Radius)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の位置の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexInde 物理点のインデックス\n   * @return 物理点の位置\n   */\n  public getParticlePosition(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Position)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Position)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  _json: CubismJson; // physics3.jsonデータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysicsJson = $.CubismPhysicsJson;\n  export type CubismPhysicsJson = $.CubismPhysicsJson;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}