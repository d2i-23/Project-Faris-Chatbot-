{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar csmVector = csmvector.csmVector;\nvar iterator = csmvector.iterator;\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismJson = cubismjson.CubismJson;\nvar Value = cubismjson.Value;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const Epsilon = 0.001;\n  const DefaultFadeInSeconds = 0.5;\n\n  // Pose.jsonのタグ\n  const FadeIn = 'FadeInTime';\n  const Link = 'Link';\n  const Groups = 'Groups';\n  const Id = 'Id';\n\n  /**\r\n   * パーツの不透明度の設定\r\n   *\r\n   * パーツの不透明度の管理と設定を行う。\r\n   */\n  class CubismPose {\n    /**\r\n     * インスタンスの作成\r\n     * @param pose3json pose3.jsonのデータ\r\n     * @param size pose3.jsonのデータのサイズ[byte]\r\n     * @return 作成されたインスタンス\r\n     */\n    static create(pose3json, size) {\n      const ret = new CubismPose();\n      const json = CubismJson.create(pose3json, size);\n      const root = json.getRoot();\n\n      // フェード時間の指定\n      if (!root.getValueByString(FadeIn).isNull()) {\n        ret._fadeTimeSeconds = root.getValueByString(FadeIn).toFloat(DefaultFadeInSeconds);\n        if (ret._fadeTimeSeconds <= 0.0) {\n          ret._fadeTimeSeconds = DefaultFadeInSeconds;\n        }\n      }\n\n      // パーツグループ\n      const poseListInfo = root.getValueByString(Groups);\n      const poseCount = poseListInfo.getSize();\n      for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n        const idListInfo = poseListInfo.getValueByIndex(poseIndex);\n        const idCount = idListInfo.getSize();\n        let groupCount = 0;\n        for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n          const partInfo = idListInfo.getValueByIndex(groupIndex);\n          const partData = new PartData();\n          const parameterId = CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());\n          partData.partId = parameterId;\n\n          // リンクするパーツの設定\n          if (!partInfo.getValueByString(Link).isNull()) {\n            const linkListInfo = partInfo.getValueByString(Link);\n            const linkCount = linkListInfo.getSize();\n            for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n              const linkPart = new PartData();\n              const linkId = CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());\n              linkPart.partId = linkId;\n              partData.link.pushBack(linkPart);\n            }\n          }\n          ret._partGroups.pushBack(partData.clone());\n          ++groupCount;\n        }\n        ret._partGroupCounts.pushBack(groupCount);\n      }\n      CubismJson.delete(json);\n      return ret;\n    }\n\n    /**\r\n     * インスタンスを破棄する\r\n     * @param pose 対象のCubismPose\r\n     */\n    static delete(pose) {\n      if (pose != null) {\n        pose = null;\n      }\n    }\n\n    /**\r\n     * モデルのパラメータの更新\r\n     * @param model 対象のモデル\r\n     * @param deltaTimeSeconds デルタ時間[秒]\r\n     */\n    updateParameters(model, deltaTimeSeconds) {\n      // 前回のモデルと同じでない場合は初期化が必要\n      if (model != this._lastModel) {\n        // パラメータインデックスの初期化\n        this.reset(model);\n      }\n      this._lastModel = model;\n\n      // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\n      if (deltaTimeSeconds < 0.0) {\n        deltaTimeSeconds = 0.0;\n      }\n      let beginIndex = 0;\n      for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\n        const partGroupCount = this._partGroupCounts.at(i);\n        this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n        beginIndex += partGroupCount;\n      }\n      this.copyPartOpacities(model);\n    }\n\n    /**\r\n     * 表示を初期化\r\n     * @param model 対象のモデル\r\n     * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\r\n     */\n    reset(model) {\n      let beginIndex = 0;\n      for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\n        const groupCount = this._partGroupCounts.at(i);\n        for (let j = beginIndex; j < beginIndex + groupCount; ++j) {\n          this._partGroups.at(j).initialize(model);\n          const partsIndex = this._partGroups.at(j).partIndex;\n          const paramIndex = this._partGroups.at(j).parameterIndex;\n          if (partsIndex < 0) {\n            continue;\n          }\n          model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\n          model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\n          for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\n            this._partGroups.at(j).link.at(k).initialize(model);\n          }\n        }\n        beginIndex += groupCount;\n      }\n    }\n\n    /**\r\n     * パーツの不透明度をコピー\r\n     *\r\n     * @param model 対象のモデル\r\n     */\n    copyPartOpacities(model) {\n      for (let groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {\n        const partData = this._partGroups.at(groupIndex);\n        if (partData.link.getSize() == 0) {\n          continue; // 連動するパラメータはない\n        }\n\n        const partIndex = this._partGroups.at(groupIndex).partIndex;\n        const opacity = model.getPartOpacityByIndex(partIndex);\n        for (let linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {\n          const linkPart = partData.link.at(linkIndex);\n          const linkPartIndex = linkPart.partIndex;\n          if (linkPartIndex < 0) {\n            continue;\n          }\n          model.setPartOpacityByIndex(linkPartIndex, opacity);\n        }\n      }\n    }\n\n    /**\r\n     * パーツのフェード操作を行う。\r\n     * @param model 対象のモデル\r\n     * @param deltaTimeSeconds デルタ時間[秒]\r\n     * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\r\n     * @param partGroupCount フェード操作を行うパーツグループの個数\r\n     */\n    doFade(model, deltaTimeSeconds, beginIndex, partGroupCount) {\n      let visiblePartIndex = -1;\n      let newOpacity = 1.0;\n      const phi = 0.5;\n      const backOpacityThreshold = 0.15;\n\n      // 現在、表示状態になっているパーツを取得\n      for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n        const partIndex = this._partGroups.at(i).partIndex;\n        const paramIndex = this._partGroups.at(i).parameterIndex;\n        if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n          if (visiblePartIndex >= 0) {\n            break;\n          }\n          visiblePartIndex = i;\n          newOpacity = model.getPartOpacityByIndex(partIndex);\n\n          // 新しい不透明度を計算\n          newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n          if (newOpacity > 1.0) {\n            newOpacity = 1.0;\n          }\n        }\n      }\n      if (visiblePartIndex < 0) {\n        visiblePartIndex = 0;\n        newOpacity = 1.0;\n      }\n\n      // 表示パーツ、非表示パーツの不透明度を設定する\n      for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n        const partsIndex = this._partGroups.at(i).partIndex;\n\n        // 表示パーツの設定\n        if (visiblePartIndex == i) {\n          model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\n        }\n        // 非表示パーツの設定\n        else {\n          let opacity = model.getPartOpacityByIndex(partsIndex);\n          let a1; // 計算によって求められる不透明度\n\n          if (newOpacity < phi) {\n            a1 = newOpacity * (phi - 1) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\n          } else {\n            a1 = (1 - newOpacity) * phi / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\n          }\n\n          // 背景の見える割合を制限する場合\n          const backOpacity = (1.0 - a1) * (1.0 - newOpacity);\n          if (backOpacity > backOpacityThreshold) {\n            a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\n          }\n          if (opacity > a1) {\n            opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\n          }\n\n          model.setPartOpacityByIndex(partsIndex, opacity);\n        }\n      }\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._partGroups = void 0;\n      // パーツグループ\n      this._partGroupCounts = void 0;\n      // それぞれのパーツグループの個数\n      this._fadeTimeSeconds = void 0;\n      // フェード時間[秒]\n      this._lastModel = void 0;\n      this._fadeTimeSeconds = DefaultFadeInSeconds;\n      this._lastModel = null;\n      this._partGroups = new csmVector();\n      this._partGroupCounts = new csmVector();\n    }\n\n    // 前回操作したモデル\n  }\n  _Live2DCubismFramework.CubismPose = CubismPose;\n  class PartData {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor(v) {\n      this.partId = void 0;\n      // パーツID\n      this.parameterIndex = void 0;\n      // パラメータのインデックス\n      this.partIndex = void 0;\n      // パーツのインデックス\n      this.link = void 0;\n      this.parameterIndex = 0;\n      this.partIndex = 0;\n      this.link = new csmVector();\n      if (v != undefined) {\n        this.partId = v.partId;\n        for (const ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\n          this.link.pushBack(ite.ptr().clone());\n        }\n      }\n    }\n\n    /**\r\n     * =演算子のオーバーロード\r\n     */\n    assignment(v) {\n      this.partId = v.partId;\n      for (const ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\n        this.link.pushBack(ite.ptr().clone());\n      }\n      return this;\n    }\n\n    /**\r\n     * 初期化\r\n     * @param model 初期化に使用するモデル\r\n     */\n    initialize(model) {\n      this.parameterIndex = model.getParameterIndex(this.partId);\n      this.partIndex = model.getPartIndex(this.partId);\n      model.setParameterValueByIndex(this.parameterIndex, 1);\n    }\n\n    /**\r\n     * オブジェクトのコピーを生成する\r\n     */\n    clone() {\n      const clonePartData = new PartData();\n      clonePartData.partId = this.partId;\n      clonePartData.parameterIndex = this.parameterIndex;\n      clonePartData.partIndex = this.partIndex;\n      clonePartData.link = new csmVector();\n      for (let ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {\n        clonePartData.link.pushBack(ite.ptr().clone());\n      }\n      return clonePartData;\n    }\n\n    // 連動するパラメータ\n  }\n  _Live2DCubismFramework.PartData = PartData;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismid","csmvector","cubismmodel","cubismframework","cubismjson","CubismIdHandle","csmVector","iterator","CubismModel","CubismFramework","CubismJson","Value","_Live2DCubismFramework","Epsilon","DefaultFadeInSeconds","FadeIn","Link","Groups","Id","CubismPose","create","pose3json","size","ret","json","root","getRoot","getValueByString","isNull","_fadeTimeSeconds","toFloat","poseListInfo","poseCount","getSize","poseIndex","idListInfo","getValueByIndex","idCount","groupCount","groupIndex","partInfo","partData","PartData","parameterId","getIdManager","getId","getRawString","partId","linkListInfo","linkCount","linkIndex","linkPart","linkId","getString","link","pushBack","_partGroups","clone","_partGroupCounts","delete","pose","updateParameters","model","deltaTimeSeconds","_lastModel","reset","beginIndex","i","partGroupCount","at","doFade","copyPartOpacities","j","initialize","partsIndex","partIndex","paramIndex","parameterIndex","setPartOpacityByIndex","setParameterValueByIndex","k","opacity","getPartOpacityByIndex","linkPartIndex","visiblePartIndex","newOpacity","phi","backOpacityThreshold","getParameterValueByIndex","a1","backOpacity","constructor","v","undefined","ite","begin","notEqual","end","preIncrement","ptr","assignment","getParameterIndex","getPartIndex","clonePartData","increment"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/effect/cubismpose.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport csmVector = csmvector.csmVector;\r\nimport iterator = csmvector.iterator;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismJson = cubismjson.CubismJson;\r\nimport Value = cubismjson.Value;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  const Epsilon = 0.001;\r\n  const DefaultFadeInSeconds = 0.5;\r\n\r\n  // Pose.jsonのタグ\r\n  const FadeIn = 'FadeInTime';\r\n  const Link = 'Link';\r\n  const Groups = 'Groups';\r\n  const Id = 'Id';\r\n\r\n  /**\r\n   * パーツの不透明度の設定\r\n   *\r\n   * パーツの不透明度の管理と設定を行う。\r\n   */\r\n  export class CubismPose {\r\n    /**\r\n     * インスタンスの作成\r\n     * @param pose3json pose3.jsonのデータ\r\n     * @param size pose3.jsonのデータのサイズ[byte]\r\n     * @return 作成されたインスタンス\r\n     */\r\n    public static create(pose3json: ArrayBuffer, size: number): CubismPose {\r\n      const ret: CubismPose = new CubismPose();\r\n      const json: CubismJson = CubismJson.create(pose3json, size);\r\n      const root: Value = json.getRoot();\r\n\r\n      // フェード時間の指定\r\n      if (!root.getValueByString(FadeIn).isNull()) {\r\n        ret._fadeTimeSeconds = root\r\n          .getValueByString(FadeIn)\r\n          .toFloat(DefaultFadeInSeconds);\r\n\r\n        if (ret._fadeTimeSeconds <= 0.0) {\r\n          ret._fadeTimeSeconds = DefaultFadeInSeconds;\r\n        }\r\n      }\r\n\r\n      // パーツグループ\r\n      const poseListInfo: Value = root.getValueByString(Groups);\r\n      const poseCount: number = poseListInfo.getSize();\r\n\r\n      for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\r\n        const idListInfo: Value = poseListInfo.getValueByIndex(poseIndex);\r\n        const idCount: number = idListInfo.getSize();\r\n        let groupCount = 0;\r\n\r\n        for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\r\n          const partInfo: Value = idListInfo.getValueByIndex(groupIndex);\r\n          const partData: PartData = new PartData();\r\n          const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n            partInfo.getValueByString(Id).getRawString()\r\n          );\r\n\r\n          partData.partId = parameterId;\r\n\r\n          // リンクするパーツの設定\r\n          if (!partInfo.getValueByString(Link).isNull()) {\r\n            const linkListInfo: Value = partInfo.getValueByString(Link);\r\n            const linkCount: number = linkListInfo.getSize();\r\n\r\n            for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\r\n              const linkPart: PartData = new PartData();\r\n              const linkId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n                linkListInfo.getValueByIndex(linkIndex).getString()\r\n              );\r\n\r\n              linkPart.partId = linkId;\r\n\r\n              partData.link.pushBack(linkPart);\r\n            }\r\n          }\r\n\r\n          ret._partGroups.pushBack(partData.clone());\r\n\r\n          ++groupCount;\r\n        }\r\n\r\n        ret._partGroupCounts.pushBack(groupCount);\r\n      }\r\n\r\n      CubismJson.delete(json);\r\n\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * インスタンスを破棄する\r\n     * @param pose 対象のCubismPose\r\n     */\r\n    public static delete(pose: CubismPose): void {\r\n      if (pose != null) {\r\n        pose = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * モデルのパラメータの更新\r\n     * @param model 対象のモデル\r\n     * @param deltaTimeSeconds デルタ時間[秒]\r\n     */\r\n    public updateParameters(\r\n      model: CubismModel,\r\n      deltaTimeSeconds: number\r\n    ): void {\r\n      // 前回のモデルと同じでない場合は初期化が必要\r\n      if (model != this._lastModel) {\r\n        // パラメータインデックスの初期化\r\n        this.reset(model);\r\n      }\r\n\r\n      this._lastModel = model;\r\n\r\n      // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\r\n      if (deltaTimeSeconds < 0.0) {\r\n        deltaTimeSeconds = 0.0;\r\n      }\r\n\r\n      let beginIndex = 0;\r\n\r\n      for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\r\n        const partGroupCount: number = this._partGroupCounts.at(i);\r\n\r\n        this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\r\n\r\n        beginIndex += partGroupCount;\r\n      }\r\n\r\n      this.copyPartOpacities(model);\r\n    }\r\n\r\n    /**\r\n     * 表示を初期化\r\n     * @param model 対象のモデル\r\n     * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\r\n     */\r\n    public reset(model: CubismModel): void {\r\n      let beginIndex = 0;\r\n\r\n      for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\r\n        const groupCount: number = this._partGroupCounts.at(i);\r\n\r\n        for (let j: number = beginIndex; j < beginIndex + groupCount; ++j) {\r\n          this._partGroups.at(j).initialize(model);\r\n\r\n          const partsIndex: number = this._partGroups.at(j).partIndex;\r\n          const paramIndex: number = this._partGroups.at(j).parameterIndex;\r\n\r\n          if (partsIndex < 0) {\r\n            continue;\r\n          }\r\n\r\n          model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\r\n          model.setParameterValueByIndex(\r\n            paramIndex,\r\n            j == beginIndex ? 1.0 : 0.0\r\n          );\r\n\r\n          for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\r\n            this._partGroups\r\n              .at(j)\r\n              .link.at(k)\r\n              .initialize(model);\r\n          }\r\n        }\r\n\r\n        beginIndex += groupCount;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * パーツの不透明度をコピー\r\n     *\r\n     * @param model 対象のモデル\r\n     */\r\n    public copyPartOpacities(model: CubismModel): void {\r\n      for (\r\n        let groupIndex = 0;\r\n        groupIndex < this._partGroups.getSize();\r\n        ++groupIndex\r\n      ) {\r\n        const partData: PartData = this._partGroups.at(groupIndex);\r\n\r\n        if (partData.link.getSize() == 0) {\r\n          continue; // 連動するパラメータはない\r\n        }\r\n\r\n        const partIndex: number = this._partGroups.at(groupIndex).partIndex;\r\n        const opacity: number = model.getPartOpacityByIndex(partIndex);\r\n\r\n        for (\r\n          let linkIndex = 0;\r\n          linkIndex < partData.link.getSize();\r\n          ++linkIndex\r\n        ) {\r\n          const linkPart: PartData = partData.link.at(linkIndex);\r\n          const linkPartIndex: number = linkPart.partIndex;\r\n\r\n          if (linkPartIndex < 0) {\r\n            continue;\r\n          }\r\n\r\n          model.setPartOpacityByIndex(linkPartIndex, opacity);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * パーツのフェード操作を行う。\r\n     * @param model 対象のモデル\r\n     * @param deltaTimeSeconds デルタ時間[秒]\r\n     * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\r\n     * @param partGroupCount フェード操作を行うパーツグループの個数\r\n     */\r\n    public doFade(\r\n      model: CubismModel,\r\n      deltaTimeSeconds: number,\r\n      beginIndex: number,\r\n      partGroupCount: number\r\n    ): void {\r\n      let visiblePartIndex = -1;\r\n      let newOpacity = 1.0;\r\n\r\n      const phi = 0.5;\r\n      const backOpacityThreshold = 0.15;\r\n\r\n      // 現在、表示状態になっているパーツを取得\r\n      for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n        const partIndex: number = this._partGroups.at(i).partIndex;\r\n        const paramIndex: number = this._partGroups.at(i).parameterIndex;\r\n\r\n        if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\r\n          if (visiblePartIndex >= 0) {\r\n            break;\r\n          }\r\n\r\n          visiblePartIndex = i;\r\n          newOpacity = model.getPartOpacityByIndex(partIndex);\r\n\r\n          // 新しい不透明度を計算\r\n          newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\r\n\r\n          if (newOpacity > 1.0) {\r\n            newOpacity = 1.0;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (visiblePartIndex < 0) {\r\n        visiblePartIndex = 0;\r\n        newOpacity = 1.0;\r\n      }\r\n\r\n      // 表示パーツ、非表示パーツの不透明度を設定する\r\n      for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n        const partsIndex: number = this._partGroups.at(i).partIndex;\r\n\r\n        // 表示パーツの設定\r\n        if (visiblePartIndex == i) {\r\n          model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\r\n        }\r\n        // 非表示パーツの設定\r\n        else {\r\n          let opacity: number = model.getPartOpacityByIndex(partsIndex);\r\n          let a1: number; // 計算によって求められる不透明度\r\n\r\n          if (newOpacity < phi) {\r\n            a1 = (newOpacity * (phi - 1)) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\r\n          } else {\r\n            a1 = ((1 - newOpacity) * phi) / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\r\n          }\r\n\r\n          // 背景の見える割合を制限する場合\r\n          const backOpacity: number = (1.0 - a1) * (1.0 - newOpacity);\r\n\r\n          if (backOpacity > backOpacityThreshold) {\r\n            a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\r\n          }\r\n\r\n          if (opacity > a1) {\r\n            opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\r\n          }\r\n\r\n          model.setPartOpacityByIndex(partsIndex, opacity);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._fadeTimeSeconds = DefaultFadeInSeconds;\r\n      this._lastModel = null;\r\n      this._partGroups = new csmVector<PartData>();\r\n      this._partGroupCounts = new csmVector<number>();\r\n    }\r\n\r\n    _partGroups: csmVector<PartData>; // パーツグループ\r\n    _partGroupCounts: csmVector<number>; // それぞれのパーツグループの個数\r\n    _fadeTimeSeconds: number; // フェード時間[秒]\r\n    _lastModel: CubismModel; // 前回操作したモデル\r\n  }\r\n\r\n  /**\r\n   * パーツにまつわるデータを管理\r\n   */\r\n  export class PartData {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    constructor(v?: PartData) {\r\n      this.parameterIndex = 0;\r\n      this.partIndex = 0;\r\n      this.link = new csmVector<PartData>();\r\n\r\n      if (v != undefined) {\r\n        this.partId = v.partId;\r\n\r\n        for (\r\n          const ite: iterator<PartData> = v.link.begin();\r\n          ite.notEqual(v.link.end());\r\n          ite.preIncrement()\r\n        ) {\r\n          this.link.pushBack(ite.ptr().clone());\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * =演算子のオーバーロード\r\n     */\r\n    public assignment(v: PartData): PartData {\r\n      this.partId = v.partId;\r\n\r\n      for (\r\n        const ite: iterator<PartData> = v.link.begin();\r\n        ite.notEqual(v.link.end());\r\n        ite.preIncrement()\r\n      ) {\r\n        this.link.pushBack(ite.ptr().clone());\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 初期化\r\n     * @param model 初期化に使用するモデル\r\n     */\r\n    public initialize(model: CubismModel): void {\r\n      this.parameterIndex = model.getParameterIndex(this.partId);\r\n      this.partIndex = model.getPartIndex(this.partId);\r\n\r\n      model.setParameterValueByIndex(this.parameterIndex, 1);\r\n    }\r\n\r\n    /**\r\n     * オブジェクトのコピーを生成する\r\n     */\r\n    public clone(): PartData {\r\n      const clonePartData: PartData = new PartData();\r\n\r\n      clonePartData.partId = this.partId;\r\n      clonePartData.parameterIndex = this.parameterIndex;\r\n      clonePartData.partIndex = this.partIndex;\r\n      clonePartData.link = new csmVector<PartData>();\r\n\r\n      for (\r\n        let ite: iterator<PartData> = this.link.begin();\r\n        ite.notEqual(this.link.end());\r\n        ite.increment()\r\n      ) {\r\n        clonePartData.link.pushBack(ite.ptr().clone());\r\n      }\r\n\r\n      return clonePartData;\r\n    }\r\n\r\n    partId: CubismIdHandle; // パーツID\r\n    parameterIndex: number; // パラメータのインデックス\r\n    partIndex: number; // パーツのインデックス\r\n    link: csmVector<PartData>; // 連動するパラメータ\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}