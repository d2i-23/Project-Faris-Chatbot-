{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmVector } from '../type/csmvector';\nimport { CubismJson } from '../utils/cubismjson';\nimport { ACubismMotion } from './acubismmotion';\n// exp3.jsonのキーとデフォルト\nconst ExpressionKeyFadeIn = 'FadeInTime';\nconst ExpressionKeyFadeOut = 'FadeOutTime';\nconst ExpressionKeyParameters = 'Parameters';\nconst ExpressionKeyId = 'Id';\nconst ExpressionKeyValue = 'Value';\nconst ExpressionKeyBlend = 'Blend';\nconst BlendValueAdd = 'Add';\nconst BlendValueMultiply = 'Multiply';\nconst BlendValueOverwrite = 'Overwrite';\nconst DefaultFadeTime = 1.0;\n\n/**\n * 表情のモーション\n *\n * 表情のモーションクラス。\n */\nexport class CubismExpressionMotion extends ACubismMotion {\n  /**\n   * インスタンスを作成する。\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  static create(buffer, size) {\n    const expression = new CubismExpressionMotion();\n    expression.parse(buffer, size);\n    return expression;\n  }\n\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  doUpdateParameters(model, userTimeSeconds, weight, motionQueueEntry) {\n    for (let i = 0; i < this._parameters.getSize(); ++i) {\n      const parameter = this._parameters.at(i);\n      switch (parameter.blendType) {\n        case ExpressionBlendType.ExpressionBlendType_Add:\n          {\n            model.addParameterValueById(parameter.parameterId, parameter.value, weight);\n            break;\n          }\n        case ExpressionBlendType.ExpressionBlendType_Multiply:\n          {\n            model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\n            break;\n          }\n        case ExpressionBlendType.ExpressionBlendType_Overwrite:\n          {\n            model.setParameterValueById(parameter.parameterId, parameter.value, weight);\n            break;\n          }\n        default:\n          // 仕様にない値を設定した時はすでに加算モードになっている\n          break;\n      }\n    }\n  }\n  parse(buffer, size) {\n    const json = CubismJson.create(buffer, size);\n    const root = json.getRoot();\n    this.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)); // フェードイン\n    this.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)); // フェードアウト\n\n    // 各パラメータについて\n    const parameterCount = root.getValueByString(ExpressionKeyParameters).getSize();\n    this._parameters.prepareCapacity(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      const param = root.getValueByString(ExpressionKeyParameters).getValueByIndex(i);\n      const parameterId = CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString()); // パラメータID\n\n      const value = param.getValueByString(ExpressionKeyValue).toFloat(); // 値\n\n      // 計算方法の設定\n      let blendType;\n      if (param.getValueByString(ExpressionKeyBlend).isNull() || param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd) {\n        blendType = ExpressionBlendType.ExpressionBlendType_Add;\n      } else if (param.getValueByString(ExpressionKeyBlend).getString() == BlendValueMultiply) {\n        blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\n      } else if (param.getValueByString(ExpressionKeyBlend).getString() == BlendValueOverwrite) {\n        blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\n      } else {\n        // その他 仕様にない値を設定した時は加算モードにすることで復旧\n        blendType = ExpressionBlendType.ExpressionBlendType_Add;\n      }\n\n      // 設定オブジェクトを作成してリストに追加する\n      const item = new ExpressionParameter();\n      item.parameterId = parameterId;\n      item.blendType = blendType;\n      item.value = value;\n      this._parameters.pushBack(item);\n    }\n    CubismJson.delete(json); // JSONデータは不要になったら削除する\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    this._parameters = void 0;\n    this._parameters = new csmVector();\n  }\n\n  // 表情のパラメータ情報リスト\n}\n\n/**\n * 表情パラメータ値の計算方式\n */\nexport let ExpressionBlendType = /*#__PURE__*/function (ExpressionBlendType) {\n  ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\n  ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\n  ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\n  return ExpressionBlendType;\n}({}); // 上書き\n\n/**\n * 表情のパラメータ情報\n */\nexport class ExpressionParameter {\n  constructor() {\n    this.parameterId = void 0;\n    // パラメータID\n    this.blendType = void 0;\n    // パラメータの演算種類\n    this.value = void 0;\n  } // 値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismexpressionmotion';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismExpressionMotion = _Live2DCubismFramework.CubismExpressionMotion = $.CubismExpressionMotion;\n  const ExpressionBlendType = _Live2DCubismFramework.ExpressionBlendType = $.ExpressionBlendType;\n  const ExpressionParameter = _Live2DCubismFramework.ExpressionParameter = $.ExpressionParameter;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismFramework","csmVector","CubismJson","ACubismMotion","ExpressionKeyFadeIn","ExpressionKeyFadeOut","ExpressionKeyParameters","ExpressionKeyId","ExpressionKeyValue","ExpressionKeyBlend","BlendValueAdd","BlendValueMultiply","BlendValueOverwrite","DefaultFadeTime","CubismExpressionMotion","create","buffer","size","expression","parse","doUpdateParameters","model","userTimeSeconds","weight","motionQueueEntry","i","_parameters","getSize","parameter","at","blendType","ExpressionBlendType","ExpressionBlendType_Add","addParameterValueById","parameterId","value","ExpressionBlendType_Multiply","multiplyParameterValueById","ExpressionBlendType_Overwrite","setParameterValueById","json","root","getRoot","setFadeInTime","getValueByString","toFloat","setFadeOutTime","parameterCount","prepareCapacity","param","getValueByIndex","getIdManager","getId","getRawString","isNull","getString","item","ExpressionParameter","pushBack","delete","constructor","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/motion/cubismexpressionmotion.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\nimport { CubismJson, Value } from '../utils/cubismjson';\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\n// exp3.jsonのキーとデフォルト\nconst ExpressionKeyFadeIn = 'FadeInTime';\nconst ExpressionKeyFadeOut = 'FadeOutTime';\nconst ExpressionKeyParameters = 'Parameters';\nconst ExpressionKeyId = 'Id';\nconst ExpressionKeyValue = 'Value';\nconst ExpressionKeyBlend = 'Blend';\nconst BlendValueAdd = 'Add';\nconst BlendValueMultiply = 'Multiply';\nconst BlendValueOverwrite = 'Overwrite';\nconst DefaultFadeTime = 1.0;\n\n/**\n * 表情のモーション\n *\n * 表情のモーションクラス。\n */\nexport class CubismExpressionMotion extends ACubismMotion {\n  /**\n   * インスタンスを作成する。\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(\n    buffer: ArrayBuffer,\n    size: number\n  ): CubismExpressionMotion {\n    const expression: CubismExpressionMotion = new CubismExpressionMotion();\n    expression.parse(buffer, size);\n    return expression;\n  }\n\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  public doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    weight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void {\n    for (let i = 0; i < this._parameters.getSize(); ++i) {\n      const parameter: ExpressionParameter = this._parameters.at(i);\n\n      switch (parameter.blendType) {\n        case ExpressionBlendType.ExpressionBlendType_Add: {\n          model.addParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case ExpressionBlendType.ExpressionBlendType_Multiply: {\n          model.multiplyParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case ExpressionBlendType.ExpressionBlendType_Overwrite: {\n          model.setParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        default:\n          // 仕様にない値を設定した時はすでに加算モードになっている\n          break;\n      }\n    }\n  }\n\n  protected parse(buffer: ArrayBuffer, size: number) {\n    const json: CubismJson = CubismJson.create(buffer, size);\n    const root: Value = json.getRoot();\n\n    this.setFadeInTime(\n      root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)\n    ); // フェードイン\n    this.setFadeOutTime(\n      root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)\n    ); // フェードアウト\n\n    // 各パラメータについて\n    const parameterCount = root\n      .getValueByString(ExpressionKeyParameters)\n      .getSize();\n    this._parameters.prepareCapacity(parameterCount);\n\n    for (let i = 0; i < parameterCount; ++i) {\n      const param: Value = root\n        .getValueByString(ExpressionKeyParameters)\n        .getValueByIndex(i);\n      const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\n        param.getValueByString(ExpressionKeyId).getRawString()\n      ); // パラメータID\n\n      const value: number = param\n        .getValueByString(ExpressionKeyValue)\n        .toFloat(); // 値\n\n      // 計算方法の設定\n      let blendType: ExpressionBlendType;\n\n      if (\n        param.getValueByString(ExpressionKeyBlend).isNull() ||\n        param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd\n      ) {\n        blendType = ExpressionBlendType.ExpressionBlendType_Add;\n      } else if (\n        param.getValueByString(ExpressionKeyBlend).getString() ==\n        BlendValueMultiply\n      ) {\n        blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\n      } else if (\n        param.getValueByString(ExpressionKeyBlend).getString() ==\n        BlendValueOverwrite\n      ) {\n        blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\n      } else {\n        // その他 仕様にない値を設定した時は加算モードにすることで復旧\n        blendType = ExpressionBlendType.ExpressionBlendType_Add;\n      }\n\n      // 設定オブジェクトを作成してリストに追加する\n      const item: ExpressionParameter = new ExpressionParameter();\n\n      item.parameterId = parameterId;\n      item.blendType = blendType;\n      item.value = value;\n\n      this._parameters.pushBack(item);\n    }\n\n    CubismJson.delete(json); // JSONデータは不要になったら削除する\n  }\n\n  /**\n   * コンストラクタ\n   */\n  protected constructor() {\n    super();\n\n    this._parameters = new csmVector<ExpressionParameter>();\n  }\n\n  _parameters: csmVector<ExpressionParameter>; // 表情のパラメータ情報リスト\n}\n\n/**\n * 表情パラメータ値の計算方式\n */\nexport enum ExpressionBlendType {\n  ExpressionBlendType_Add = 0, // 加算\n  ExpressionBlendType_Multiply = 1, // 乗算\n  ExpressionBlendType_Overwrite = 2, // 上書き\n}\n\n/**\n * 表情のパラメータ情報\n */\nexport class ExpressionParameter {\n  parameterId: CubismIdHandle; // パラメータID\n  blendType: ExpressionBlendType; // パラメータの演算種類\n  value: number; // 値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismexpressionmotion';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismExpressionMotion = $.CubismExpressionMotion;\n  export type CubismExpressionMotion = $.CubismExpressionMotion;\n  export const ExpressionBlendType = $.ExpressionBlendType;\n  export type ExpressionBlendType = $.ExpressionBlendType;\n  export const ExpressionParameter = $.ExpressionParameter;\n  export type ExpressionParameter = $.ExpressionParameter;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}