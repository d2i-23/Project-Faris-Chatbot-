{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismmath } from '../math/cubismmath';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\nvar csmVector = csmvector.csmVector;\nvar csmString = csmstring.csmString;\nvar CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismMath = cubismmath.CubismMath;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  /** モーション再生終了コールバック関数定義 */\n\n  /**\r\n   * モーションの抽象基底クラス\r\n   *\r\n   * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\r\n   */\n  class ACubismMotion {\n    /**\r\n     * インスタンスの破棄\r\n     */\n    static delete(motion) {\n      motion.release();\n      motion = void 0;\n      motion = null;\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      /**\r\n       * モーション再生終了コールバックの登録\r\n       *\r\n       * モーション再生終了コールバックを登録する。\r\n       * isFinishedフラグを設定するタイミングで呼び出される。\r\n       * 以下の状態の際には呼び出されない:\r\n       *   1. 再生中のモーションが「ループ」として設定されているとき\r\n       *   2. コールバックが登録されていない時\r\n       *\r\n       * @param onFinishedMotionHandler モーション再生終了コールバック関数\r\n       */\n      this.setFinishedMotionHandler = onFinishedMotionHandler => this._onFinishedMotion = onFinishedMotionHandler;\n      /**\r\n       * モーション再生終了コールバックの取得\r\n       *\r\n       * モーション再生終了コールバックを取得する。\r\n       *\r\n       * @return 登録されているモーション再生終了コールバック関数\r\n       */\n      this.getFinishedMotionHandler = () => this._onFinishedMotion;\n      this._fadeInSeconds = void 0;\n      // フェードインにかかる時間[秒]\n      this._fadeOutSeconds = void 0;\n      // フェードアウトにかかる時間[秒]\n      this._weight = void 0;\n      // モーションの重み\n      this._offsetSeconds = void 0;\n      // モーション再生の開始時間[秒]\n      this._firedEventValues = void 0;\n      // モーション再生終了コールバック関数\n      this._onFinishedMotion = void 0;\n      this._fadeInSeconds = -1.0;\n      this._fadeOutSeconds = -1.0;\n      this._weight = 1.0;\n      this._offsetSeconds = 0.0; // 再生の開始時刻\n      this._firedEventValues = new csmVector();\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      this._weight = 0.0;\n    }\n\n    /**\r\n     * モデルのパラメータ\r\n     * @param model 対象のモデル\r\n     * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n     * @param userTimeSeconds デルタ時間の積算値[秒]\r\n     */\n    updateParameters(model, motionQueueEntry, userTimeSeconds) {\n      if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n        return;\n      }\n      if (!motionQueueEntry.isStarted()) {\n        motionQueueEntry.setIsStarted(true);\n        motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\n        motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\n\n        const duration = this.getDuration();\n        if (motionQueueEntry.getEndTime() < 0) {\n          // 開始していないうちに終了設定している場合がある。\n          motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\n          // duration == -1 の場合はループする\n        }\n      }\n\n      let fadeWeight = this._weight; // 現在の値と掛け合わせる割合\n\n      //---- フェードイン・アウトの処理 ----\n      // 単純なサイン関数でイージングする\n      const fadeIn = this._fadeInSeconds == 0.0 ? 1.0 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\n      const fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0 ? 1.0 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\n      fadeWeight = fadeWeight * fadeIn * fadeOut;\n      motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n      CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\n\n      //---- 全てのパラメータIDをループする ----\n      this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\n\n      // 後処理\n      // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\n      if (motionQueueEntry.getEndTime() > 0 && motionQueueEntry.getEndTime() < userTimeSeconds) {\n        motionQueueEntry.setIsFinished(true); // 終了\n      }\n    }\n\n    /**\r\n     * フェードインの時間を設定する\r\n     * @param fadeInSeconds フェードインにかかる時間[秒]\r\n     */\n    setFadeInTime(fadeInSeconds) {\n      this._fadeInSeconds = fadeInSeconds;\n    }\n\n    /**\r\n     * フェードアウトの時間を設定する\r\n     * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n     */\n    setFadeOutTime(fadeOutSeconds) {\n      this._fadeOutSeconds = fadeOutSeconds;\n    }\n\n    /**\r\n     * フェードアウトにかかる時間の取得\r\n     * @return フェードアウトにかかる時間[秒]\r\n     */\n    getFadeOutTime() {\n      return this._fadeOutSeconds;\n    }\n\n    /**\r\n     * フェードインにかかる時間の取得\r\n     * @return フェードインにかかる時間[秒]\r\n     */\n    getFadeInTime() {\n      return this._fadeInSeconds;\n    }\n\n    /**\r\n     * モーション適用の重みの設定\r\n     * @param weight 重み（0.0 - 1.0）\r\n     */\n    setWeight(weight) {\n      this._weight = weight;\n    }\n\n    /**\r\n     * モーション適用の重みの取得\r\n     * @return 重み（0.0 - 1.0）\r\n     */\n    getWeight() {\n      return this._weight;\n    }\n\n    /**\r\n     * モーションの長さの取得\r\n     * @return モーションの長さ[秒]\r\n     *\r\n     * @note ループの時は「-1」。\r\n     *       ループでない場合は、オーバーライドする。\r\n     *       正の値の時は取得される時間で終了する。\r\n     *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\r\n     */\n    getDuration() {\n      return -1.0;\n    }\n\n    /**\r\n     * モーションのループ1回分の長さの取得\r\n     * @return モーションのループ一回分の長さ[秒]\r\n     *\r\n     * @note ループしない場合は、getDuration()と同じ値を返す\r\n     *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\r\n     */\n    getLoopDuration() {\n      return -1.0;\n    }\n\n    /**\r\n     * モーション再生の開始時刻の設定\r\n     * @param offsetSeconds モーション再生の開始時刻[秒]\r\n     */\n    setOffsetTime(offsetSeconds) {\n      this._offsetSeconds = offsetSeconds;\n    }\n\n    /**\r\n     * モデルのパラメータ更新\r\n     *\r\n     * イベント発火のチェック。\r\n     * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n     *\r\n     * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\r\n     * @param motionTimeSeconds 今回の再生時間[秒]\r\n     */\n    getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n      return this._firedEventValues;\n    }\n\n    /**\r\n     * モーションを更新して、モデルにパラメータ値を反映する\r\n     * @param model 対象のモデル\r\n     * @param userTimeSeconds デルタ時間の積算値[秒]\r\n     * @param weight モーションの重み\r\n     * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n     * @return true モデルへパラメータ値の反映あり\r\n     * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\r\n     */\n  }\n  _Live2DCubismFramework.ACubismMotion = ACubismMotion;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismmath","cubismmodel","cubismmotionqueueentry","csmstring","csmvector","CSM_ASSERT","csmVector","csmString","CubismMotionQueueEntry","CubismModel","CubismMath","_Live2DCubismFramework","ACubismMotion","delete","motion","release","constructor","setFinishedMotionHandler","onFinishedMotionHandler","_onFinishedMotion","getFinishedMotionHandler","_fadeInSeconds","_fadeOutSeconds","_weight","_offsetSeconds","_firedEventValues","updateParameters","model","motionQueueEntry","userTimeSeconds","isAvailable","isFinished","isStarted","setIsStarted","setStartTime","setFadeInStartTime","duration","getDuration","getEndTime","setEndTime","getStartTime","fadeWeight","fadeIn","getEasingSine","getFadeInStartTime","fadeOut","setState","doUpdateParameters","setIsFinished","setFadeInTime","fadeInSeconds","setFadeOutTime","fadeOutSeconds","getFadeOutTime","getFadeInTime","setWeight","weight","getWeight","getLoopDuration","setOffsetTime","offsetSeconds","getFiredEvent","beforeCheckTimeSeconds","motionTimeSeconds"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/motion/acubismmotion.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismmath } from '../math/cubismmath';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { CSM_ASSERT } from '../utils/cubismdebug';\r\nimport csmVector = csmvector.csmVector;\r\nimport csmString = csmstring.csmString;\r\nimport CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismMath = cubismmath.CubismMath;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /** モーション再生終了コールバック関数定義 */\r\n  export type FinishedMotionCallback = (self: ACubismMotion) => void;\r\n\r\n  /**\r\n   * モーションの抽象基底クラス\r\n   *\r\n   * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\r\n   */\r\n  export abstract class ACubismMotion {\r\n    /**\r\n     * インスタンスの破棄\r\n     */\r\n    public static delete(motion: ACubismMotion): void {\r\n      motion.release();\r\n      motion = void 0;\r\n      motion = null;\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._fadeInSeconds = -1.0;\r\n      this._fadeOutSeconds = -1.0;\r\n      this._weight = 1.0;\r\n      this._offsetSeconds = 0.0; // 再生の開始時刻\r\n      this._firedEventValues = new csmVector<csmString>();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      this._weight = 0.0;\r\n    }\r\n\r\n    /**\r\n     * モデルのパラメータ\r\n     * @param model 対象のモデル\r\n     * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n     * @param userTimeSeconds デルタ時間の積算値[秒]\r\n     */\r\n    public updateParameters(\r\n      model: CubismModel,\r\n      motionQueueEntry: CubismMotionQueueEntry,\r\n      userTimeSeconds: number\r\n    ): void {\r\n      if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\r\n        return;\r\n      }\r\n\r\n      if (!motionQueueEntry.isStarted()) {\r\n        motionQueueEntry.setIsStarted(true);\r\n        motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\r\n        motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\r\n\r\n        const duration: number = this.getDuration();\r\n\r\n        if (motionQueueEntry.getEndTime() < 0) {\r\n          // 開始していないうちに終了設定している場合がある。\r\n          motionQueueEntry.setEndTime(\r\n            duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration\r\n          );\r\n          // duration == -1 の場合はループする\r\n        }\r\n      }\r\n\r\n      let fadeWeight: number = this._weight; // 現在の値と掛け合わせる割合\r\n\r\n      //---- フェードイン・アウトの処理 ----\r\n      // 単純なサイン関数でイージングする\r\n      const fadeIn: number =\r\n        this._fadeInSeconds == 0.0\r\n          ? 1.0\r\n          : CubismMath.getEasingSine(\r\n              (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                this._fadeInSeconds\r\n            );\r\n\r\n      const fadeOut: number =\r\n        this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n          ? 1.0\r\n          : CubismMath.getEasingSine(\r\n              (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                this._fadeOutSeconds\r\n            );\r\n\r\n      fadeWeight = fadeWeight * fadeIn * fadeOut;\r\n\r\n      motionQueueEntry.setState(userTimeSeconds, fadeWeight);\r\n\r\n      CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\r\n\r\n      //---- 全てのパラメータIDをループする ----\r\n      this.doUpdateParameters(\r\n        model,\r\n        userTimeSeconds,\r\n        fadeWeight,\r\n        motionQueueEntry\r\n      );\r\n\r\n      // 後処理\r\n      // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\r\n      if (\r\n        motionQueueEntry.getEndTime() > 0 &&\r\n        motionQueueEntry.getEndTime() < userTimeSeconds\r\n      ) {\r\n        motionQueueEntry.setIsFinished(true); // 終了\r\n      }\r\n    }\r\n\r\n    /**\r\n     * フェードインの時間を設定する\r\n     * @param fadeInSeconds フェードインにかかる時間[秒]\r\n     */\r\n    public setFadeInTime(fadeInSeconds: number): void {\r\n      this._fadeInSeconds = fadeInSeconds;\r\n    }\r\n\r\n    /**\r\n     * フェードアウトの時間を設定する\r\n     * @param fadeOutSeconds フェードアウトにかかる時間[秒]\r\n     */\r\n    public setFadeOutTime(fadeOutSeconds: number): void {\r\n      this._fadeOutSeconds = fadeOutSeconds;\r\n    }\r\n\r\n    /**\r\n     * フェードアウトにかかる時間の取得\r\n     * @return フェードアウトにかかる時間[秒]\r\n     */\r\n    public getFadeOutTime(): number {\r\n      return this._fadeOutSeconds;\r\n    }\r\n\r\n    /**\r\n     * フェードインにかかる時間の取得\r\n     * @return フェードインにかかる時間[秒]\r\n     */\r\n    public getFadeInTime(): number {\r\n      return this._fadeInSeconds;\r\n    }\r\n\r\n    /**\r\n     * モーション適用の重みの設定\r\n     * @param weight 重み（0.0 - 1.0）\r\n     */\r\n    public setWeight(weight: number): void {\r\n      this._weight = weight;\r\n    }\r\n\r\n    /**\r\n     * モーション適用の重みの取得\r\n     * @return 重み（0.0 - 1.0）\r\n     */\r\n    public getWeight(): number {\r\n      return this._weight;\r\n    }\r\n\r\n    /**\r\n     * モーションの長さの取得\r\n     * @return モーションの長さ[秒]\r\n     *\r\n     * @note ループの時は「-1」。\r\n     *       ループでない場合は、オーバーライドする。\r\n     *       正の値の時は取得される時間で終了する。\r\n     *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\r\n     */\r\n    public getDuration(): number {\r\n      return -1.0;\r\n    }\r\n\r\n    /**\r\n     * モーションのループ1回分の長さの取得\r\n     * @return モーションのループ一回分の長さ[秒]\r\n     *\r\n     * @note ループしない場合は、getDuration()と同じ値を返す\r\n     *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\r\n     */\r\n    public getLoopDuration(): number {\r\n      return -1.0;\r\n    }\r\n\r\n    /**\r\n     * モーション再生の開始時刻の設定\r\n     * @param offsetSeconds モーション再生の開始時刻[秒]\r\n     */\r\n    public setOffsetTime(offsetSeconds: number): void {\r\n      this._offsetSeconds = offsetSeconds;\r\n    }\r\n\r\n    /**\r\n     * モデルのパラメータ更新\r\n     *\r\n     * イベント発火のチェック。\r\n     * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n     *\r\n     * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\r\n     * @param motionTimeSeconds 今回の再生時間[秒]\r\n     */\r\n    public getFiredEvent(\r\n      beforeCheckTimeSeconds: number,\r\n      motionTimeSeconds: number\r\n    ): csmVector<csmString> {\r\n      return this._firedEventValues;\r\n    }\r\n\r\n    /**\r\n     * モーションを更新して、モデルにパラメータ値を反映する\r\n     * @param model 対象のモデル\r\n     * @param userTimeSeconds デルタ時間の積算値[秒]\r\n     * @param weight モーションの重み\r\n     * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n     * @return true モデルへパラメータ値の反映あり\r\n     * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\r\n     */\r\n    public abstract doUpdateParameters(\r\n      model: CubismModel,\r\n      userTimeSeconds: number,\r\n      weight: number,\r\n      motionQueueEntry: CubismMotionQueueEntry\r\n    ): void;\r\n\r\n    /**\r\n     * モーション再生終了コールバックの登録\r\n     *\r\n     * モーション再生終了コールバックを登録する。\r\n     * isFinishedフラグを設定するタイミングで呼び出される。\r\n     * 以下の状態の際には呼び出されない:\r\n     *   1. 再生中のモーションが「ループ」として設定されているとき\r\n     *   2. コールバックが登録されていない時\r\n     *\r\n     * @param onFinishedMotionHandler モーション再生終了コールバック関数\r\n     */\r\n    public setFinishedMotionHandler = (\r\n      onFinishedMotionHandler: FinishedMotionCallback\r\n    ) => (this._onFinishedMotion = onFinishedMotionHandler);\r\n\r\n    /**\r\n     * モーション再生終了コールバックの取得\r\n     *\r\n     * モーション再生終了コールバックを取得する。\r\n     *\r\n     * @return 登録されているモーション再生終了コールバック関数\r\n     */\r\n    public getFinishedMotionHandler = () => this._onFinishedMotion;\r\n\r\n    public _fadeInSeconds: number; // フェードインにかかる時間[秒]\r\n    public _fadeOutSeconds: number; // フェードアウトにかかる時間[秒]\r\n    public _weight: number; // モーションの重み\r\n    public _offsetSeconds: number; // モーション再生の開始時間[秒]\r\n\r\n    public _firedEventValues: csmVector<csmString>;\r\n\r\n    // モーション再生終了コールバック関数\r\n    public _onFinishedMotion?: FinishedMotionCallback;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}