{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismjson } from './utils/cubismjson';\nimport { Live2DCubismFramework as cubismidmanager } from './id/cubismidmanager';\nimport { Live2DCubismFramework as cubismrenderer } from './rendering/cubismrenderer';\nimport { CubismLogInfo, CubismLogWarning, CSM_ASSERT } from './utils/cubismdebug';\nvar Value = cubismjson.Value;\nvar CubismIdManager = cubismidmanager.CubismIdManager;\nvar CubismRenderer = cubismrenderer.CubismRenderer;\nexport function strtod(s, endPtr) {\n  let index = 0;\n  for (let i = 1;; i++) {\n    const testC = s.slice(i - 1, i);\n\n    // 指数・マイナスの可能性があるのでスキップする\n    if (testC == 'e' || testC == '-' || testC == 'E') {\n      continue;\n    } // 文字列の範囲を広げていく\n\n    const test = s.substring(0, i);\n    const number = Number(test);\n    if (isNaN(number)) {\n      // 数値として認識できなくなったので終了\n      break;\n    } // 最後に数値としてできたindexを格納しておく\n\n    index = i;\n  }\n  let d = parseFloat(s); // パースした数値\n\n  if (isNaN(d)) {\n    // 数値として認識できなくなったので終了\n    d = NaN;\n  }\n  endPtr[0] = s.slice(index); // 後続の文字列\n  return d;\n}\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  // ファイルスコープの変数を初期化\n\n  let s_isStarted = false;\n  let s_isInitialized = false;\n  let s_option = null;\n  let s_cubismIdManager = null;\n\n  /**\r\n   * Framework内で使う定数の宣言\r\n   */\n  let Constant;\n  (function (_Constant) {\n    const vertexOffset = _Constant.vertexOffset = 0;\n    const vertexStep = _Constant.vertexStep = 2;\n  })(Constant || (Constant = _Live2DCubismFramework.Constant || (_Live2DCubismFramework.Constant = {})));\n  function csmDelete(address) {\n    if (!address) {\n      return;\n    }\n    address = void 0;\n  }\n  _Live2DCubismFramework.csmDelete = csmDelete;\n  class CubismFramework {\n    /**\r\n     * Cubism FrameworkのAPIを使用可能にする。\r\n     *  APIを実行する前に必ずこの関数を実行すること。\r\n     *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\r\n     *\r\n     * @param    option      Optionクラスのインスタンス\r\n     *\r\n     * @return   準備処理が完了したらtrueが返ります。\r\n     */\n    static startUp() {\n      let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (s_isStarted) {\n        CubismLogInfo('CubismFramework.startUp() is already done.');\n        return s_isStarted;\n      }\n      s_option = option;\n      if (s_option != null) {\n        Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\n      }\n      s_isStarted = true;\n\n      // Live2D Cubism Coreバージョン情報を表示\n      if (s_isStarted) {\n        const version = Live2DCubismCore.Version.csmGetVersion();\n        const major = (version & 0xff000000) >> 24;\n        const minor = (version & 0x00ff0000) >> 16;\n        const patch = version & 0x0000ffff;\n        const versionNumber = version;\n        CubismLogInfo(`Live2D Cubism Core version: {0}.{1}.{2} ({3})`, ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);\n      }\n      CubismLogInfo('CubismFramework.startUp() is complete.');\n      return s_isStarted;\n    }\n\n    /**\r\n     * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\r\n     * Dispose()したCubismFrameworkを再利用する際に利用してください。\r\n     */\n    static cleanUp() {\n      s_isStarted = false;\n      s_isInitialized = false;\n      s_option = null;\n      s_cubismIdManager = null;\n    }\n\n    /**\r\n     *  将Cubism Framework内的资源初始化，使模型处于可显示状态。\r\n     *  要再次Initialize（），必须先执行Dispose（）。\r\n     */\n    static initialize() {\n      CSM_ASSERT(s_isStarted);\n      if (!s_isStarted) {\n        CubismLogWarning('CubismFramework is not started.');\n        return;\n      }\n\n      // --- s_isInitializedによる連続初期化ガード ---\n      // 連続してリソース確保が行われないようにする。\n      // 再度Initialize()するには先にDispose()を実行する必要がある。\n      if (s_isInitialized) {\n        CubismLogWarning('CubismFramework.initialize() skipped, already initialized.');\n        return;\n      }\n\n      //---- static 初期化 ----\n      Value.staticInitializeNotForClientCall();\n      s_cubismIdManager = new CubismIdManager();\n      s_isInitialized = true;\n      CubismLogInfo('CubismFramework.initialize() is complete.');\n    }\n\n    /**\r\n     * Cubism Framework内の全てのリソースを解放します。\r\n     *      ただし、外部で確保されたリソースについては解放しません。\r\n     *      外部で適切に破棄する必要があります。\r\n     */\n    static dispose() {\n      CSM_ASSERT(s_isStarted);\n      if (!s_isStarted) {\n        CubismLogWarning('CubismFramework is not started.');\n        return;\n      }\n\n      // --- s_isInitializedによる未初期化解放ガード ---\n      // dispose()するには先にinitialize()を実行する必要がある。\n      if (!s_isInitialized) {\n        // false...リソース未確保の場合\n        CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\n        return;\n      }\n      Value.staticReleaseNotForClientCall();\n      s_cubismIdManager.release();\n      s_cubismIdManager = null;\n\n      // レンダラの静的リソース（シェーダプログラム他）を解放する\n      CubismRenderer.staticRelease();\n      s_isInitialized = false;\n      CubismLogInfo('CubismFramework.dispose() is complete.');\n    }\n\n    /**\r\n     * Cubism FrameworkのAPIを使用する準備が完了したかどうか\r\n     * @return APIを使用する準備が完了していればtrueが返ります。\r\n     */\n    static isStarted() {\n      return s_isStarted;\n    }\n\n    /**\r\n     * Cubism Frameworkのリソース初期化がすでに行われているかどうか\r\n     * @return リソース確保が完了していればtrueが返ります\r\n     */\n    static isInitialized() {\n      return s_isInitialized;\n    }\n\n    /**\r\n     * Core APIにバインドしたログ関数を実行する\r\n     *\r\n     * @praram message ログメッセージ\r\n     */\n    static coreLogFunction(message) {\n      // Return if logging not possible.\n      if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\n        return;\n      }\n      Live2DCubismCore.Logging.csmGetLogFunction()(message);\n    }\n\n    /**\r\n     * 現在のログ出力レベル設定の値を返す。\r\n     *\r\n     * @return  現在のログ出力レベル設定の値\r\n     */\n    static getLoggingLevel() {\n      if (s_option != null) {\n        return s_option.loggingLevel;\n      }\n      return LogLevel.LogLevel_Off;\n    }\n\n    /**\r\n     * IDマネージャのインスタンスを取得する\r\n     * @return CubismManagerクラスのインスタンス\r\n     */\n    static getIdManager() {\n      return s_cubismIdManager;\n    }\n\n    /**\r\n     * 静的クラスとして使用する\r\n     * インスタンス化させない\r\n     */\n    constructor() {}\n  }\n  _Live2DCubismFramework.CubismFramework = CubismFramework;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));\nexport class Option {\n  constructor() {\n    this.logFunction = void 0;\n    // ログ出力の関数オブジェクト\n    this.loggingLevel = void 0;\n  } // ログ出力レベルの設定\n}\n\n/**\r\n * ログ出力のレベル\r\n */\nexport let LogLevel = /*#__PURE__*/function (LogLevel) {\n  LogLevel[LogLevel[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\n  LogLevel[LogLevel[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\n  LogLevel[LogLevel[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\n  LogLevel[LogLevel[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\n  LogLevel[LogLevel[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\n  LogLevel[LogLevel[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\n  return LogLevel;\n}({});","map":{"version":3,"names":["Live2DCubismFramework","cubismjson","cubismidmanager","cubismrenderer","CubismLogInfo","CubismLogWarning","CSM_ASSERT","Value","CubismIdManager","CubismRenderer","strtod","s","endPtr","index","i","testC","slice","test","substring","number","Number","isNaN","d","parseFloat","NaN","_Live2DCubismFramework","s_isStarted","s_isInitialized","s_option","s_cubismIdManager","Constant","_Constant","vertexOffset","vertexStep","csmDelete","address","CubismFramework","startUp","option","arguments","length","undefined","Live2DCubismCore","Logging","csmSetLogFunction","logFunction","version","Version","csmGetVersion","major","minor","patch","versionNumber","cleanUp","initialize","staticInitializeNotForClientCall","dispose","staticReleaseNotForClientCall","release","staticRelease","isStarted","isInitialized","coreLogFunction","message","csmGetLogFunction","getLoggingLevel","loggingLevel","LogLevel","LogLevel_Off","getIdManager","constructor","Option"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/live2dcubismframework.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismjson } from './utils/cubismjson';\r\nimport { Live2DCubismFramework as cubismidmanager } from './id/cubismidmanager';\r\nimport { Live2DCubismFramework as cubismrenderer } from './rendering/cubismrenderer';\r\nimport {\r\n  CubismLogInfo,\r\n  CubismLogWarning,\r\n  CSM_ASSERT\r\n} from './utils/cubismdebug';\r\nimport Value = cubismjson.Value;\r\nimport CubismIdManager = cubismidmanager.CubismIdManager;\r\nimport CubismRenderer = cubismrenderer.CubismRenderer;\r\n\r\nexport function strtod(s: string, endPtr: string[]): number {\r\n  let index = 0;\r\n  for (let i = 1; ; i++) {\r\n    const testC: string = s.slice(i - 1, i);\r\n\r\n    // 指数・マイナスの可能性があるのでスキップする\r\n    if (testC == 'e' || testC == '-' || testC == 'E') {\r\n      continue;\r\n    } // 文字列の範囲を広げていく\r\n\r\n    const test: string = s.substring(0, i);\r\n    const number = Number(test);\r\n    if (isNaN(number)) {\r\n      // 数値として認識できなくなったので終了\r\n      break;\r\n    } // 最後に数値としてできたindexを格納しておく\r\n\r\n    index = i;\r\n  }\r\n  let d = parseFloat(s); // パースした数値\r\n\r\n  if (isNaN(d)) {\r\n    // 数値として認識できなくなったので終了\r\n    d = NaN;\r\n  }\r\n\r\n  endPtr[0] = s.slice(index); // 後続の文字列\r\n  return d;\r\n}\r\n\r\nexport namespace Live2DCubismFramework {\r\n  // ファイルスコープの変数を初期化\r\n\r\n  let s_isStarted = false;\r\n  let s_isInitialized = false;\r\n  let s_option: Option = null;\r\n  let s_cubismIdManager: CubismIdManager = null;\r\n\r\n  /**\r\n   * Framework内で使う定数の宣言\r\n   */\r\n  export namespace Constant {\r\n    export const vertexOffset = 0; // メッシュ頂点のオフセット値\r\n    export const vertexStep = 2; // メッシュ頂点のステップ値\r\n  }\r\n\r\n  export function csmDelete<T>(address: T): void {\r\n    if (!address) {\r\n      return;\r\n    }\r\n\r\n    address = void 0;\r\n  }\r\n\r\n  /**\r\n   * Live2D Cubism SDK Original Workflow SDKのエントリポイント\r\n   * 利用開始時はCubismFramework.initialize()を呼び、CubismFramework.dispose()で終了する。\r\n   */\r\n  export class CubismFramework {\r\n    /**\r\n     * Cubism FrameworkのAPIを使用可能にする。\r\n     *  APIを実行する前に必ずこの関数を実行すること。\r\n     *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\r\n     *\r\n     * @param    option      Optionクラスのインスタンス\r\n     *\r\n     * @return   準備処理が完了したらtrueが返ります。\r\n     */\r\n    public static startUp(option: Option = null): boolean {\r\n      if (s_isStarted) {\r\n        CubismLogInfo('CubismFramework.startUp() is already done.');\r\n        return s_isStarted;\r\n      }\r\n\r\n      s_option = option;\r\n\r\n      if (s_option != null) {\r\n        Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\r\n      }\r\n\r\n      s_isStarted = true;\r\n\r\n      // Live2D Cubism Coreバージョン情報を表示\r\n      if (s_isStarted) {\r\n        const version: number = Live2DCubismCore.Version.csmGetVersion();\r\n        const major: number = (version & 0xff000000) >> 24;\r\n        const minor: number = (version & 0x00ff0000) >> 16;\r\n        const patch: number = version & 0x0000ffff;\r\n        const versionNumber: number = version;\r\n\r\n        CubismLogInfo(\r\n          `Live2D Cubism Core version: {0}.{1}.{2} ({3})`,\r\n          ('00' + major).slice(-2),\r\n          ('00' + minor).slice(-2),\r\n          ('0000' + patch).slice(-4),\r\n          versionNumber\r\n        );\r\n      }\r\n\r\n      CubismLogInfo('CubismFramework.startUp() is complete.');\r\n\r\n      return s_isStarted;\r\n    }\r\n\r\n    /**\r\n     * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\r\n     * Dispose()したCubismFrameworkを再利用する際に利用してください。\r\n     */\r\n    public static cleanUp(): void {\r\n      s_isStarted = false;\r\n      s_isInitialized = false;\r\n      s_option = null;\r\n      s_cubismIdManager = null;\r\n    }\r\n\r\n    /**\r\n     *  将Cubism Framework内的资源初始化，使模型处于可显示状态。\r\n     *  要再次Initialize（），必须先执行Dispose（）。\r\n     */\r\n    public static initialize(): void {\r\n      CSM_ASSERT(s_isStarted);\r\n      if (!s_isStarted) {\r\n        CubismLogWarning('CubismFramework is not started.');\r\n        return;\r\n      }\r\n\r\n      // --- s_isInitializedによる連続初期化ガード ---\r\n      // 連続してリソース確保が行われないようにする。\r\n      // 再度Initialize()するには先にDispose()を実行する必要がある。\r\n      if (s_isInitialized) {\r\n        CubismLogWarning(\r\n          'CubismFramework.initialize() skipped, already initialized.'\r\n        );\r\n        return;\r\n      }\r\n\r\n      //---- static 初期化 ----\r\n      Value.staticInitializeNotForClientCall();\r\n\r\n      s_cubismIdManager = new CubismIdManager();\r\n\r\n      s_isInitialized = true;\r\n\r\n      CubismLogInfo('CubismFramework.initialize() is complete.');\r\n    }\r\n\r\n    /**\r\n     * Cubism Framework内の全てのリソースを解放します。\r\n     *      ただし、外部で確保されたリソースについては解放しません。\r\n     *      外部で適切に破棄する必要があります。\r\n     */\r\n    public static dispose(): void {\r\n      CSM_ASSERT(s_isStarted);\r\n      if (!s_isStarted) {\r\n        CubismLogWarning('CubismFramework is not started.');\r\n        return;\r\n      }\r\n\r\n      // --- s_isInitializedによる未初期化解放ガード ---\r\n      // dispose()するには先にinitialize()を実行する必要がある。\r\n      if (!s_isInitialized) {\r\n        // false...リソース未確保の場合\r\n        CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\r\n        return;\r\n      }\r\n\r\n      Value.staticReleaseNotForClientCall();\r\n\r\n      s_cubismIdManager.release();\r\n      s_cubismIdManager = null;\r\n\r\n      // レンダラの静的リソース（シェーダプログラム他）を解放する\r\n      CubismRenderer.staticRelease();\r\n\r\n      s_isInitialized = false;\r\n\r\n      CubismLogInfo('CubismFramework.dispose() is complete.');\r\n    }\r\n\r\n    /**\r\n     * Cubism FrameworkのAPIを使用する準備が完了したかどうか\r\n     * @return APIを使用する準備が完了していればtrueが返ります。\r\n     */\r\n    public static isStarted(): boolean {\r\n      return s_isStarted;\r\n    }\r\n\r\n    /**\r\n     * Cubism Frameworkのリソース初期化がすでに行われているかどうか\r\n     * @return リソース確保が完了していればtrueが返ります\r\n     */\r\n    public static isInitialized(): boolean {\r\n      return s_isInitialized;\r\n    }\r\n\r\n    /**\r\n     * Core APIにバインドしたログ関数を実行する\r\n     *\r\n     * @praram message ログメッセージ\r\n     */\r\n    public static coreLogFunction(message: string): void {\r\n      // Return if logging not possible.\r\n      if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\r\n        return;\r\n      }\r\n\r\n      Live2DCubismCore.Logging.csmGetLogFunction()(message);\r\n    }\r\n\r\n    /**\r\n     * 現在のログ出力レベル設定の値を返す。\r\n     *\r\n     * @return  現在のログ出力レベル設定の値\r\n     */\r\n    public static getLoggingLevel(): LogLevel {\r\n      if (s_option != null) {\r\n        return s_option.loggingLevel;\r\n      }\r\n      return LogLevel.LogLevel_Off;\r\n    }\r\n\r\n    /**\r\n     * IDマネージャのインスタンスを取得する\r\n     * @return CubismManagerクラスのインスタンス\r\n     */\r\n    public static getIdManager(): CubismIdManager {\r\n      return s_cubismIdManager;\r\n    }\r\n\r\n    /**\r\n     * 静的クラスとして使用する\r\n     * インスタンス化させない\r\n     */\r\n    private constructor() {}\r\n  }\r\n}\r\n\r\nexport class Option {\r\n  logFunction: Live2DCubismCore.csmLogFunction; // ログ出力の関数オブジェクト\r\n  loggingLevel: LogLevel; // ログ出力レベルの設定\r\n}\r\n\r\n/**\r\n * ログ出力のレベル\r\n */\r\nexport enum LogLevel {\r\n  LogLevel_Verbose = 0, // 詳細ログ\r\n  LogLevel_Debug, // デバッグログ\r\n  LogLevel_Info, // Infoログ\r\n  LogLevel_Warning, // 警告ログ\r\n  LogLevel_Error, // エラーログ\r\n  LogLevel_Off // ログ出力無効\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}