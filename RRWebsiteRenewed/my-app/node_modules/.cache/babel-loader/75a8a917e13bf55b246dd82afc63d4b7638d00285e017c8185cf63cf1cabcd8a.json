{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nexport class TouchManager {\n  /**\r\n   * コンストラクタ\r\n   */\n  constructor() {\n    this._startY = void 0;\n    // タッチを開始した時のxの値\n    this._startX = void 0;\n    // タッチを開始した時のyの値\n    this._lastX = void 0;\n    // シングルタッチ時のxの値\n    this._lastY = void 0;\n    // シングルタッチ時のyの値\n    this._lastX1 = void 0;\n    // ダブルタッチ時の一つ目のxの値\n    this._lastY1 = void 0;\n    // ダブルタッチ時の一つ目のyの値\n    this._lastX2 = void 0;\n    // ダブルタッチ時の二つ目のxの値\n    this._lastY2 = void 0;\n    // ダブルタッチ時の二つ目のyの値\n    this._lastTouchDistance = void 0;\n    // 2本以上でタッチしたときの指の距離\n    this._deltaX = void 0;\n    // 前回の値から今回の値へのxの移動距離。\n    this._deltaY = void 0;\n    // 前回の値から今回の値へのyの移動距離。\n    this._scale = void 0;\n    // このフレームで掛け合わせる拡大率。拡大操作中以外は1。\n    this._touchSingle = void 0;\n    // シングルタッチ時はtrue\n    this._flipAvailable = void 0;\n    this._startX = 0.0;\n    this._startY = 0.0;\n    this._lastX = 0.0;\n    this._lastY = 0.0;\n    this._lastX1 = 0.0;\n    this._lastY1 = 0.0;\n    this._lastX2 = 0.0;\n    this._lastY2 = 0.0;\n    this._lastTouchDistance = 0.0;\n    this._deltaX = 0.0;\n    this._deltaY = 0.0;\n    this._scale = 1.0;\n    this._touchSingle = false;\n    this._flipAvailable = false;\n  }\n  getCenterX() {\n    return this._lastX;\n  }\n  getCenterY() {\n    return this._lastY;\n  }\n  getDeltaX() {\n    return this._deltaX;\n  }\n  getDeltaY() {\n    return this._deltaY;\n  }\n  getStartX() {\n    return this._startX;\n  }\n  getStartY() {\n    return this._startY;\n  }\n  getScale() {\n    return this._scale;\n  }\n  getX() {\n    return this._lastX;\n  }\n  getY() {\n    return this._lastY;\n  }\n  getX1() {\n    return this._lastX1;\n  }\n  getY1() {\n    return this._lastY1;\n  }\n  getX2() {\n    return this._lastX2;\n  }\n  getY2() {\n    return this._lastY2;\n  }\n  isSingleTouch() {\n    return this._touchSingle;\n  }\n  isFlickAvailable() {\n    return this._flipAvailable;\n  }\n  disableFlick() {\n    this._flipAvailable = false;\n  }\n\n  /**\r\n   * タッチ開始時イベント\r\n   * @param deviceX タッチした画面のxの値\r\n   * @param deviceY タッチした画面のyの値\r\n   */\n  touchesBegan(deviceX, deviceY) {\n    this._lastX = deviceX;\n    this._lastY = deviceY;\n    this._startX = deviceX;\n    this._startY = deviceY;\n    this._lastTouchDistance = -1.0;\n    this._flipAvailable = true;\n    this._touchSingle = true;\n  }\n\n  /**\r\n   * ドラッグ時のイベント\r\n   * @param deviceX タッチした画面のxの値\r\n   * @param deviceY タッチした画面のyの値\r\n   */\n  touchesMoved(deviceX, deviceY) {\n    this._lastX = deviceX;\n    this._lastY = deviceY;\n    this._lastTouchDistance = -1.0;\n    this._touchSingle = true;\n  }\n\n  /**\r\n   * フリックの距離測定\r\n   * @return フリック距離\r\n   */\n  getFlickDistance() {\n    return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);\n  }\n\n  /**\r\n   * 点１から点２への距離を求める\r\n   *\r\n   * @param x1 １つ目のタッチした画面のxの値\r\n   * @param y1 １つ目のタッチした画面のyの値\r\n   * @param x2 ２つ目のタッチした画面のxの値\r\n   * @param y2 ２つ目のタッチした画面のyの値\r\n   */\n  calculateDistance(x1, y1, x2, y2) {\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n  }\n\n  /**\r\n   * ２つ目の値から、移動量を求める。\r\n   * 違う方向の場合は移動量０。同じ方向の場合は、絶対値が小さい方の値を参照する。\r\n   *\r\n   * @param v1 １つ目の移動量\r\n   * @param v2 ２つ目の移動量\r\n   *\r\n   * @return 小さい方の移動量\r\n   */\n  calculateMovingAmount(v1, v2) {\n    if (v1 > 0.0 != v2 > 0.0) {\n      return 0.0;\n    }\n    const sign = v1 > 0.0 ? 1.0 : -1.0;\n    const absoluteValue1 = Math.abs(v1);\n    const absoluteValue2 = Math.abs(v2);\n    return sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2);\n  }\n\n  // フリップが有効かどうか\n}","map":{"version":3,"names":["TouchManager","constructor","_startY","_startX","_lastX","_lastY","_lastX1","_lastY1","_lastX2","_lastY2","_lastTouchDistance","_deltaX","_deltaY","_scale","_touchSingle","_flipAvailable","getCenterX","getCenterY","getDeltaX","getDeltaY","getStartX","getStartY","getScale","getX","getY","getX1","getY1","getX2","getY2","isSingleTouch","isFlickAvailable","disableFlick","touchesBegan","deviceX","deviceY","touchesMoved","getFlickDistance","calculateDistance","x1","y1","x2","y2","Math","sqrt","calculateMovingAmount","v1","v2","sign","absoluteValue1","abs","absoluteValue2"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/src/touchmanager.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nexport class TouchManager {\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  constructor() {\r\n    this._startX = 0.0;\r\n    this._startY = 0.0;\r\n    this._lastX = 0.0;\r\n    this._lastY = 0.0;\r\n    this._lastX1 = 0.0;\r\n    this._lastY1 = 0.0;\r\n    this._lastX2 = 0.0;\r\n    this._lastY2 = 0.0;\r\n    this._lastTouchDistance = 0.0;\r\n    this._deltaX = 0.0;\r\n    this._deltaY = 0.0;\r\n    this._scale = 1.0;\r\n    this._touchSingle = false;\r\n    this._flipAvailable = false;\r\n  }\r\n\r\n  public getCenterX(): number {\r\n    return this._lastX;\r\n  }\r\n\r\n  public getCenterY(): number {\r\n    return this._lastY;\r\n  }\r\n\r\n  public getDeltaX(): number {\r\n    return this._deltaX;\r\n  }\r\n\r\n  public getDeltaY(): number {\r\n    return this._deltaY;\r\n  }\r\n\r\n  public getStartX(): number {\r\n    return this._startX;\r\n  }\r\n\r\n  public getStartY(): number {\r\n    return this._startY;\r\n  }\r\n\r\n  public getScale(): number {\r\n    return this._scale;\r\n  }\r\n\r\n  public getX(): number {\r\n    return this._lastX;\r\n  }\r\n\r\n  public getY(): number {\r\n    return this._lastY;\r\n  }\r\n\r\n  public getX1(): number {\r\n    return this._lastX1;\r\n  }\r\n\r\n  public getY1(): number {\r\n    return this._lastY1;\r\n  }\r\n\r\n  public getX2(): number {\r\n    return this._lastX2;\r\n  }\r\n\r\n  public getY2(): number {\r\n    return this._lastY2;\r\n  }\r\n\r\n  public isSingleTouch(): boolean {\r\n    return this._touchSingle;\r\n  }\r\n\r\n  public isFlickAvailable(): boolean {\r\n    return this._flipAvailable;\r\n  }\r\n\r\n  public disableFlick(): void {\r\n    this._flipAvailable = false;\r\n  }\r\n\r\n  /**\r\n   * タッチ開始時イベント\r\n   * @param deviceX タッチした画面のxの値\r\n   * @param deviceY タッチした画面のyの値\r\n   */\r\n  public touchesBegan(deviceX: number, deviceY: number): void {\r\n    this._lastX = deviceX;\r\n    this._lastY = deviceY;\r\n    this._startX = deviceX;\r\n    this._startY = deviceY;\r\n    this._lastTouchDistance = -1.0;\r\n    this._flipAvailable = true;\r\n    this._touchSingle = true;\r\n  }\r\n\r\n  /**\r\n   * ドラッグ時のイベント\r\n   * @param deviceX タッチした画面のxの値\r\n   * @param deviceY タッチした画面のyの値\r\n   */\r\n  public touchesMoved(deviceX: number, deviceY: number): void {\r\n    this._lastX = deviceX;\r\n    this._lastY = deviceY;\r\n    this._lastTouchDistance = -1.0;\r\n    this._touchSingle = true;\r\n  }\r\n\r\n  /**\r\n   * フリックの距離測定\r\n   * @return フリック距離\r\n   */\r\n  public getFlickDistance(): number {\r\n    return this.calculateDistance(\r\n      this._startX,\r\n      this._startY,\r\n      this._lastX,\r\n      this._lastY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 点１から点２への距離を求める\r\n   *\r\n   * @param x1 １つ目のタッチした画面のxの値\r\n   * @param y1 １つ目のタッチした画面のyの値\r\n   * @param x2 ２つ目のタッチした画面のxの値\r\n   * @param y2 ２つ目のタッチした画面のyの値\r\n   */\r\n  public calculateDistance(\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number\r\n  ): number {\r\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n  }\r\n\r\n  /**\r\n   * ２つ目の値から、移動量を求める。\r\n   * 違う方向の場合は移動量０。同じ方向の場合は、絶対値が小さい方の値を参照する。\r\n   *\r\n   * @param v1 １つ目の移動量\r\n   * @param v2 ２つ目の移動量\r\n   *\r\n   * @return 小さい方の移動量\r\n   */\r\n  public calculateMovingAmount(v1: number, v2: number): number {\r\n    if (v1 > 0.0 != v2 > 0.0) {\r\n      return 0.0;\r\n    }\r\n\r\n    const sign: number = v1 > 0.0 ? 1.0 : -1.0;\r\n    const absoluteValue1 = Math.abs(v1);\r\n    const absoluteValue2 = Math.abs(v2);\r\n    return (\r\n      sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2)\r\n    );\r\n  }\r\n\r\n  _startY: number; // タッチを開始した時のxの値\r\n  _startX: number; // タッチを開始した時のyの値\r\n  _lastX: number; // シングルタッチ時のxの値\r\n  _lastY: number; // シングルタッチ時のyの値\r\n  _lastX1: number; // ダブルタッチ時の一つ目のxの値\r\n  _lastY1: number; // ダブルタッチ時の一つ目のyの値\r\n  _lastX2: number; // ダブルタッチ時の二つ目のxの値\r\n  _lastY2: number; // ダブルタッチ時の二つ目のyの値\r\n  _lastTouchDistance: number; // 2本以上でタッチしたときの指の距離\r\n  _deltaX: number; // 前回の値から今回の値へのxの移動距離。\r\n  _deltaY: number; // 前回の値から今回の値へのyの移動距離。\r\n  _scale: number; // このフレームで掛け合わせる拡大率。拡大操作中以外は1。\r\n  _touchSingle: boolean; // シングルタッチ時はtrue\r\n  _flipAvailable: boolean; // フリップが有効かどうか\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}