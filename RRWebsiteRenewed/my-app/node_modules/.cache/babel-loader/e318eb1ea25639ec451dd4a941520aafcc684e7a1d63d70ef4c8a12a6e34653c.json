{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { JsonArray, JsonBoolean, JsonFloat, JsonMap, JsonNullvalue, JsonString } from './cubismjson';\n\n/**\n * CubismJsonで実装されているJsonパーサを使用せず、\n * TypeScript標準のJsonパーサなどを使用し出力された結果を\n * Cubism SDKで定義されているJSONエレメントの要素に\n * 置き換える処理をするクラス。\n */\nexport class CubismJsonExtension {\n  static parseJsonObject(obj, map) {\n    Object.keys(obj).forEach(key => {\n      if (typeof obj[key] == 'boolean') {\n        const convValue = Boolean(obj[key]);\n        map.put(key, new JsonBoolean(convValue));\n      } else if (typeof obj[key] == 'string') {\n        const convValue = String(obj[key]);\n        map.put(key, new JsonString(convValue));\n      } else if (typeof obj[key] == 'number') {\n        const convValue = Number(obj[key]);\n        map.put(key, new JsonFloat(convValue));\n      } else if (obj[key] instanceof Array) {\n        map.put(key, CubismJsonExtension.parseJsonArray(obj[key]));\n      } else if (obj[key] instanceof Object) {\n        map.put(key, CubismJsonExtension.parseJsonObject(obj[key], new JsonMap()));\n      } else if (obj[key] == null) {\n        map.put(key, new JsonNullvalue());\n      } else {\n        // どれにも当てはまらない場合でも処理する\n        map.put(key, obj[key]);\n      }\n    });\n    return map;\n  }\n  static parseJsonArray(obj) {\n    const arr = new JsonArray();\n    Object.keys(obj).forEach(key => {\n      const convKey = Number(key);\n      if (typeof convKey == 'number') {\n        if (typeof obj[key] == 'boolean') {\n          const convValue = Boolean(obj[key]);\n          arr.add(new JsonBoolean(convValue));\n        } else if (typeof obj[key] == 'string') {\n          const convValue = String(obj[key]);\n          arr.add(new JsonString(convValue));\n        } else if (typeof obj[key] == 'number') {\n          const convValue = Number(obj[key]);\n          arr.add(new JsonFloat(convValue));\n        } else if (obj[key] instanceof Array) {\n          arr.add(this.parseJsonArray(obj[key]));\n        } else if (obj[key] instanceof Object) {\n          arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n        } else if (obj[key] == null) {\n          arr.add(new JsonNullvalue());\n        } else {\n          // どれにも当てはまらない場合でも処理する\n          arr.add(obj[key]);\n        }\n      } else if (obj[key] instanceof Array) {\n        arr.add(this.parseJsonArray(obj[key]));\n      } else if (obj[key] instanceof Object) {\n        arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n      } else if (obj[key] == null) {\n        arr.add(new JsonNullvalue());\n      } else {\n        const convValue = Array(obj[key]);\n        // 配列ともObjectとも判定できなかった場合でも処理する\n        for (let i = 0; i < convValue.length; i++) {\n          arr.add(convValue[i]);\n        }\n      }\n    });\n    return arr;\n  }\n}","map":{"version":3,"names":["JsonArray","JsonBoolean","JsonFloat","JsonMap","JsonNullvalue","JsonString","CubismJsonExtension","parseJsonObject","obj","map","Object","keys","forEach","key","convValue","Boolean","put","String","Number","Array","parseJsonArray","arr","convKey","add","i","length"],"sources":["D:/Personal/PythonStuff/RR/RRWebsiteRenewed/my-app/src/Framework/src/utils/cubismjsonextension.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport {\n  JsonArray,\n  JsonBoolean,\n  JsonFloat,\n  JsonMap,\n  JsonNullvalue,\n  JsonString,\n  Value,\n} from './cubismjson';\n\n/**\n * CubismJsonで実装されているJsonパーサを使用せず、\n * TypeScript標準のJsonパーサなどを使用し出力された結果を\n * Cubism SDKで定義されているJSONエレメントの要素に\n * 置き換える処理をするクラス。\n */\nexport class CubismJsonExtension {\n  static parseJsonObject(obj: Value, map: JsonMap) {\n    Object.keys(obj).forEach((key) => {\n      if (typeof obj[key] == 'boolean') {\n        const convValue = Boolean(obj[key]);\n        map.put(key, new JsonBoolean(convValue));\n      } else if (typeof obj[key] == 'string') {\n        const convValue = String(obj[key]);\n        map.put(key, new JsonString(convValue));\n      } else if (typeof obj[key] == 'number') {\n        const convValue = Number(obj[key]);\n        map.put(key, new JsonFloat(convValue));\n      } else if (obj[key] instanceof Array) {\n        map.put(key, CubismJsonExtension.parseJsonArray(obj[key]));\n      } else if (obj[key] instanceof Object) {\n        map.put(\n          key,\n          CubismJsonExtension.parseJsonObject(obj[key], new JsonMap())\n        );\n      } else if (obj[key] == null) {\n        map.put(key, new JsonNullvalue());\n      } else {\n        // どれにも当てはまらない場合でも処理する\n        map.put(key, obj[key]);\n      }\n    });\n    return map;\n  }\n\n  protected static parseJsonArray(obj: Value) {\n    const arr = new JsonArray();\n    Object.keys(obj).forEach((key) => {\n      const convKey = Number(key);\n      if (typeof convKey == 'number') {\n        if (typeof obj[key] == 'boolean') {\n          const convValue = Boolean(obj[key]);\n          arr.add(new JsonBoolean(convValue));\n        } else if (typeof obj[key] == 'string') {\n          const convValue = String(obj[key]);\n          arr.add(new JsonString(convValue));\n        } else if (typeof obj[key] == 'number') {\n          const convValue = Number(obj[key]);\n          arr.add(new JsonFloat(convValue));\n        } else if (obj[key] instanceof Array) {\n          arr.add(this.parseJsonArray(obj[key]));\n        } else if (obj[key] instanceof Object) {\n          arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n        } else if (obj[key] == null) {\n          arr.add(new JsonNullvalue());\n        } else {\n          // どれにも当てはまらない場合でも処理する\n          arr.add(obj[key]);\n        }\n      } else if (obj[key] instanceof Array) {\n        arr.add(this.parseJsonArray(obj[key]));\n      } else if (obj[key] instanceof Object) {\n        arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n      } else if (obj[key] == null) {\n        arr.add(new JsonNullvalue());\n      } else {\n        const convValue = Array(obj[key]);\n        // 配列ともObjectとも判定できなかった場合でも処理する\n        for (let i = 0; i < convValue.length; i++) {\n          arr.add(convValue[i]);\n        }\n      }\n    });\n    return arr;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}