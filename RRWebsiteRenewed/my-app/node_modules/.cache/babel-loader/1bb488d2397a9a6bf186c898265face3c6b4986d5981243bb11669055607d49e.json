{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 文字列クラス。\n */\nexport class csmString {\n  /**\n   * 文字列を後方に追加する\n   *\n   * @param c 追加する文字列\n   * @return 更新された文字列\n   */\n  append(c, length) {\n    this.s += length !== undefined ? c.substr(0, length) : c;\n    return this;\n  }\n\n  /**\n   * 文字サイズを拡張して文字を埋める\n   * @param length    拡張する文字数\n   * @param v         埋める文字\n   * @return 更新された文字列\n   */\n  expansion(length, v) {\n    for (let i = 0; i < length; i++) {\n      this.append(v);\n    }\n    return this;\n  }\n\n  /**\n   * 文字列の長さをバイト数で取得する\n   */\n  getBytes() {\n    return encodeURIComponent(this.s).replace(/%../g, 'x').length;\n  }\n\n  /**\n   * 文字列の長さを返す\n   */\n  getLength() {\n    return this.s.length;\n  }\n\n  /**\n   * 文字列比較 <\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より小さい\n   * @return false:   比較する文字列より大きい\n   */\n  isLess(s) {\n    return this.s < s.s;\n  }\n\n  /**\n   * 文字列比較 >\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より大きい\n   * @return false:   比較する文字列より小さい\n   */\n  isGreat(s) {\n    return this.s > s.s;\n  }\n\n  /**\n   * 文字列比較 ==\n   * @param s 比較する文字列\n   * @return true:    比較する文字列と等しい\n   * @return false:   比較する文字列と異なる\n   */\n  isEqual(s) {\n    return this.s == s;\n  }\n\n  /**\n   * 文字列が空かどうか\n   * @return true: 空の文字列\n   * @return false: 値が設定されている\n   */\n  isEmpty() {\n    return this.s.length == 0;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  constructor(s) {\n    this.s = void 0;\n    this.s = s;\n  }\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmstring';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const csmString = _Live2DCubismFramework.csmString = $.csmString;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["csmString","append","c","length","s","undefined","substr","expansion","v","i","getBytes","encodeURIComponent","replace","getLength","isLess","isGreat","isEqual","isEmpty","constructor","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/js/Framework/src/type/csmstring.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 文字列クラス。\n */\nexport class csmString {\n  /**\n   * 文字列を後方に追加する\n   *\n   * @param c 追加する文字列\n   * @return 更新された文字列\n   */\n  public append(c: string, length?: number): csmString {\n    this.s += length !== undefined ? c.substr(0, length) : c;\n\n    return this;\n  }\n\n  /**\n   * 文字サイズを拡張して文字を埋める\n   * @param length    拡張する文字数\n   * @param v         埋める文字\n   * @return 更新された文字列\n   */\n  public expansion(length: number, v: string): csmString {\n    for (let i = 0; i < length; i++) {\n      this.append(v);\n    }\n\n    return this;\n  }\n\n  /**\n   * 文字列の長さをバイト数で取得する\n   */\n  public getBytes(): number {\n    return encodeURIComponent(this.s).replace(/%../g, 'x').length;\n  }\n\n  /**\n   * 文字列の長さを返す\n   */\n  public getLength(): number {\n    return this.s.length;\n  }\n\n  /**\n   * 文字列比較 <\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より小さい\n   * @return false:   比較する文字列より大きい\n   */\n  public isLess(s: csmString): boolean {\n    return this.s < s.s;\n  }\n\n  /**\n   * 文字列比較 >\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より大きい\n   * @return false:   比較する文字列より小さい\n   */\n  public isGreat(s: csmString): boolean {\n    return this.s > s.s;\n  }\n\n  /**\n   * 文字列比較 ==\n   * @param s 比較する文字列\n   * @return true:    比較する文字列と等しい\n   * @return false:   比較する文字列と異なる\n   */\n  public isEqual(s: string): boolean {\n    return this.s == s;\n  }\n\n  /**\n   * 文字列が空かどうか\n   * @return true: 空の文字列\n   * @return false: 値が設定されている\n   */\n  public isEmpty(): boolean {\n    return this.s.length == 0;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: string) {\n    this.s = s;\n  }\n\n  s: string;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmstring';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmString = $.csmString;\n  export type csmString = $.csmString;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,SAAS,CAAC;EACrB;AACF;AACA;AACA;AACA;AACA;EACSC,MAAMA,CAACC,CAAS,EAAEC,MAAe,EAAa;IACnD,IAAI,CAACC,CAAC,IAAID,MAAM,KAAKE,SAAS,GAAGH,CAAC,CAACI,MAAM,CAAC,CAAC,EAAEH,MAAM,CAAC,GAAGD,CAAC;IAExD,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACSK,SAASA,CAACJ,MAAc,EAAEK,CAAS,EAAa;IACrD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;MAC/B,IAAI,CAACR,MAAM,CAACO,CAAC,CAAC;IAChB;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACSE,QAAQA,CAAA,EAAW;IACxB,OAAOC,kBAAkB,CAAC,IAAI,CAACP,CAAC,CAAC,CAACQ,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACT,MAAM;EAC/D;;EAEA;AACF;AACA;EACSU,SAASA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACT,CAAC,CAACD,MAAM;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACSW,MAAMA,CAACV,CAAY,EAAW;IACnC,OAAO,IAAI,CAACA,CAAC,GAAGA,CAAC,CAACA,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACSW,OAAOA,CAACX,CAAY,EAAW;IACpC,OAAO,IAAI,CAACA,CAAC,GAAGA,CAAC,CAACA,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACSY,OAAOA,CAACZ,CAAS,EAAW;IACjC,OAAO,IAAI,CAACA,CAAC,IAAIA,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACSa,OAAOA,CAAA,EAAY;IACxB,OAAO,IAAI,CAACb,CAAC,CAACD,MAAM,IAAI,CAAC;EAC3B;;EAEA;AACF;AACA;EACSe,WAAWA,CAACd,CAAS,EAAE;IAAA,KAI9BA,CAAC;IAHC,IAAI,CAACA,CAAC,GAAGA,CAAC;EACZ;AAGF;;AAEA;AACA,OAAO,KAAKe,CAAC,MAAM,aAAa;AAChC;AACA,WAAAC,qBAAA;AAGC,WAAAC,sBAAA;EAFQ,MAAMrB,SAAS,GAAAqB,sBAAA,CAAArB,SAAA,GAAGmB,CAAC,CAACnB,SAAS;AAAC,GADtBoB,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}