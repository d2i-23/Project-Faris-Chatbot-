{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmVector } from '../type/csmvector';\nimport { CubismJson } from '../utils/cubismjson';\nconst Epsilon = 0.001;\nconst DefaultFadeInSeconds = 0.5;\n\n// Pose.jsonのタグ\nconst FadeIn = 'FadeInTime';\nconst Link = 'Link';\nconst Groups = 'Groups';\nconst Id = 'Id';\n\n/**\n * パーツの不透明度の設定\n *\n * パーツの不透明度の管理と設定を行う。\n */\nexport class CubismPose {\n  /**\n   * インスタンスの作成\n   * @param pose3json pose3.jsonのデータ\n   * @param size pose3.jsonのデータのサイズ[byte]\n   * @return 作成されたインスタンス\n   */\n  static create(pose3json, size) {\n    const ret = new CubismPose();\n    const json = CubismJson.create(pose3json, size);\n    const root = json.getRoot();\n\n    // フェード時間の指定\n    if (!root.getValueByString(FadeIn).isNull()) {\n      ret._fadeTimeSeconds = root.getValueByString(FadeIn).toFloat(DefaultFadeInSeconds);\n      if (ret._fadeTimeSeconds <= 0.0) {\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\n      }\n    }\n\n    // パーツグループ\n    const poseListInfo = root.getValueByString(Groups);\n    const poseCount = poseListInfo.getSize();\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n      const idListInfo = poseListInfo.getValueByIndex(poseIndex);\n      const idCount = idListInfo.getSize();\n      let groupCount = 0;\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n        const partInfo = idListInfo.getValueByIndex(groupIndex);\n        const partData = new PartData();\n        const parameterId = CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());\n        partData.partId = parameterId;\n\n        // リンクするパーツの設定\n        if (!partInfo.getValueByString(Link).isNull()) {\n          const linkListInfo = partInfo.getValueByString(Link);\n          const linkCount = linkListInfo.getSize();\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n            const linkPart = new PartData();\n            const linkId = CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());\n            linkPart.partId = linkId;\n            partData.link.pushBack(linkPart);\n          }\n        }\n        ret._partGroups.pushBack(partData.clone());\n        ++groupCount;\n      }\n      ret._partGroupCounts.pushBack(groupCount);\n    }\n    CubismJson.delete(json);\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   * @param pose 対象のCubismPose\n   */\n  static delete(pose) {\n    if (pose != null) {\n      pose = null;\n    }\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  updateParameters(model, deltaTimeSeconds) {\n    // 前回のモデルと同じでない場合は初期化が必要\n    if (model != this._lastModel) {\n      // パラメータインデックスの初期化\n      this.reset(model);\n    }\n    this._lastModel = model;\n\n    // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\n    if (deltaTimeSeconds < 0.0) {\n      deltaTimeSeconds = 0.0;\n    }\n    let beginIndex = 0;\n    for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\n      const partGroupCount = this._partGroupCounts.at(i);\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n      beginIndex += partGroupCount;\n    }\n    this.copyPartOpacities(model);\n  }\n\n  /**\n   * 表示を初期化\n   * @param model 対象のモデル\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\n   */\n  reset(model) {\n    let beginIndex = 0;\n    for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\n      const groupCount = this._partGroupCounts.at(i);\n      for (let j = beginIndex; j < beginIndex + groupCount; ++j) {\n        this._partGroups.at(j).initialize(model);\n        const partsIndex = this._partGroups.at(j).partIndex;\n        const paramIndex = this._partGroups.at(j).parameterIndex;\n        if (partsIndex < 0) {\n          continue;\n        }\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\n        for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\n          this._partGroups.at(j).link.at(k).initialize(model);\n        }\n      }\n      beginIndex += groupCount;\n    }\n  }\n\n  /**\n   * パーツの不透明度をコピー\n   *\n   * @param model 対象のモデル\n   */\n  copyPartOpacities(model) {\n    for (let groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {\n      const partData = this._partGroups.at(groupIndex);\n      if (partData.link.getSize() == 0) {\n        continue; // 連動するパラメータはない\n      }\n\n      const partIndex = this._partGroups.at(groupIndex).partIndex;\n      const opacity = model.getPartOpacityByIndex(partIndex);\n      for (let linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {\n        const linkPart = partData.link.at(linkIndex);\n        const linkPartIndex = linkPart.partIndex;\n        if (linkPartIndex < 0) {\n          continue;\n        }\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * パーツのフェード操作を行う。\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\n   * @param partGroupCount フェード操作を行うパーツグループの個数\n   */\n  doFade(model, deltaTimeSeconds, beginIndex, partGroupCount) {\n    let visiblePartIndex = -1;\n    let newOpacity = 1.0;\n    const phi = 0.5;\n    const backOpacityThreshold = 0.15;\n\n    // 現在、表示状態になっているパーツを取得\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partIndex = this._partGroups.at(i).partIndex;\n      const paramIndex = this._partGroups.at(i).parameterIndex;\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n        if (visiblePartIndex >= 0) {\n          break;\n        }\n        visiblePartIndex = i;\n        newOpacity = model.getPartOpacityByIndex(partIndex);\n\n        // 新しい不透明度を計算\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n        if (newOpacity > 1.0) {\n          newOpacity = 1.0;\n        }\n      }\n    }\n    if (visiblePartIndex < 0) {\n      visiblePartIndex = 0;\n      newOpacity = 1.0;\n    }\n\n    // 表示パーツ、非表示パーツの不透明度を設定する\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partsIndex = this._partGroups.at(i).partIndex;\n\n      // 表示パーツの設定\n      if (visiblePartIndex == i) {\n        model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\n      }\n      // 非表示パーツの設定\n      else {\n        let opacity = model.getPartOpacityByIndex(partsIndex);\n        let a1; // 計算によって求められる不透明度\n\n        if (newOpacity < phi) {\n          a1 = newOpacity * (phi - 1) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\n        } else {\n          a1 = (1 - newOpacity) * phi / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\n        }\n\n        // 背景の見える割合を制限する場合\n        const backOpacity = (1.0 - a1) * (1.0 - newOpacity);\n        if (backOpacity > backOpacityThreshold) {\n          a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\n        }\n        if (opacity > a1) {\n          opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\n        }\n\n        model.setPartOpacityByIndex(partsIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._partGroups = void 0;\n    // パーツグループ\n    this._partGroupCounts = void 0;\n    // それぞれのパーツグループの個数\n    this._fadeTimeSeconds = void 0;\n    // フェード時間[秒]\n    this._lastModel = void 0;\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\n    this._lastModel = null;\n    this._partGroups = new csmVector();\n    this._partGroupCounts = new csmVector();\n  }\n\n  // 前回操作したモデル\n}\n\n/**\n * パーツにまつわるデータを管理\n */\nexport class PartData {\n  /**\n   * コンストラクタ\n   */\n  constructor(v) {\n    this.partId = void 0;\n    // パーツID\n    this.parameterIndex = void 0;\n    // パラメータのインデックス\n    this.partIndex = void 0;\n    // パーツのインデックス\n    this.link = void 0;\n    this.parameterIndex = 0;\n    this.partIndex = 0;\n    this.link = new csmVector();\n    if (v != undefined) {\n      this.partId = v.partId;\n      for (const ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\n        this.link.pushBack(ite.ptr().clone());\n      }\n    }\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  assignment(v) {\n    this.partId = v.partId;\n    for (const ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\n      this.link.pushBack(ite.ptr().clone());\n    }\n    return this;\n  }\n\n  /**\n   * 初期化\n   * @param model 初期化に使用するモデル\n   */\n  initialize(model) {\n    this.parameterIndex = model.getParameterIndex(this.partId);\n    this.partIndex = model.getPartIndex(this.partId);\n    model.setParameterValueByIndex(this.parameterIndex, 1);\n  }\n\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  clone() {\n    const clonePartData = new PartData();\n    clonePartData.partId = this.partId;\n    clonePartData.parameterIndex = this.parameterIndex;\n    clonePartData.partIndex = this.partIndex;\n    clonePartData.link = new csmVector();\n    for (let ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {\n      clonePartData.link.pushBack(ite.ptr().clone());\n    }\n    return clonePartData;\n  }\n\n  // 連動するパラメータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismpose';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismPose = _Live2DCubismFramework.CubismPose = $.CubismPose;\n  const PartData = _Live2DCubismFramework.PartData = $.PartData;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismFramework","csmVector","CubismJson","Epsilon","DefaultFadeInSeconds","FadeIn","Link","Groups","Id","CubismPose","create","pose3json","size","ret","json","root","getRoot","getValueByString","isNull","_fadeTimeSeconds","toFloat","poseListInfo","poseCount","getSize","poseIndex","idListInfo","getValueByIndex","idCount","groupCount","groupIndex","partInfo","partData","PartData","parameterId","getIdManager","getId","getRawString","partId","linkListInfo","linkCount","linkIndex","linkPart","linkId","getString","link","pushBack","_partGroups","clone","_partGroupCounts","delete","pose","updateParameters","model","deltaTimeSeconds","_lastModel","reset","beginIndex","i","partGroupCount","at","doFade","copyPartOpacities","j","initialize","partsIndex","partIndex","paramIndex","parameterIndex","setPartOpacityByIndex","setParameterValueByIndex","k","opacity","getPartOpacityByIndex","linkPartIndex","visiblePartIndex","newOpacity","phi","backOpacityThreshold","getParameterValueByIndex","a1","backOpacity","constructor","v","undefined","ite","begin","notEqual","end","preIncrement","ptr","assignment","getParameterIndex","getPartIndex","clonePartData","increment","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/effect/cubismpose.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { CubismJson, Value } from '../utils/cubismjson';\n\nconst Epsilon = 0.001;\nconst DefaultFadeInSeconds = 0.5;\n\n// Pose.jsonのタグ\nconst FadeIn = 'FadeInTime';\nconst Link = 'Link';\nconst Groups = 'Groups';\nconst Id = 'Id';\n\n/**\n * パーツの不透明度の設定\n *\n * パーツの不透明度の管理と設定を行う。\n */\nexport class CubismPose {\n  /**\n   * インスタンスの作成\n   * @param pose3json pose3.jsonのデータ\n   * @param size pose3.jsonのデータのサイズ[byte]\n   * @return 作成されたインスタンス\n   */\n  public static create(pose3json: ArrayBuffer, size: number): CubismPose {\n    const ret: CubismPose = new CubismPose();\n    const json: CubismJson = CubismJson.create(pose3json, size);\n    const root: Value = json.getRoot();\n\n    // フェード時間の指定\n    if (!root.getValueByString(FadeIn).isNull()) {\n      ret._fadeTimeSeconds = root\n        .getValueByString(FadeIn)\n        .toFloat(DefaultFadeInSeconds);\n\n      if (ret._fadeTimeSeconds <= 0.0) {\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\n      }\n    }\n\n    // パーツグループ\n    const poseListInfo: Value = root.getValueByString(Groups);\n    const poseCount: number = poseListInfo.getSize();\n\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n      const idListInfo: Value = poseListInfo.getValueByIndex(poseIndex);\n      const idCount: number = idListInfo.getSize();\n      let groupCount = 0;\n\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n        const partInfo: Value = idListInfo.getValueByIndex(groupIndex);\n        const partData: PartData = new PartData();\n        const parameterId: CubismIdHandle =\n          CubismFramework.getIdManager().getId(\n            partInfo.getValueByString(Id).getRawString()\n          );\n\n        partData.partId = parameterId;\n\n        // リンクするパーツの設定\n        if (!partInfo.getValueByString(Link).isNull()) {\n          const linkListInfo: Value = partInfo.getValueByString(Link);\n          const linkCount: number = linkListInfo.getSize();\n\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n            const linkPart: PartData = new PartData();\n            const linkId: CubismIdHandle = CubismFramework.getIdManager().getId(\n              linkListInfo.getValueByIndex(linkIndex).getString()\n            );\n\n            linkPart.partId = linkId;\n\n            partData.link.pushBack(linkPart);\n          }\n        }\n\n        ret._partGroups.pushBack(partData.clone());\n\n        ++groupCount;\n      }\n\n      ret._partGroupCounts.pushBack(groupCount);\n    }\n\n    CubismJson.delete(json);\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   * @param pose 対象のCubismPose\n   */\n  public static delete(pose: CubismPose): void {\n    if (pose != null) {\n      pose = null;\n    }\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    // 前回のモデルと同じでない場合は初期化が必要\n    if (model != this._lastModel) {\n      // パラメータインデックスの初期化\n      this.reset(model);\n    }\n\n    this._lastModel = model;\n\n    // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\n    if (deltaTimeSeconds < 0.0) {\n      deltaTimeSeconds = 0.0;\n    }\n\n    let beginIndex = 0;\n\n    for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\n      const partGroupCount: number = this._partGroupCounts.at(i);\n\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n\n      beginIndex += partGroupCount;\n    }\n\n    this.copyPartOpacities(model);\n  }\n\n  /**\n   * 表示を初期化\n   * @param model 対象のモデル\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\n   */\n  public reset(model: CubismModel): void {\n    let beginIndex = 0;\n\n    for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\n      const groupCount: number = this._partGroupCounts.at(i);\n\n      for (let j: number = beginIndex; j < beginIndex + groupCount; ++j) {\n        this._partGroups.at(j).initialize(model);\n\n        const partsIndex: number = this._partGroups.at(j).partIndex;\n        const paramIndex: number = this._partGroups.at(j).parameterIndex;\n\n        if (partsIndex < 0) {\n          continue;\n        }\n\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\n\n        for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\n          this._partGroups.at(j).link.at(k).initialize(model);\n        }\n      }\n\n      beginIndex += groupCount;\n    }\n  }\n\n  /**\n   * パーツの不透明度をコピー\n   *\n   * @param model 対象のモデル\n   */\n  public copyPartOpacities(model: CubismModel): void {\n    for (\n      let groupIndex = 0;\n      groupIndex < this._partGroups.getSize();\n      ++groupIndex\n    ) {\n      const partData: PartData = this._partGroups.at(groupIndex);\n\n      if (partData.link.getSize() == 0) {\n        continue; // 連動するパラメータはない\n      }\n\n      const partIndex: number = this._partGroups.at(groupIndex).partIndex;\n      const opacity: number = model.getPartOpacityByIndex(partIndex);\n\n      for (\n        let linkIndex = 0;\n        linkIndex < partData.link.getSize();\n        ++linkIndex\n      ) {\n        const linkPart: PartData = partData.link.at(linkIndex);\n        const linkPartIndex: number = linkPart.partIndex;\n\n        if (linkPartIndex < 0) {\n          continue;\n        }\n\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * パーツのフェード操作を行う。\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\n   * @param partGroupCount フェード操作を行うパーツグループの個数\n   */\n  public doFade(\n    model: CubismModel,\n    deltaTimeSeconds: number,\n    beginIndex: number,\n    partGroupCount: number\n  ): void {\n    let visiblePartIndex = -1;\n    let newOpacity = 1.0;\n\n    const phi = 0.5;\n    const backOpacityThreshold = 0.15;\n\n    // 現在、表示状態になっているパーツを取得\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partIndex: number = this._partGroups.at(i).partIndex;\n      const paramIndex: number = this._partGroups.at(i).parameterIndex;\n\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n        if (visiblePartIndex >= 0) {\n          break;\n        }\n\n        visiblePartIndex = i;\n        newOpacity = model.getPartOpacityByIndex(partIndex);\n\n        // 新しい不透明度を計算\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n\n        if (newOpacity > 1.0) {\n          newOpacity = 1.0;\n        }\n      }\n    }\n\n    if (visiblePartIndex < 0) {\n      visiblePartIndex = 0;\n      newOpacity = 1.0;\n    }\n\n    // 表示パーツ、非表示パーツの不透明度を設定する\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partsIndex: number = this._partGroups.at(i).partIndex;\n\n      // 表示パーツの設定\n      if (visiblePartIndex == i) {\n        model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\n      }\n      // 非表示パーツの設定\n      else {\n        let opacity: number = model.getPartOpacityByIndex(partsIndex);\n        let a1: number; // 計算によって求められる不透明度\n\n        if (newOpacity < phi) {\n          a1 = (newOpacity * (phi - 1)) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\n        } else {\n          a1 = ((1 - newOpacity) * phi) / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\n        }\n\n        // 背景の見える割合を制限する場合\n        const backOpacity: number = (1.0 - a1) * (1.0 - newOpacity);\n\n        if (backOpacity > backOpacityThreshold) {\n          a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\n        }\n\n        if (opacity > a1) {\n          opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\n        }\n\n        model.setPartOpacityByIndex(partsIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\n    this._lastModel = null;\n    this._partGroups = new csmVector<PartData>();\n    this._partGroupCounts = new csmVector<number>();\n  }\n\n  _partGroups: csmVector<PartData>; // パーツグループ\n  _partGroupCounts: csmVector<number>; // それぞれのパーツグループの個数\n  _fadeTimeSeconds: number; // フェード時間[秒]\n  _lastModel: CubismModel; // 前回操作したモデル\n}\n\n/**\n * パーツにまつわるデータを管理\n */\nexport class PartData {\n  /**\n   * コンストラクタ\n   */\n  constructor(v?: PartData) {\n    this.parameterIndex = 0;\n    this.partIndex = 0;\n    this.link = new csmVector<PartData>();\n\n    if (v != undefined) {\n      this.partId = v.partId;\n\n      for (\n        const ite: iterator<PartData> = v.link.begin();\n        ite.notEqual(v.link.end());\n        ite.preIncrement()\n      ) {\n        this.link.pushBack(ite.ptr().clone());\n      }\n    }\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public assignment(v: PartData): PartData {\n    this.partId = v.partId;\n\n    for (\n      const ite: iterator<PartData> = v.link.begin();\n      ite.notEqual(v.link.end());\n      ite.preIncrement()\n    ) {\n      this.link.pushBack(ite.ptr().clone());\n    }\n\n    return this;\n  }\n\n  /**\n   * 初期化\n   * @param model 初期化に使用するモデル\n   */\n  public initialize(model: CubismModel): void {\n    this.parameterIndex = model.getParameterIndex(this.partId);\n    this.partIndex = model.getPartIndex(this.partId);\n\n    model.setParameterValueByIndex(this.parameterIndex, 1);\n  }\n\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  public clone(): PartData {\n    const clonePartData: PartData = new PartData();\n\n    clonePartData.partId = this.partId;\n    clonePartData.parameterIndex = this.parameterIndex;\n    clonePartData.partIndex = this.partIndex;\n    clonePartData.link = new csmVector<PartData>();\n\n    for (\n      let ite: iterator<PartData> = this.link.begin();\n      ite.notEqual(this.link.end());\n      ite.increment()\n    ) {\n      clonePartData.link.pushBack(ite.ptr().clone());\n    }\n\n    return clonePartData;\n  }\n\n  partId: CubismIdHandle; // パーツID\n  parameterIndex: number; // パラメータのインデックス\n  partIndex: number; // パーツのインデックス\n  link: csmVector<PartData>; // 連動するパラメータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismpose';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPose = $.CubismPose;\n  export type CubismPose = $.CubismPose;\n  export const PartData = $.PartData;\n  export type PartData = $.PartData;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,eAAe,QAAQ,0BAA0B;AAE1D,SAASC,SAAS,QAAkB,mBAAmB;AACvD,SAASC,UAAU,QAAe,qBAAqB;AAEvD,MAAMC,OAAO,GAAG,KAAK;AACrB,MAAMC,oBAAoB,GAAG,GAAG;;AAEhC;AACA,MAAMC,MAAM,GAAG,YAAY;AAC3B,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,MAAM,GAAG,QAAQ;AACvB,MAAMC,EAAE,GAAG,IAAI;;AAEf;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,CAAC;EACtB;AACF;AACA;AACA;AACA;AACA;EACE,OAAcC,MAAMA,CAACC,SAAsB,EAAEC,IAAY,EAAc;IACrE,MAAMC,GAAe,GAAG,IAAIJ,UAAU,CAAC,CAAC;IACxC,MAAMK,IAAgB,GAAGZ,UAAU,CAACQ,MAAM,CAACC,SAAS,EAAEC,IAAI,CAAC;IAC3D,MAAMG,IAAW,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC;;IAElC;IACA,IAAI,CAACD,IAAI,CAACE,gBAAgB,CAACZ,MAAM,CAAC,CAACa,MAAM,CAAC,CAAC,EAAE;MAC3CL,GAAG,CAACM,gBAAgB,GAAGJ,IAAI,CACxBE,gBAAgB,CAACZ,MAAM,CAAC,CACxBe,OAAO,CAAChB,oBAAoB,CAAC;MAEhC,IAAIS,GAAG,CAACM,gBAAgB,IAAI,GAAG,EAAE;QAC/BN,GAAG,CAACM,gBAAgB,GAAGf,oBAAoB;MAC7C;IACF;;IAEA;IACA,MAAMiB,YAAmB,GAAGN,IAAI,CAACE,gBAAgB,CAACV,MAAM,CAAC;IACzD,MAAMe,SAAiB,GAAGD,YAAY,CAACE,OAAO,CAAC,CAAC;IAEhD,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGF,SAAS,EAAE,EAAEE,SAAS,EAAE;MAC1D,MAAMC,UAAiB,GAAGJ,YAAY,CAACK,eAAe,CAACF,SAAS,CAAC;MACjE,MAAMG,OAAe,GAAGF,UAAU,CAACF,OAAO,CAAC,CAAC;MAC5C,IAAIK,UAAU,GAAG,CAAC;MAElB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGF,OAAO,EAAE,EAAEE,UAAU,EAAE;QAC3D,MAAMC,QAAe,GAAGL,UAAU,CAACC,eAAe,CAACG,UAAU,CAAC;QAC9D,MAAME,QAAkB,GAAG,IAAIC,QAAQ,CAAC,CAAC;QACzC,MAAMC,WAA2B,GAC/BjC,eAAe,CAACkC,YAAY,CAAC,CAAC,CAACC,KAAK,CAClCL,QAAQ,CAACb,gBAAgB,CAACT,EAAE,CAAC,CAAC4B,YAAY,CAAC,CAC7C,CAAC;QAEHL,QAAQ,CAACM,MAAM,GAAGJ,WAAW;;QAE7B;QACA,IAAI,CAACH,QAAQ,CAACb,gBAAgB,CAACX,IAAI,CAAC,CAACY,MAAM,CAAC,CAAC,EAAE;UAC7C,MAAMoB,YAAmB,GAAGR,QAAQ,CAACb,gBAAgB,CAACX,IAAI,CAAC;UAC3D,MAAMiC,SAAiB,GAAGD,YAAY,CAACf,OAAO,CAAC,CAAC;UAEhD,KAAK,IAAIiB,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGD,SAAS,EAAE,EAAEC,SAAS,EAAE;YAC1D,MAAMC,QAAkB,GAAG,IAAIT,QAAQ,CAAC,CAAC;YACzC,MAAMU,MAAsB,GAAG1C,eAAe,CAACkC,YAAY,CAAC,CAAC,CAACC,KAAK,CACjEG,YAAY,CAACZ,eAAe,CAACc,SAAS,CAAC,CAACG,SAAS,CAAC,CACpD,CAAC;YAEDF,QAAQ,CAACJ,MAAM,GAAGK,MAAM;YAExBX,QAAQ,CAACa,IAAI,CAACC,QAAQ,CAACJ,QAAQ,CAAC;UAClC;QACF;QAEA5B,GAAG,CAACiC,WAAW,CAACD,QAAQ,CAACd,QAAQ,CAACgB,KAAK,CAAC,CAAC,CAAC;QAE1C,EAAEnB,UAAU;MACd;MAEAf,GAAG,CAACmC,gBAAgB,CAACH,QAAQ,CAACjB,UAAU,CAAC;IAC3C;IAEA1B,UAAU,CAAC+C,MAAM,CAACnC,IAAI,CAAC;IAEvB,OAAOD,GAAG;EACZ;;EAEA;AACF;AACA;AACA;EACE,OAAcoC,MAAMA,CAACC,IAAgB,EAAQ;IAC3C,IAAIA,IAAI,IAAI,IAAI,EAAE;MAChBA,IAAI,GAAG,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACSC,gBAAgBA,CAACC,KAAkB,EAAEC,gBAAwB,EAAQ;IAC1E;IACA,IAAID,KAAK,IAAI,IAAI,CAACE,UAAU,EAAE;MAC5B;MACA,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC;IACnB;IAEA,IAAI,CAACE,UAAU,GAAGF,KAAK;;IAEvB;IACA,IAAIC,gBAAgB,GAAG,GAAG,EAAE;MAC1BA,gBAAgB,GAAG,GAAG;IACxB;IAEA,IAAIG,UAAU,GAAG,CAAC;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,gBAAgB,CAACzB,OAAO,CAAC,CAAC,EAAEkC,CAAC,EAAE,EAAE;MACxD,MAAMC,cAAsB,GAAG,IAAI,CAACV,gBAAgB,CAACW,EAAE,CAACF,CAAC,CAAC;MAE1D,IAAI,CAACG,MAAM,CAACR,KAAK,EAAEC,gBAAgB,EAAEG,UAAU,EAAEE,cAAc,CAAC;MAEhEF,UAAU,IAAIE,cAAc;IAC9B;IAEA,IAAI,CAACG,iBAAiB,CAACT,KAAK,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;EACSG,KAAKA,CAACH,KAAkB,EAAQ;IACrC,IAAII,UAAU,GAAG,CAAC;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,gBAAgB,CAACzB,OAAO,CAAC,CAAC,EAAE,EAAEkC,CAAC,EAAE;MACxD,MAAM7B,UAAkB,GAAG,IAAI,CAACoB,gBAAgB,CAACW,EAAE,CAACF,CAAC,CAAC;MAEtD,KAAK,IAAIK,CAAS,GAAGN,UAAU,EAAEM,CAAC,GAAGN,UAAU,GAAG5B,UAAU,EAAE,EAAEkC,CAAC,EAAE;QACjE,IAAI,CAAChB,WAAW,CAACa,EAAE,CAACG,CAAC,CAAC,CAACC,UAAU,CAACX,KAAK,CAAC;QAExC,MAAMY,UAAkB,GAAG,IAAI,CAAClB,WAAW,CAACa,EAAE,CAACG,CAAC,CAAC,CAACG,SAAS;QAC3D,MAAMC,UAAkB,GAAG,IAAI,CAACpB,WAAW,CAACa,EAAE,CAACG,CAAC,CAAC,CAACK,cAAc;QAEhE,IAAIH,UAAU,GAAG,CAAC,EAAE;UAClB;QACF;QAEAZ,KAAK,CAACgB,qBAAqB,CAACJ,UAAU,EAAEF,CAAC,IAAIN,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC;QACpEJ,KAAK,CAACiB,wBAAwB,CAACH,UAAU,EAAEJ,CAAC,IAAIN,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC;QAEvE,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACxB,WAAW,CAACa,EAAE,CAACG,CAAC,CAAC,CAAClB,IAAI,CAACrB,OAAO,CAAC,CAAC,EAAE,EAAE+C,CAAC,EAAE;UAC9D,IAAI,CAACxB,WAAW,CAACa,EAAE,CAACG,CAAC,CAAC,CAAClB,IAAI,CAACe,EAAE,CAACW,CAAC,CAAC,CAACP,UAAU,CAACX,KAAK,CAAC;QACrD;MACF;MAEAI,UAAU,IAAI5B,UAAU;IAC1B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACSiC,iBAAiBA,CAACT,KAAkB,EAAQ;IACjD,KACE,IAAIvB,UAAU,GAAG,CAAC,EAClBA,UAAU,GAAG,IAAI,CAACiB,WAAW,CAACvB,OAAO,CAAC,CAAC,EACvC,EAAEM,UAAU,EACZ;MACA,MAAME,QAAkB,GAAG,IAAI,CAACe,WAAW,CAACa,EAAE,CAAC9B,UAAU,CAAC;MAE1D,IAAIE,QAAQ,CAACa,IAAI,CAACrB,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE;QAChC,SAAS,CAAC;MACZ;;MAEA,MAAM0C,SAAiB,GAAG,IAAI,CAACnB,WAAW,CAACa,EAAE,CAAC9B,UAAU,CAAC,CAACoC,SAAS;MACnE,MAAMM,OAAe,GAAGnB,KAAK,CAACoB,qBAAqB,CAACP,SAAS,CAAC;MAE9D,KACE,IAAIzB,SAAS,GAAG,CAAC,EACjBA,SAAS,GAAGT,QAAQ,CAACa,IAAI,CAACrB,OAAO,CAAC,CAAC,EACnC,EAAEiB,SAAS,EACX;QACA,MAAMC,QAAkB,GAAGV,QAAQ,CAACa,IAAI,CAACe,EAAE,CAACnB,SAAS,CAAC;QACtD,MAAMiC,aAAqB,GAAGhC,QAAQ,CAACwB,SAAS;QAEhD,IAAIQ,aAAa,GAAG,CAAC,EAAE;UACrB;QACF;QAEArB,KAAK,CAACgB,qBAAqB,CAACK,aAAa,EAAEF,OAAO,CAAC;MACrD;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACSX,MAAMA,CACXR,KAAkB,EAClBC,gBAAwB,EACxBG,UAAkB,EAClBE,cAAsB,EAChB;IACN,IAAIgB,gBAAgB,GAAG,CAAC,CAAC;IACzB,IAAIC,UAAU,GAAG,GAAG;IAEpB,MAAMC,GAAG,GAAG,GAAG;IACf,MAAMC,oBAAoB,GAAG,IAAI;;IAEjC;IACA,KAAK,IAAIpB,CAAS,GAAGD,UAAU,EAAEC,CAAC,GAAGD,UAAU,GAAGE,cAAc,EAAE,EAAED,CAAC,EAAE;MACrE,MAAMQ,SAAiB,GAAG,IAAI,CAACnB,WAAW,CAACa,EAAE,CAACF,CAAC,CAAC,CAACQ,SAAS;MAC1D,MAAMC,UAAkB,GAAG,IAAI,CAACpB,WAAW,CAACa,EAAE,CAACF,CAAC,CAAC,CAACU,cAAc;MAEhE,IAAIf,KAAK,CAAC0B,wBAAwB,CAACZ,UAAU,CAAC,GAAG/D,OAAO,EAAE;QACxD,IAAIuE,gBAAgB,IAAI,CAAC,EAAE;UACzB;QACF;QAEAA,gBAAgB,GAAGjB,CAAC;QACpBkB,UAAU,GAAGvB,KAAK,CAACoB,qBAAqB,CAACP,SAAS,CAAC;;QAEnD;QACAU,UAAU,IAAItB,gBAAgB,GAAG,IAAI,CAAClC,gBAAgB;QAEtD,IAAIwD,UAAU,GAAG,GAAG,EAAE;UACpBA,UAAU,GAAG,GAAG;QAClB;MACF;IACF;IAEA,IAAID,gBAAgB,GAAG,CAAC,EAAE;MACxBA,gBAAgB,GAAG,CAAC;MACpBC,UAAU,GAAG,GAAG;IAClB;;IAEA;IACA,KAAK,IAAIlB,CAAS,GAAGD,UAAU,EAAEC,CAAC,GAAGD,UAAU,GAAGE,cAAc,EAAE,EAAED,CAAC,EAAE;MACrE,MAAMO,UAAkB,GAAG,IAAI,CAAClB,WAAW,CAACa,EAAE,CAACF,CAAC,CAAC,CAACQ,SAAS;;MAE3D;MACA,IAAIS,gBAAgB,IAAIjB,CAAC,EAAE;QACzBL,KAAK,CAACgB,qBAAqB,CAACJ,UAAU,EAAEW,UAAU,CAAC,CAAC,CAAC;MACvD;MACA;MAAA,KACK;QACH,IAAIJ,OAAe,GAAGnB,KAAK,CAACoB,qBAAqB,CAACR,UAAU,CAAC;QAC7D,IAAIe,EAAU,CAAC,CAAC;;QAEhB,IAAIJ,UAAU,GAAGC,GAAG,EAAE;UACpBG,EAAE,GAAIJ,UAAU,IAAIC,GAAG,GAAG,CAAC,CAAC,GAAIA,GAAG,GAAG,GAAG,CAAC,CAAC;QAC7C,CAAC,MAAM;UACLG,EAAE,GAAI,CAAC,CAAC,GAAGJ,UAAU,IAAIC,GAAG,IAAK,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC;QAC/C;;QAEA;QACA,MAAMI,WAAmB,GAAG,CAAC,GAAG,GAAGD,EAAE,KAAK,GAAG,GAAGJ,UAAU,CAAC;QAE3D,IAAIK,WAAW,GAAGH,oBAAoB,EAAE;UACtCE,EAAE,GAAG,GAAG,GAAGF,oBAAoB,IAAI,GAAG,GAAGF,UAAU,CAAC;QACtD;QAEA,IAAIJ,OAAO,GAAGQ,EAAE,EAAE;UAChBR,OAAO,GAAGQ,EAAE,CAAC,CAAC;QAChB;;QAEA3B,KAAK,CAACgB,qBAAqB,CAACJ,UAAU,EAAEO,OAAO,CAAC;MAClD;IACF;EACF;;EAEA;AACF;AACA;EACSU,WAAWA,CAAA,EAAG;IAAA,KAOrBnC,WAAW;IAAuB;IAAA,KAClCE,gBAAgB;IAAqB;IAAA,KACrC7B,gBAAgB;IAAU;IAAA,KAC1BmC,UAAU;IATR,IAAI,CAACnC,gBAAgB,GAAGf,oBAAoB;IAC5C,IAAI,CAACkD,UAAU,GAAG,IAAI;IACtB,IAAI,CAACR,WAAW,GAAG,IAAI7C,SAAS,CAAW,CAAC;IAC5C,IAAI,CAAC+C,gBAAgB,GAAG,IAAI/C,SAAS,CAAS,CAAC;EACjD;;EAKyB;AAC3B;;AAEA;AACA;AACA;AACA,OAAO,MAAM+B,QAAQ,CAAC;EACpB;AACF;AACA;EACEiD,WAAWA,CAACC,CAAY,EAAE;IAAA,KAoE1B7C,MAAM;IAAkB;IAAA,KACxB8B,cAAc;IAAU;IAAA,KACxBF,SAAS;IAAU;IAAA,KACnBrB,IAAI;IAtEF,IAAI,CAACuB,cAAc,GAAG,CAAC;IACvB,IAAI,CAACF,SAAS,GAAG,CAAC;IAClB,IAAI,CAACrB,IAAI,GAAG,IAAI3C,SAAS,CAAW,CAAC;IAErC,IAAIiF,CAAC,IAAIC,SAAS,EAAE;MAClB,IAAI,CAAC9C,MAAM,GAAG6C,CAAC,CAAC7C,MAAM;MAEtB,KACE,MAAM+C,GAAuB,GAAGF,CAAC,CAACtC,IAAI,CAACyC,KAAK,CAAC,CAAC,EAC9CD,GAAG,CAACE,QAAQ,CAACJ,CAAC,CAACtC,IAAI,CAAC2C,GAAG,CAAC,CAAC,CAAC,EAC1BH,GAAG,CAACI,YAAY,CAAC,CAAC,EAClB;QACA,IAAI,CAAC5C,IAAI,CAACC,QAAQ,CAACuC,GAAG,CAACK,GAAG,CAAC,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAC;MACvC;IACF;EACF;;EAEA;AACF;AACA;EACS2C,UAAUA,CAACR,CAAW,EAAY;IACvC,IAAI,CAAC7C,MAAM,GAAG6C,CAAC,CAAC7C,MAAM;IAEtB,KACE,MAAM+C,GAAuB,GAAGF,CAAC,CAACtC,IAAI,CAACyC,KAAK,CAAC,CAAC,EAC9CD,GAAG,CAACE,QAAQ,CAACJ,CAAC,CAACtC,IAAI,CAAC2C,GAAG,CAAC,CAAC,CAAC,EAC1BH,GAAG,CAACI,YAAY,CAAC,CAAC,EAClB;MACA,IAAI,CAAC5C,IAAI,CAACC,QAAQ,CAACuC,GAAG,CAACK,GAAG,CAAC,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAC;IACvC;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACSgB,UAAUA,CAACX,KAAkB,EAAQ;IAC1C,IAAI,CAACe,cAAc,GAAGf,KAAK,CAACuC,iBAAiB,CAAC,IAAI,CAACtD,MAAM,CAAC;IAC1D,IAAI,CAAC4B,SAAS,GAAGb,KAAK,CAACwC,YAAY,CAAC,IAAI,CAACvD,MAAM,CAAC;IAEhDe,KAAK,CAACiB,wBAAwB,CAAC,IAAI,CAACF,cAAc,EAAE,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;EACSpB,KAAKA,CAAA,EAAa;IACvB,MAAM8C,aAAuB,GAAG,IAAI7D,QAAQ,CAAC,CAAC;IAE9C6D,aAAa,CAACxD,MAAM,GAAG,IAAI,CAACA,MAAM;IAClCwD,aAAa,CAAC1B,cAAc,GAAG,IAAI,CAACA,cAAc;IAClD0B,aAAa,CAAC5B,SAAS,GAAG,IAAI,CAACA,SAAS;IACxC4B,aAAa,CAACjD,IAAI,GAAG,IAAI3C,SAAS,CAAW,CAAC;IAE9C,KACE,IAAImF,GAAuB,GAAG,IAAI,CAACxC,IAAI,CAACyC,KAAK,CAAC,CAAC,EAC/CD,GAAG,CAACE,QAAQ,CAAC,IAAI,CAAC1C,IAAI,CAAC2C,GAAG,CAAC,CAAC,CAAC,EAC7BH,GAAG,CAACU,SAAS,CAAC,CAAC,EACf;MACAD,aAAa,CAACjD,IAAI,CAACC,QAAQ,CAACuC,GAAG,CAACK,GAAG,CAAC,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAC;IAChD;IAEA,OAAO8C,aAAa;EACtB;;EAK2B;AAC7B;;AAEA;AACA,OAAO,KAAKE,CAAC,MAAM,cAAc;AACjC;AACA,WAAAC,qBAAA;AAKC,WAAAC,sBAAA;EAJQ,MAAMxF,UAAU,GAAAwF,sBAAA,CAAAxF,UAAA,GAAGsF,CAAC,CAACtF,UAAU;EAE/B,MAAMuB,QAAQ,GAAAiE,sBAAA,CAAAjE,QAAA,GAAG+D,CAAC,CAAC/D,QAAQ;AAAC,GAHpBgE,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}