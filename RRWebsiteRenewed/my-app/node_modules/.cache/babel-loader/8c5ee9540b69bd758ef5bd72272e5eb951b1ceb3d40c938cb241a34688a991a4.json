{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CubismModelUserDataJson } from './cubismmodeluserdatajson';\nconst ArtMesh = 'ArtMesh';\n\n/**\n * ユーザーデータインターフェース\n *\n * Jsonから読み込んだユーザーデータを記録しておくための構造体\n */\nexport class CubismModelUserDataNode {\n  constructor() {\n    this.targetType = void 0;\n    // ユーザーデータターゲットタイプ\n    this.targetId = void 0;\n    // ユーザーデータターゲットのID\n    this.value = void 0;\n  } // ユーザーデータ\n}\n\n/**\n * ユーザデータの管理クラス\n *\n * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\n */\nexport class CubismModelUserData {\n  /**\n   * インスタンスの作成\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  static create(buffer, size) {\n    const ret = new CubismModelUserData();\n    ret.parseUserData(buffer, size);\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   *\n   * @param modelUserData 破棄するインスタンス\n   */\n  static delete(modelUserData) {\n    if (modelUserData != null) {\n      modelUserData.release();\n      modelUserData = null;\n    }\n  }\n\n  /**\n   * ArtMeshのユーザーデータのリストの取得\n   *\n   * @return ユーザーデータリスト\n   */\n  getArtMeshUserDatas() {\n    return this._artMeshUserDataNode;\n  }\n\n  /**\n   * userdata3.jsonのパース\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   */\n  parseUserData(buffer, size) {\n    let json = new CubismModelUserDataJson(buffer, size);\n    const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\n    const nodeCount = json.getUserDataCount();\n    for (let i = 0; i < nodeCount; i++) {\n      const addNode = new CubismModelUserDataNode();\n      addNode.targetId = json.getUserDataId(i);\n      addNode.targetType = CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));\n      addNode.value = new csmString(json.getUserDataValue(i));\n      this._userDataNodes.pushBack(addNode);\n      if (addNode.targetType == typeOfArtMesh) {\n        this._artMeshUserDataNode.pushBack(addNode);\n      }\n    }\n    json.release();\n    json = void 0;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._userDataNodes = void 0;\n    // ユーザーデータ構造体配列\n    this._artMeshUserDataNode = void 0;\n    this._userDataNodes = new csmVector();\n    this._artMeshUserDataNode = new csmVector();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   *\n   * ユーザーデータ構造体配列を解放する\n   */\n  release() {\n    for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\n      this._userDataNodes.set(i, null);\n    }\n    this._userDataNodes = null;\n  }\n\n  // 閲覧リストの保持\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodeluserdata';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismModelUserData = _Live2DCubismFramework.CubismModelUserData = $.CubismModelUserData;\n  const CubismModelUserDataNode = _Live2DCubismFramework.CubismModelUserDataNode = $.CubismModelUserDataNode;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismFramework","csmString","csmVector","CubismModelUserDataJson","ArtMesh","CubismModelUserDataNode","constructor","targetType","targetId","value","CubismModelUserData","create","buffer","size","ret","parseUserData","delete","modelUserData","release","getArtMeshUserDatas","_artMeshUserDataNode","json","typeOfArtMesh","getIdManager","getId","nodeCount","getUserDataCount","i","addNode","getUserDataId","getUserDataTargetType","getUserDataValue","_userDataNodes","pushBack","getSize","set","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["D:/Personal/PythonStuff/RR/RRWebsiteRenewed/my-app/src/Framework/src/model/cubismmodeluserdata.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CubismModelUserDataJson } from './cubismmodeluserdatajson';\n\nconst ArtMesh = 'ArtMesh';\n\n/**\n * ユーザーデータインターフェース\n *\n * Jsonから読み込んだユーザーデータを記録しておくための構造体\n */\nexport class CubismModelUserDataNode {\n  targetType: CubismIdHandle; // ユーザーデータターゲットタイプ\n  targetId: CubismIdHandle; // ユーザーデータターゲットのID\n  value: csmString; // ユーザーデータ\n}\n\n/**\n * ユーザデータの管理クラス\n *\n * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\n */\nexport class CubismModelUserData {\n  /**\n   * インスタンスの作成\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(buffer: ArrayBuffer, size: number): CubismModelUserData {\n    const ret: CubismModelUserData = new CubismModelUserData();\n\n    ret.parseUserData(buffer, size);\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   *\n   * @param modelUserData 破棄するインスタンス\n   */\n  public static delete(modelUserData: CubismModelUserData): void {\n    if (modelUserData != null) {\n      modelUserData.release();\n      modelUserData = null;\n    }\n  }\n\n  /**\n   * ArtMeshのユーザーデータのリストの取得\n   *\n   * @return ユーザーデータリスト\n   */\n  public getArtMeshUserDatas(): csmVector<CubismModelUserDataNode> {\n    return this._artMeshUserDataNode;\n  }\n\n  /**\n   * userdata3.jsonのパース\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   */\n  public parseUserData(buffer: ArrayBuffer, size: number): void {\n    let json: CubismModelUserDataJson = new CubismModelUserDataJson(\n      buffer,\n      size\n    );\n\n    const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\n    const nodeCount: number = json.getUserDataCount();\n\n    for (let i = 0; i < nodeCount; i++) {\n      const addNode: CubismModelUserDataNode = new CubismModelUserDataNode();\n\n      addNode.targetId = json.getUserDataId(i);\n      addNode.targetType = CubismFramework.getIdManager().getId(\n        json.getUserDataTargetType(i)\n      );\n      addNode.value = new csmString(json.getUserDataValue(i));\n      this._userDataNodes.pushBack(addNode);\n\n      if (addNode.targetType == typeOfArtMesh) {\n        this._artMeshUserDataNode.pushBack(addNode);\n      }\n    }\n\n    json.release();\n    json = void 0;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._userDataNodes = new csmVector<CubismModelUserDataNode>();\n    this._artMeshUserDataNode = new csmVector<CubismModelUserDataNode>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   *\n   * ユーザーデータ構造体配列を解放する\n   */\n  public release(): void {\n    for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\n      this._userDataNodes.set(i, null);\n    }\n\n    this._userDataNodes = null;\n  }\n\n  private _userDataNodes: csmVector<CubismModelUserDataNode>; // ユーザーデータ構造体配列\n  private _artMeshUserDataNode: csmVector<CubismModelUserDataNode>; // 閲覧リストの保持\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodeluserdata';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelUserData = $.CubismModelUserData;\n  export type CubismModelUserData = $.CubismModelUserData;\n  export const CubismModelUserDataNode = $.CubismModelUserDataNode;\n  export type CubismModelUserDataNode = $.CubismModelUserDataNode;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}