{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismmatrix44 } from '../math/cubismmatrix44';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismMatrix44 = cubismmatrix44.CubismMatrix44;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismRenderer {\n    /**\r\n     * レンダラのインスタンスを生成して取得する\r\n     *\r\n     * @return レンダラのインスタンス\r\n     */\n    static create() {\n      return null;\n    }\n\n    /**\r\n     * レンダラのインスタンスを解放する\r\n     */\n    static delete(renderer) {\n      renderer = null;\n    }\n\n    /**\r\n     * レンダラの初期化処理を実行する\r\n     * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n     * @param model モデルのインスタンス\r\n     */\n    initialize(model) {\n      this._model = model;\n    }\n\n    /**\r\n     * モデルを描画する\r\n     */\n    drawModel() {\n      if (this.getModel() == null) return;\n      this.doDrawModel();\n    }\n\n    /**\r\n     * Model-View-Projection 行列をセットする\r\n     * 配列は複製されるので、元の配列は外で破棄して良い\r\n     * @param matrix44 Model-View-Projection 行列\r\n     */\n    setMvpMatrix(matrix44) {\n      this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n    }\n\n    /**\r\n     * Model-View-Projection 行列を取得する\r\n     * @return Model-View-Projection 行列\r\n     */\n    getMvpMatrix() {\n      return this._mvpMatrix4x4;\n    }\n\n    /**\r\n     * モデルの色をセットする\r\n     * 各色0.0~1.0の間で指定する（1.0が標準の状態）\r\n     * @param red 赤チャンネルの値\r\n     * @param green 緑チャンネルの値\r\n     * @param blue 青チャンネルの値\r\n     * @param alpha αチャンネルの値\r\n     */\n    setModelColor(red, green, blue, alpha) {\n      if (red < 0.0) {\n        red = 0.0;\n      } else if (red > 1.0) {\n        red = 1.0;\n      }\n      if (green < 0.0) {\n        green = 0.0;\n      } else if (green > 1.0) {\n        green = 1.0;\n      }\n      if (blue < 0.0) {\n        blue = 0.0;\n      } else if (blue > 1.0) {\n        blue = 1.0;\n      }\n      if (alpha < 0.0) {\n        alpha = 0.0;\n      } else if (alpha > 1.0) {\n        alpha = 1.0;\n      }\n      this._modelColor.R = red;\n      this._modelColor.G = green;\n      this._modelColor.B = blue;\n      this._modelColor.A = alpha;\n    }\n\n    /**\r\n     * モデルの色を取得する\r\n     * 各色0.0~1.0の間で指定する(1.0が標準の状態)\r\n     *\r\n     * @return RGBAのカラー情報\r\n     */\n    getModelColor() {\n      return JSON.parse(JSON.stringify(this._modelColor));\n    }\n\n    /**\r\n     * 乗算済みαの有効・無効をセットする\r\n     * 有効にするならtrue、無効にするならfalseをセットする\r\n     */\n    setIsPremultipliedAlpha(enable) {\n      this._isPremultipliedAlpha = enable;\n    }\n\n    /**\r\n     * 乗算済みαの有効・無効を取得する\r\n     * @return true 乗算済みのα有効\r\n     * @return false 乗算済みのα無効\r\n     */\n    isPremultipliedAlpha() {\n      return this._isPremultipliedAlpha;\n    }\n\n    /**\r\n     * カリング（片面描画）の有効・無効をセットする。\r\n     * 有効にするならtrue、無効にするならfalseをセットする\r\n     */\n    setIsCulling(culling) {\n      this._isCulling = culling;\n    }\n\n    /**\r\n     * カリング（片面描画）の有効・無効を取得する。\r\n     * @return true カリング有効\r\n     * @return false カリング無効\r\n     */\n    isCulling() {\n      return this._isCulling;\n    }\n\n    /**\r\n     * テクスチャの異方性フィルタリングのパラメータをセットする\r\n     * パラメータ値の影響度はレンダラの実装に依存する\r\n     * @param n パラメータの値\r\n     */\n    setAnisotropy(n) {\n      this._anisortopy = n;\n    }\n\n    /**\r\n     * テクスチャの異方性フィルタリングのパラメータをセットする\r\n     * @return 異方性フィルタリングのパラメータ\r\n     */\n    getAnisotropy() {\n      return this._anisortopy;\n    }\n\n    /**\r\n     * レンダリングするモデルを取得する\r\n     * @return レンダリングするモデル\r\n     */\n    getModel() {\n      return this._model;\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._mvpMatrix4x4 = void 0;\n      // Model-View-Projection 行列\n      this._modelColor = void 0;\n      // モデル自体のカラー（RGBA）\n      this._isCulling = void 0;\n      // カリングが有効ならtrue\n      this._isPremultipliedAlpha = void 0;\n      // 乗算済みαならtrue\n      this._anisortopy = void 0;\n      // テクスチャの異方性フィルタリングのパラメータ\n      this._model = void 0;\n      this._isCulling = false;\n      this._isPremultipliedAlpha = false;\n      this._anisortopy = 0.0;\n      this._model = null;\n      this._modelColor = new CubismTextureColor();\n\n      // 単位行列に初期化\n      this._mvpMatrix4x4 = new CubismMatrix44();\n      this._mvpMatrix4x4.loadIdentity();\n    }\n\n    /**\r\n     * モデル描画の実装\r\n     */\n\n    /**\r\n     * 描画オブジェクト（アートメッシュ）を描画する\r\n     * ポリゴンメッシュとテクスチャ番号をセットで渡す。\r\n     * @param textureNo 描画するテクスチャ番号\r\n     * @param indexCount 描画オブジェクトのインデックス値\r\n     * @param vertexCount ポリゴンメッシュの頂点数\r\n     * @param indexArray ポリゴンメッシュ頂点のインデックス配列\r\n     * @param vertexArray ポリゴンメッシュの頂点配列\r\n     * @param uvArray uv配列\r\n     * @param opacity 不透明度\r\n     * @param colorBlendMode カラーブレンディングのタイプ\r\n     * @param invertedMask マスク使用時のマスクの反転使用\r\n     */\n\n    /**\r\n     * レンダラが保持する静的なリソースを開放する\r\n     */\n\n    // レンダリング対象のモデル\n  }\n  CubismRenderer.staticRelease = void 0;\n  _Live2DCubismFramework.CubismRenderer = CubismRenderer;\n  let CubismBlendMode = /*#__PURE__*/function (CubismBlendMode) {\n    CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\n    CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\n    CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\n    return CubismBlendMode;\n  }({});\n  _Live2DCubismFramework.CubismBlendMode = CubismBlendMode;\n  class CubismTextureColor {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this.R = void 0;\n      // 赤チャンネル\n      this.G = void 0;\n      // 緑チャンネル\n      this.B = void 0;\n      // 青チャンネル\n      this.A = void 0;\n      this.R = 1.0;\n      this.G = 1.0;\n      this.B = 1.0;\n      this.A = 1.0;\n    }\n\n    // αチャンネル\n  }\n  _Live2DCubismFramework.CubismTextureColor = CubismTextureColor;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismmatrix44","cubismmodel","CubismModel","CubismMatrix44","_Live2DCubismFramework","CubismRenderer","create","delete","renderer","initialize","model","_model","drawModel","getModel","doDrawModel","setMvpMatrix","matrix44","_mvpMatrix4x4","setMatrix","getArray","getMvpMatrix","setModelColor","red","green","blue","alpha","_modelColor","R","G","B","A","getModelColor","JSON","parse","stringify","setIsPremultipliedAlpha","enable","_isPremultipliedAlpha","isPremultipliedAlpha","setIsCulling","culling","_isCulling","isCulling","setAnisotropy","n","_anisortopy","getAnisotropy","constructor","CubismTextureColor","loadIdentity","staticRelease","CubismBlendMode"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/rendering/cubismrenderer.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismmatrix44 } from '../math/cubismmatrix44';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismMatrix44 = cubismmatrix44.CubismMatrix44;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * モデル描画を処理するレンダラ\r\n   *\r\n   * サブクラスに環境依存の描画命令を記述する。\r\n   */\r\n  export abstract class CubismRenderer {\r\n    /**\r\n     * レンダラのインスタンスを生成して取得する\r\n     *\r\n     * @return レンダラのインスタンス\r\n     */\r\n    public static create(): CubismRenderer {\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * レンダラのインスタンスを解放する\r\n     */\r\n    public static delete(renderer: CubismRenderer): void {\r\n      renderer = null;\r\n    }\r\n\r\n    /**\r\n     * レンダラの初期化処理を実行する\r\n     * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n     * @param model モデルのインスタンス\r\n     */\r\n    public initialize(model: CubismModel): void {\r\n      this._model = model;\r\n    }\r\n\r\n    /**\r\n     * モデルを描画する\r\n     */\r\n    public drawModel(): void {\r\n      if (this.getModel() == null) return;\r\n\r\n      this.doDrawModel();\r\n    }\r\n\r\n    /**\r\n     * Model-View-Projection 行列をセットする\r\n     * 配列は複製されるので、元の配列は外で破棄して良い\r\n     * @param matrix44 Model-View-Projection 行列\r\n     */\r\n    public setMvpMatrix(matrix44: CubismMatrix44): void {\r\n      this._mvpMatrix4x4.setMatrix(matrix44.getArray());\r\n    }\r\n\r\n    /**\r\n     * Model-View-Projection 行列を取得する\r\n     * @return Model-View-Projection 行列\r\n     */\r\n    public getMvpMatrix(): CubismMatrix44 {\r\n      return this._mvpMatrix4x4;\r\n    }\r\n\r\n    /**\r\n     * モデルの色をセットする\r\n     * 各色0.0~1.0の間で指定する（1.0が標準の状態）\r\n     * @param red 赤チャンネルの値\r\n     * @param green 緑チャンネルの値\r\n     * @param blue 青チャンネルの値\r\n     * @param alpha αチャンネルの値\r\n     */\r\n    public setModelColor(\r\n      red: number,\r\n      green: number,\r\n      blue: number,\r\n      alpha: number\r\n    ): void {\r\n      if (red < 0.0) {\r\n        red = 0.0;\r\n      } else if (red > 1.0) {\r\n        red = 1.0;\r\n      }\r\n\r\n      if (green < 0.0) {\r\n        green = 0.0;\r\n      } else if (green > 1.0) {\r\n        green = 1.0;\r\n      }\r\n\r\n      if (blue < 0.0) {\r\n        blue = 0.0;\r\n      } else if (blue > 1.0) {\r\n        blue = 1.0;\r\n      }\r\n\r\n      if (alpha < 0.0) {\r\n        alpha = 0.0;\r\n      } else if (alpha > 1.0) {\r\n        alpha = 1.0;\r\n      }\r\n\r\n      this._modelColor.R = red;\r\n      this._modelColor.G = green;\r\n      this._modelColor.B = blue;\r\n      this._modelColor.A = alpha;\r\n    }\r\n\r\n    /**\r\n     * モデルの色を取得する\r\n     * 各色0.0~1.0の間で指定する(1.0が標準の状態)\r\n     *\r\n     * @return RGBAのカラー情報\r\n     */\r\n    public getModelColor(): CubismTextureColor {\r\n      return JSON.parse(JSON.stringify(this._modelColor));\r\n    }\r\n\r\n    /**\r\n     * 乗算済みαの有効・無効をセットする\r\n     * 有効にするならtrue、無効にするならfalseをセットする\r\n     */\r\n    public setIsPremultipliedAlpha(enable: boolean): void {\r\n      this._isPremultipliedAlpha = enable;\r\n    }\r\n\r\n    /**\r\n     * 乗算済みαの有効・無効を取得する\r\n     * @return true 乗算済みのα有効\r\n     * @return false 乗算済みのα無効\r\n     */\r\n    public isPremultipliedAlpha(): boolean {\r\n      return this._isPremultipliedAlpha;\r\n    }\r\n\r\n    /**\r\n     * カリング（片面描画）の有効・無効をセットする。\r\n     * 有効にするならtrue、無効にするならfalseをセットする\r\n     */\r\n    public setIsCulling(culling: boolean): void {\r\n      this._isCulling = culling;\r\n    }\r\n\r\n    /**\r\n     * カリング（片面描画）の有効・無効を取得する。\r\n     * @return true カリング有効\r\n     * @return false カリング無効\r\n     */\r\n    public isCulling(): boolean {\r\n      return this._isCulling;\r\n    }\r\n\r\n    /**\r\n     * テクスチャの異方性フィルタリングのパラメータをセットする\r\n     * パラメータ値の影響度はレンダラの実装に依存する\r\n     * @param n パラメータの値\r\n     */\r\n    public setAnisotropy(n: number): void {\r\n      this._anisortopy = n;\r\n    }\r\n\r\n    /**\r\n     * テクスチャの異方性フィルタリングのパラメータをセットする\r\n     * @return 異方性フィルタリングのパラメータ\r\n     */\r\n    public getAnisotropy(): number {\r\n      return this._anisortopy;\r\n    }\r\n\r\n    /**\r\n     * レンダリングするモデルを取得する\r\n     * @return レンダリングするモデル\r\n     */\r\n    public getModel(): CubismModel {\r\n      return this._model;\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    protected constructor() {\r\n      this._isCulling = false;\r\n      this._isPremultipliedAlpha = false;\r\n      this._anisortopy = 0.0;\r\n      this._model = null;\r\n      this._modelColor = new CubismTextureColor();\r\n\r\n      // 単位行列に初期化\r\n      this._mvpMatrix4x4 = new CubismMatrix44();\r\n      this._mvpMatrix4x4.loadIdentity();\r\n    }\r\n\r\n    /**\r\n     * モデル描画の実装\r\n     */\r\n    public abstract doDrawModel(): void;\r\n\r\n    /**\r\n     * 描画オブジェクト（アートメッシュ）を描画する\r\n     * ポリゴンメッシュとテクスチャ番号をセットで渡す。\r\n     * @param textureNo 描画するテクスチャ番号\r\n     * @param indexCount 描画オブジェクトのインデックス値\r\n     * @param vertexCount ポリゴンメッシュの頂点数\r\n     * @param indexArray ポリゴンメッシュ頂点のインデックス配列\r\n     * @param vertexArray ポリゴンメッシュの頂点配列\r\n     * @param uvArray uv配列\r\n     * @param opacity 不透明度\r\n     * @param colorBlendMode カラーブレンディングのタイプ\r\n     * @param invertedMask マスク使用時のマスクの反転使用\r\n     */\r\n    public abstract drawMesh(\r\n      textureNo: number,\r\n      indexCount: number,\r\n      vertexCount: number,\r\n      indexArray: Uint16Array,\r\n      vertexArray: Float32Array,\r\n      uvArray: Float32Array,\r\n      opacity: number,\r\n      colorBlendMode: CubismBlendMode,\r\n      invertedMask: boolean\r\n    ): void;\r\n\r\n    /**\r\n     * レンダラが保持する静的なリソースを開放する\r\n     */\r\n    public static staticRelease: Function;\r\n\r\n    protected _mvpMatrix4x4: CubismMatrix44; // Model-View-Projection 行列\r\n    protected _modelColor: CubismTextureColor; // モデル自体のカラー（RGBA）\r\n    protected _isCulling: boolean; // カリングが有効ならtrue\r\n    protected _isPremultipliedAlpha: boolean; // 乗算済みαならtrue\r\n    protected _anisortopy: any; // テクスチャの異方性フィルタリングのパラメータ\r\n    protected _model: CubismModel; // レンダリング対象のモデル\r\n  }\r\n\r\n  export enum CubismBlendMode {\r\n    CubismBlendMode_Normal = 0, // 通常\r\n    CubismBlendMode_Additive = 1, // 加算\r\n    CubismBlendMode_Multiplicative = 2 // 乗算\r\n  }\r\n\r\n  /**\r\n   * テクスチャの色をRGBAで扱うためのクラス\r\n   */\r\n  export class CubismTextureColor {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    constructor() {\r\n      this.R = 1.0;\r\n      this.G = 1.0;\r\n      this.B = 1.0;\r\n      this.A = 1.0;\r\n    }\r\n\r\n    R: number; // 赤チャンネル\r\n    G: number; // 緑チャンネル\r\n    B: number; // 青チャンネル\r\n    A: number; // αチャンネル\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}