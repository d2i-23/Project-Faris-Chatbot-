{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as csmrect } from '../type/csmrectf';\nimport { Live2DCubismFramework as cubismrenderer } from './cubismrenderer';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nimport { Live2DCubismFramework as cubsimmatrix44 } from '../math/cubismmatrix44';\nimport { Live2DCubismFramework as csmmap } from '../type/csmmap';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { CubismLogError } from '../utils/cubismdebug';\nvar Constant = cubismframework.Constant;\nvar CubismMatrix44 = cubsimmatrix44.CubismMatrix44;\nvar csmRect = csmrect.csmRect;\nvar csmMap = csmmap.csmMap;\nvar csmVector = csmvector.csmVector;\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismRenderer = cubismrenderer.CubismRenderer;\nvar CubismBlendMode = cubismrenderer.CubismBlendMode;\nvar CubismTextureColor = cubismrenderer.CubismTextureColor;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4\n\n  const shaderCount = 10; // シェーダーの数 = マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版 + マスク有反転の乗算済アルファ対応版)\n  let s_instance;\n  let s_viewport;\n  let s_fbo;\n\n  /**\r\n   * クリッピングマスクの処理を実行するクラス\r\n   */\n  class CubismClippingManager_WebGL {\n    /**\r\n     * カラーチャンネル（RGBA）のフラグを取得する\r\n     * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\r\n     */\n    getChannelFlagAsColor(channelNo) {\n      return this._channelColors.at(channelNo);\n    }\n\n    /**\r\n     * テンポラリのレンダーテクスチャのアドレスを取得する\r\n     * FrameBufferObjectが存在しない場合、新しく生成する\r\n     *\r\n     * @return レンダーテクスチャのアドレス\r\n     */\n    getMaskRenderTexture() {\n      let ret = 0;\n\n      // テンポラリのRenderTextureを取得する\n      if (this._maskTexture && this._maskTexture.texture != 0) {\n        // 前回使ったものを返す\n        this._maskTexture.frameNo = this._currentFrameNo;\n        ret = this._maskTexture.texture;\n      }\n      if (ret == 0) {\n        // FrameBufferObjectが存在しない場合、新しく生成する\n\n        // クリッピングバッファサイズを取得\n        const size = this._clippingMaskBufferSize;\n        this._colorBuffer = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        ret = this.gl.createFramebuffer();\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\n        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n        this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);\n      }\n      return ret;\n    }\n\n    /**\r\n     * WebGLレンダリングコンテキストを設定する\r\n     * @param gl WebGLレンダリングコンテキスト\r\n     */\n    setGL(gl) {\n      this.gl = gl;\n    }\n\n    /**\r\n     * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\r\n     * @param model モデルのインスタンス\r\n     * @param clippingContext クリッピングマスクのコンテキスト\r\n     */\n    calcClippedDrawTotalBounds(model, clippingContext) {\n      // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\n      let clippedDrawTotalMinX = Number.MAX_VALUE;\n      let clippedDrawTotalMinY = Number.MAX_VALUE;\n      let clippedDrawTotalMaxX = Number.MIN_VALUE;\n      let clippedDrawTotalMaxY = Number.MIN_VALUE;\n\n      // このマスクが実際に必要か判定する\n      // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\n      const clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\n      for (let clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\n        // マスクを使用する描画オブジェクトの描画される矩形を求める\n        const drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\n        const drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\n        const drawableVertexes = model.getDrawableVertices(drawableIndex);\n        let minX = Number.MAX_VALUE;\n        let minY = Number.MAX_VALUE;\n        let maxX = Number.MIN_VALUE;\n        let maxY = Number.MIN_VALUE;\n        const loop = drawableVertexCount * Constant.vertexStep;\n        for (let pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {\n          const x = drawableVertexes[pi];\n          const y = drawableVertexes[pi + 1];\n          if (x < minX) {\n            minX = x;\n          }\n          if (x > maxX) {\n            maxX = x;\n          }\n          if (y < minY) {\n            minY = y;\n          }\n          if (y > maxY) {\n            maxY = y;\n          }\n        }\n\n        // 有効な点が一つも取れなかったのでスキップ\n        if (minX == Number.MAX_VALUE) {\n          continue;\n        }\n\n        // 全体の矩形に反映\n        if (minX < clippedDrawTotalMinX) {\n          clippedDrawTotalMinX = minX;\n        }\n        if (minY < clippedDrawTotalMinY) {\n          clippedDrawTotalMinY = minY;\n        }\n        if (maxX > clippedDrawTotalMaxX) {\n          clippedDrawTotalMaxX = maxX;\n        }\n        if (maxY > clippedDrawTotalMaxY) {\n          clippedDrawTotalMaxY = maxY;\n        }\n        if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n          clippingContext._allClippedDrawRect.x = 0.0;\n          clippingContext._allClippedDrawRect.y = 0.0;\n          clippingContext._allClippedDrawRect.width = 0.0;\n          clippingContext._allClippedDrawRect.height = 0.0;\n          clippingContext._isUsing = false;\n        } else {\n          clippingContext._isUsing = true;\n          const w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n          const h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n          clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n          clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n          clippingContext._allClippedDrawRect.width = w;\n          clippingContext._allClippedDrawRect.height = h;\n        }\n      }\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._maskRenderTexture = void 0;\n      // マスク用レンダーテクスチャのアドレス\n      this._colorBuffer = void 0;\n      // マスク用カラーバッファーのアドレス\n      this._currentFrameNo = void 0;\n      // マスクテクスチャに与えるフレーム番号\n      this._channelColors = void 0;\n      this._maskTexture = void 0;\n      // マスク用のテクスチャリソースのリスト\n      this._clippingContextListForMask = void 0;\n      // マスク用クリッピングコンテキストのリスト\n      this._clippingContextListForDraw = void 0;\n      // 描画用クリッピングコンテキストのリスト\n      this._clippingMaskBufferSize = void 0;\n      // クリッピングマスクのバッファサイズ（初期値:256）\n      this._tmpMatrix = void 0;\n      // マスク計算用の行列\n      this._tmpMatrixForMask = void 0;\n      // マスク計算用の行列\n      this._tmpMatrixForDraw = void 0;\n      // マスク計算用の行列\n      this._tmpBoundsOnModel = void 0;\n      // マスク配置計算用の矩形\n      this.gl = void 0;\n      this._maskRenderTexture = null;\n      this._colorBuffer = null;\n      this._currentFrameNo = 0;\n      this._clippingMaskBufferSize = 256;\n      this._clippingContextListForMask = new csmVector();\n      this._clippingContextListForDraw = new csmVector();\n      this._channelColors = new csmVector();\n      this._tmpBoundsOnModel = new csmRect();\n      this._tmpMatrix = new CubismMatrix44();\n      this._tmpMatrixForMask = new CubismMatrix44();\n      this._tmpMatrixForDraw = new CubismMatrix44();\n      this._maskTexture = null;\n      let tmp = new CubismTextureColor();\n      tmp.R = 1.0;\n      tmp.G = 0.0;\n      tmp.B = 0.0;\n      tmp.A = 0.0;\n      this._channelColors.pushBack(tmp);\n      tmp = new CubismTextureColor();\n      tmp.R = 0.0;\n      tmp.G = 1.0;\n      tmp.B = 0.0;\n      tmp.A = 0.0;\n      this._channelColors.pushBack(tmp);\n      tmp = new CubismTextureColor();\n      tmp.R = 0.0;\n      tmp.G = 0.0;\n      tmp.B = 1.0;\n      tmp.A = 0.0;\n      this._channelColors.pushBack(tmp);\n      tmp = new CubismTextureColor();\n      tmp.R = 0.0;\n      tmp.G = 0.0;\n      tmp.B = 0.0;\n      tmp.A = 1.0;\n      this._channelColors.pushBack(tmp);\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n        if (this._clippingContextListForMask.at(i)) {\n          this._clippingContextListForMask.at(i).release();\n          this._clippingContextListForMask.set(i, void 0);\n        }\n        this._clippingContextListForMask.set(i, null);\n      }\n      this._clippingContextListForMask = null;\n\n      // _clippingContextListForDrawは_clippingContextListForMaskにあるインスタンスを指している。上記の処理により要素ごとのDELETEは不要。\n      for (let i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\n        this._clippingContextListForDraw.set(i, null);\n      }\n      this._clippingContextListForDraw = null;\n      if (this._maskTexture) {\n        this.gl.deleteFramebuffer(this._maskTexture.texture);\n        this._maskTexture = null;\n      }\n      for (let i = 0; i < this._channelColors.getSize(); i++) {\n        this._channelColors.set(i, null);\n      }\n      this._channelColors = null;\n\n      // テクスチャ解放\n      this.gl.deleteTexture(this._colorBuffer);\n      this._colorBuffer = null;\n    }\n\n    /**\r\n     * マネージャの初期化処理\r\n     * クリッピングマスクを使う描画オブジェクトの登録を行う\r\n     * @param model モデルのインスタンス\r\n     * @param drawableCount 描画オブジェクトの数\r\n     * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのインデックスのリスト\r\n     * @param drawableCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n     */\n    initialize(model, drawableCount, drawableMasks, drawableMaskCounts) {\n      // クリッピングマスクを使う描画オブジェクトをすべて登録する\n      // クリッピングマスクは、通常数個程度に限定して使うものとする\n      for (let i = 0; i < drawableCount; i++) {\n        if (drawableMaskCounts[i] <= 0) {\n          // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）\n          this._clippingContextListForDraw.pushBack(null);\n          continue;\n        }\n\n        // 既にあるClipContextと同じかチェックする\n        let clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);\n        if (clippingContext == null) {\n          // 同一のマスクが存在していない場合は生成する\n          clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);\n          this._clippingContextListForMask.pushBack(clippingContext);\n        }\n        clippingContext.addClippedDrawable(i);\n        this._clippingContextListForDraw.pushBack(clippingContext);\n      }\n    }\n\n    /**\r\n     * クリッピングコンテキストを作成する。モデル描画時に実行する。\r\n     * @param model モデルのインスタンス\r\n     * @param renderer レンダラのインスタンス\r\n     */\n    setupClippingContext(model, renderer) {\n      this._currentFrameNo++;\n\n      // 全てのクリッピングを用意する\n      // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\n      let usingClipCount = 0;\n      for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\n        // 1つのクリッピングマスクに関して\n        const cc = this._clippingContextListForMask.at(clipIndex);\n\n        // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\n        this.calcClippedDrawTotalBounds(model, cc);\n        if (cc._isUsing) {\n          usingClipCount++; // 使用中としてカウント\n        }\n      }\n\n      // マスク作成処理\n      if (usingClipCount > 0) {\n        // 生成したFrameBufferと同じサイズでビューポートを設定\n        this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);\n\n        // マスクをactiveにする\n        this._maskRenderTexture = this.getMaskRenderTexture();\n\n        // モデル描画時にDrawMeshNowに渡される変換(モデルtoワールド座標変換)\n        const modelToWorldF = renderer.getMvpMatrix();\n        renderer.preDraw(); // バッファをクリアする\n\n        // 各マスクのレイアウトを決定していく\n        this.setupLayoutBounds(usingClipCount);\n\n        // ---------- マスク描画処理 ----------\n        // マスク用RenderTextureをactiveにセット\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\n\n        // マスクをクリアする\n        // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n        // 実際にマスクを生成する\n        // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する\n        for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\n          // --- 実際に1つのマスクを描く ---\n          const clipContext = this._clippingContextListForMask.at(clipIndex);\n          const allClipedDrawRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形\n          const layoutBoundsOnTex01 = clipContext._layoutBounds; // この中にマスクを収める\n\n          // モデル座標上の矩形を、適宜マージンを付けて使う\n          const MARGIN = 0.05;\n          this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n          this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);\n          //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい\n\n          // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり\n          // movePeriod' = movePeriod * scaleX + offX\t\t  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]\n          const scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n          const scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n\n          // マスク生成時に使う行列を求める\n          {\n            // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\n            this._tmpMatrix.loadIdentity();\n            {\n              // layout0..1 を -1..1に変換\n              this._tmpMatrix.translateRelative(-1.0, -1.0);\n              this._tmpMatrix.scaleRelative(2.0, 2.0);\n            }\n            {\n              // view to layout0..1\n              this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\n              this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\n              this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\n              // new = [translate][scale][translate]\n            }\n            // tmpMatrixForMaskが計算結果\n            this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n          }\n\n          //--------- draw時の mask 参照用行列を計算\n          {\n            // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\n            this._tmpMatrix.loadIdentity();\n            {\n              this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\n              this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\n              this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\n              // new = [translate][scale][translate]\n            }\n\n            this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n          }\n          clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n          clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n          const clipDrawCount = clipContext._clippingIdCount;\n          for (let i = 0; i < clipDrawCount; i++) {\n            const clipDrawIndex = clipContext._clippingIdList[i];\n\n            // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\n            if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {\n              continue;\n            }\n            renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\n\n            // 今回専用の変換を適用して描く\n            // チャンネルも切り替える必要がある(A,R,G,B)\n            renderer.setClippingContextBufferForMask(clipContext);\n            renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal,\n            // クリッピングは通常描画を強制\n            false // マスク生成時はクリッピングの反転使用は全く関係がない\n            );\n          }\n        }\n\n        // --- 後処理 ---\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\n        renderer.setClippingContextBufferForMask(null);\n        this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);\n      }\n    }\n\n    /**\r\n     * 既にマスクを作っているかを確認\r\n     * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\r\n     * 作っていなければNULLを返す\r\n     * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\r\n     * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n     * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\r\n     */\n    findSameClip(drawableMasks, drawableMaskCounts) {\n      // 作成済みClippingContextと一致するか確認\n      for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n        const clippingContext = this._clippingContextListForMask.at(i);\n        const count = clippingContext._clippingIdCount;\n\n        // 個数が違う場合は別物\n        if (count != drawableMaskCounts) {\n          continue;\n        }\n        let sameCount = 0;\n\n        // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする\n        for (let j = 0; j < count; j++) {\n          const clipId = clippingContext._clippingIdList[j];\n          for (let k = 0; k < count; k++) {\n            if (drawableMasks[k] == clipId) {\n              sameCount++;\n              break;\n            }\n          }\n        }\n        if (sameCount == count) {\n          return clippingContext;\n        }\n      }\n      return null; // 見つからなかった\n    }\n\n    /**\r\n     * クリッピングコンテキストを配置するレイアウト\r\n     * 一つのレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\r\n     * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\r\n     *\r\n     * @param usingClipCount 配置するクリッピングコンテキストの数\r\n     */\n    setupLayoutBounds(usingClipCount) {\n      // ひとつのRenderTextureを極力いっぱいに使ってマスクをレイアウトする\n      // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する\n\n      // RGBAを順番に使っていく\n      let div = usingClipCount / ColorChannelCount; // 1チャンネルに配置する基本のマスク\n      let mod = usingClipCount % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する\n\n      // 小数点は切り捨てる\n      div = ~~div;\n      mod = ~~mod;\n\n      // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）\n      let curClipIndex = 0; // 順番に設定していく\n\n      for (let channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\n        // このチャンネルにレイアウトする数\n        const layoutCount = div + (channelNo < mod ? 1 : 0);\n\n        // 分割方法を決定する\n        if (layoutCount == 0) {\n          // 何もしない\n        } else if (layoutCount == 1) {\n          // 全てをそのまま使う\n          const clipContext = this._clippingContextListForMask.at(curClipIndex++);\n          clipContext._layoutChannelNo = channelNo;\n          clipContext._layoutBounds.x = 0.0;\n          clipContext._layoutBounds.y = 0.0;\n          clipContext._layoutBounds.width = 1.0;\n          clipContext._layoutBounds.height = 1.0;\n        } else if (layoutCount == 2) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 2;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = 0.0;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 1.0;\n            // UVを2つに分解して使う\n          }\n        } else if (layoutCount <= 4) {\n          // 4分割して使う\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 2;\n            let ypos = i / 2;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = ypos * 0.5;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 0.5;\n          }\n        } else if (layoutCount <= 9) {\n          // 9分割して使う\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 3;\n            let ypos = i / 3;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos / 3.0;\n            cc._layoutBounds.y = ypos / 3.0;\n            cc._layoutBounds.width = 1.0 / 3.0;\n            cc._layoutBounds.height = 1.0 / 3.0;\n          }\n        } else {\n          CubismLogError('not supported mask count : {0}', layoutCount);\n        }\n      }\n    }\n\n    /**\r\n     * カラーバッファを取得する\r\n     * @return カラーバッファ\r\n     */\n    getColorBuffer() {\n      return this._colorBuffer;\n    }\n\n    /**\r\n     * 画面描画に使用するクリッピングマスクのリストを取得する\r\n     * @return 画面描画に使用するクリッピングマスクのリスト\r\n     */\n    getClippingContextListForDraw() {\n      return this._clippingContextListForDraw;\n    }\n\n    /**\r\n     * クリッピングマスクバッファのサイズを設定する\r\n     * @param size クリッピングマスクバッファのサイズ\r\n     */\n    setClippingMaskBufferSize(size) {\n      this._clippingMaskBufferSize = size;\n    }\n\n    /**\r\n     * クリッピングマスクバッファのサイズを取得する\r\n     * @return クリッピングマスクバッファのサイズ\r\n     */\n    getClippingMaskBufferSize() {\n      return this._clippingMaskBufferSize;\n    }\n\n    // WebGLレンダリングコンテキスト\n  }\n  _Live2DCubismFramework.CubismClippingManager_WebGL = CubismClippingManager_WebGL;\n  class CubismRenderTextureResource {\n    /**\r\n     * 引数付きコンストラクタ\r\n     * @param frameNo レンダラーのフレーム番号\r\n     * @param texture テクスチャのアドレス\r\n     */\n    constructor(frameNo, texture) {\n      this.frameNo = void 0;\n      // レンダラのフレーム番号\n      this.texture = void 0;\n      this.frameNo = frameNo;\n      this.texture = texture;\n    }\n\n    // テクスチャのアドレス\n  }\n  _Live2DCubismFramework.CubismRenderTextureResource = CubismRenderTextureResource;\n  class CubismClippingContext {\n    /**\r\n     * 引数付きコンストラクタ\r\n     */\n    constructor(manager, clippingDrawableIndices, clipCount) {\n      this._isUsing = void 0;\n      // 現在の描画状態でマスクの準備が必要ならtrue\n      this._clippingIdList = void 0;\n      // クリッピングマスクのIDリスト\n      this._clippingIdCount = void 0;\n      // クリッピングマスクの数\n      this._layoutChannelNo = void 0;\n      // RGBAのいずれのチャンネルにこのクリップを配置するか（0:R, 1:G, 2:B, 3:A）\n      this._layoutBounds = void 0;\n      // マスク用チャンネルのどの領域にマスクを入れるか（View座標-1~1, UVは0~1に直す）\n      this._allClippedDrawRect = void 0;\n      // このクリッピングで、クリッピングされるすべての描画オブジェクトの囲み矩形（毎回更新）\n      this._matrixForMask = void 0;\n      // マスクの位置計算結果を保持する行列\n      this._matrixForDraw = void 0;\n      // 描画オブジェクトの位置計算結果を保持する行列\n      this._clippedDrawableIndexList = void 0;\n      // このマスクにクリップされる描画オブジェクトのリスト\n      this._owner = void 0;\n      this._owner = manager;\n\n      // クリップしている（＝マスク用の）Drawableのインデックスリスト\n      this._clippingIdList = clippingDrawableIndices;\n\n      // マスクの数\n      this._clippingIdCount = clipCount;\n      this._allClippedDrawRect = new csmRect();\n      this._layoutBounds = new csmRect();\n      this._clippedDrawableIndexList = [];\n      this._matrixForMask = new CubismMatrix44();\n      this._matrixForDraw = new CubismMatrix44();\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      if (this._layoutBounds != null) {\n        this._layoutBounds = null;\n      }\n      if (this._allClippedDrawRect != null) {\n        this._allClippedDrawRect = null;\n      }\n      if (this._clippedDrawableIndexList != null) {\n        this._clippedDrawableIndexList = null;\n      }\n    }\n\n    /**\r\n     * このマスクにクリップされる描画オブジェクトを追加する\r\n     *\r\n     * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\r\n     */\n    addClippedDrawable(drawableIndex) {\n      this._clippedDrawableIndexList.push(drawableIndex);\n    }\n\n    /**\r\n     * このマスクを管理するマネージャのインスタンスを取得する\r\n     * @return クリッピングマネージャのインスタンス\r\n     */\n    getClippingManager() {\n      return this._owner;\n    }\n    setGl(gl) {\n      this._owner.setGL(gl);\n    }\n\n    // このマスクを管理しているマネージャのインスタンス\n  }\n  _Live2DCubismFramework.CubismClippingContext = CubismClippingContext;\n  class CubismShader_WebGL {\n    /**\r\n     * インスタンスを取得する（シングルトン）\r\n     * @return インスタンス\r\n     */\n    static getInstance() {\n      if (s_instance == null) {\n        s_instance = new CubismShader_WebGL();\n        return s_instance;\n      }\n      return s_instance;\n    }\n\n    /**\r\n     * インスタンスを開放する（シングルトン）\r\n     */\n    static deleteInstance() {\n      if (s_instance) {\n        s_instance.release();\n        s_instance = null;\n      }\n    }\n\n    /**\r\n     * privateなコンストラクタ\r\n     */\n    constructor() {\n      this._shaderSets = void 0;\n      // ロードしたシェーダープログラムを保持する変数\n      this.gl = void 0;\n      this._shaderSets = new csmVector();\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      this.releaseShaderProgram();\n    }\n\n    /**\r\n     * シェーダープログラムの一連のセットアップを実行する\r\n     * @param renderer レンダラのインスタンス\r\n     * @param textureId GPUのテクスチャID\r\n     * @param vertexCount ポリゴンメッシュの頂点数\r\n     * @param vertexArray ポリゴンメッシュの頂点配列\r\n     * @param indexArray インデックスバッファの頂点配列\r\n     * @param uvArray uv配列\r\n     * @param opacity 不透明度\r\n     * @param colorBlendMode カラーブレンディングのタイプ\r\n     * @param baseColor ベースカラー\r\n     * @param isPremultipliedAlpha 乗算済みアルファかどうか\r\n     * @param matrix4x4 Model-View-Projection行列\r\n     * @param invertedMask マスクを反転して使用するフラグ\r\n     */\n    setupShaderProgram(renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\n      if (!isPremultipliedAlpha) {\n        CubismLogError('NoPremultipliedAlpha is not allowed');\n      }\n      if (this._shaderSets.getSize() == 0) {\n        this.generateShaders();\n      }\n\n      // Blending\n      let SRC_COLOR;\n      let DST_COLOR;\n      let SRC_ALPHA;\n      let DST_ALPHA;\n      if (renderer.getClippingContextBufferForMask() != null) {\n        // マスク生成時\n        const shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);\n        this.gl.useProgram(shaderSet.shaderProgram);\n\n        // テクスチャ設定\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n        this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n        // 頂点配列の設定(VBO)\n        if (bufferData.vertex == null) {\n          bufferData.vertex = this.gl.createBuffer();\n        }\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n        this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n        this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n        // テクスチャ頂点の設定\n        if (bufferData.uv == null) {\n          bufferData.uv = this.gl.createBuffer();\n        }\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n        this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n        this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n        // チャンネル\n        const channelNo = renderer.getClippingContextBufferForMask()._layoutChannelNo;\n        const colorChannel = renderer.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(channelNo);\n        this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\n        this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());\n        const rect = renderer.getClippingContextBufferForMask()._layoutBounds;\n        this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);\n        SRC_COLOR = this.gl.ZERO;\n        DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\n        SRC_ALPHA = this.gl.ZERO;\n        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n      } // マスク生成以外の場合\n      else {\n        const masked = renderer.getClippingContextBufferForDraw() != null; // この描画オブジェクトはマスク対象か\n        const offset = masked ? invertedMask ? 2 : 1 : 0;\n        let shaderSet = new CubismShaderSet();\n        switch (colorBlendMode) {\n          case CubismBlendMode.CubismBlendMode_Normal:\n          default:\n            shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);\n            SRC_COLOR = this.gl.ONE;\n            DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n            SRC_ALPHA = this.gl.ONE;\n            DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n            break;\n          case CubismBlendMode.CubismBlendMode_Additive:\n            shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);\n            SRC_COLOR = this.gl.ONE;\n            DST_COLOR = this.gl.ONE;\n            SRC_ALPHA = this.gl.ZERO;\n            DST_ALPHA = this.gl.ONE;\n            break;\n          case CubismBlendMode.CubismBlendMode_Multiplicative:\n            shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);\n            SRC_COLOR = this.gl.DST_COLOR;\n            DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n            SRC_ALPHA = this.gl.ZERO;\n            DST_ALPHA = this.gl.ONE;\n            break;\n        }\n        this.gl.useProgram(shaderSet.shaderProgram);\n\n        // 頂点配列の設定\n        if (bufferData.vertex == null) {\n          bufferData.vertex = this.gl.createBuffer();\n        }\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n        this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n        this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\n\n        // テクスチャ頂点の設定\n        if (bufferData.uv == null) {\n          bufferData.uv = this.gl.createBuffer();\n        }\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n        this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n        this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\n        if (masked) {\n          this.gl.activeTexture(this.gl.TEXTURE1);\n          const tex = renderer.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();\n          this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n          this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n\n          // view座標をClippingContextの座標に変換するための行列を設定\n          this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());\n\n          // 使用するカラーチャンネルを設定\n          const channelNo = renderer.getClippingContextBufferForDraw()._layoutChannelNo;\n          const colorChannel = renderer.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(channelNo);\n          this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\n        }\n\n        // テクスチャ設定\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n        this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n        // 座標変換\n        this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());\n        this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);\n      }\n\n      // IBOを作成し、データを転送\n      if (bufferData.index == null) {\n        bufferData.index = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\n      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);\n      this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\n    }\n\n    /**\r\n     * シェーダープログラムを解放する\r\n     */\n    releaseShaderProgram() {\n      for (let i = 0; i < this._shaderSets.getSize(); i++) {\n        this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\n        this._shaderSets.at(i).shaderProgram = 0;\n        this._shaderSets.set(i, void 0);\n        this._shaderSets.set(i, null);\n      }\n    }\n\n    /**\r\n     * シェーダープログラムを初期化する\r\n     * @param vertShaderSrc 頂点シェーダのソース\r\n     * @param fragShaderSrc フラグメントシェーダのソース\r\n     */\n    generateShaders() {\n      for (let i = 0; i < shaderCount; i++) {\n        this._shaderSets.pushBack(new CubismShaderSet());\n      }\n      this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(vertexShaderSrcSetupMask, fragmentShaderSrcsetupMask);\n      this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(vertexShaderSrc, fragmentShaderSrcPremultipliedAlpha);\n      this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(vertexShaderSrcMasked, fragmentShaderSrcMaskPremultipliedAlpha);\n      this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(vertexShaderSrcMasked, fragmentShaderSrcMaskInvertedPremultipliedAlpha);\n\n      // 加算も通常と同じシェーダーを利用する\n      this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\n      this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\n      this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\n\n      // 乗算も通常と同じシェーダーを利用する\n      this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\n      this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\n      this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\n\n      // SetupMask\n      this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');\n      this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');\n      this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');\n\n      // 通常（PremultipliedAlpha）\n      this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');\n      this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');\n      this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');\n      this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');\n\n      // 通常（クリッピング、PremultipliedAlpha）\n      this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');\n      this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');\n      this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');\n      this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');\n      this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');\n\n      // 通常（クリッピング・反転, PremultipliedAlpha）\n      this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');\n      this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');\n      this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');\n      this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');\n      this._shaderSets.at(3).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(3).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');\n\n      // 加算（PremultipliedAlpha）\n      this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');\n      this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');\n      this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');\n      this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');\n\n      // 加算（クリッピング、PremultipliedAlpha）\n      this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');\n      this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');\n      this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');\n      this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');\n      this._shaderSets.at(5).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(5).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');\n\n      // 加算（クリッピング・反転、PremultipliedAlpha）\n      this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');\n      this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');\n      this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');\n      this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');\n      this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');\n\n      // 乗算（PremultipliedAlpha）\n      this._shaderSets.at(7).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');\n      this._shaderSets.at(7).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');\n      this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');\n      this._shaderSets.at(7).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');\n\n      // 乗算（クリッピング、PremultipliedAlpha）\n      this._shaderSets.at(8).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');\n      this._shaderSets.at(8).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');\n      this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');\n      this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');\n      this._shaderSets.at(8).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(8).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(8).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');\n\n      // 乗算（クリッピング・反転、PremultipliedAlpha）\n      this._shaderSets.at(9).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');\n      this._shaderSets.at(9).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');\n      this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');\n      this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');\n      this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');\n      this._shaderSets.at(9).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');\n      this._shaderSets.at(9).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');\n      this._shaderSets.at(9).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');\n    }\n\n    /**\r\n     * シェーダプログラムをロードしてアドレスを返す\r\n     * @param vertexShaderSource    頂点シェーダのソース\r\n     * @param fragmentShaderSource  フラグメントシェーダのソース\r\n     * @return シェーダプログラムのアドレス\r\n     */\n    loadShaderProgram(vertexShaderSource, fragmentShaderSource) {\n      // Create Shader Program\n      let shaderProgram = this.gl.createProgram();\n      let vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);\n      if (!vertShader) {\n        CubismLogError('Vertex shader compile error!');\n        return 0;\n      }\n      let fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);\n      if (!fragShader) {\n        CubismLogError('Vertex shader compile error!');\n        return 0;\n      }\n\n      // Attach vertex shader to program\n      this.gl.attachShader(shaderProgram, vertShader);\n\n      // Attach fragment shader to program\n      this.gl.attachShader(shaderProgram, fragShader);\n\n      // link program\n      this.gl.linkProgram(shaderProgram);\n      const linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);\n\n      // リンクに失敗したらシェーダーを削除\n      if (!linkStatus) {\n        CubismLogError('Failed to link program: {0}', shaderProgram);\n        this.gl.deleteShader(vertShader);\n        vertShader = 0;\n        this.gl.deleteShader(fragShader);\n        fragShader = 0;\n        if (shaderProgram) {\n          this.gl.deleteProgram(shaderProgram);\n          shaderProgram = 0;\n        }\n        return 0;\n      }\n\n      // Release vertex and fragment shaders.\n      this.gl.deleteShader(vertShader);\n      this.gl.deleteShader(fragShader);\n      return shaderProgram;\n    }\n\n    /**\r\n     * シェーダープログラムをコンパイルする\r\n     * @param shaderType シェーダタイプ(Vertex/Fragment)\r\n     * @param shaderSource シェーダソースコード\r\n     *\r\n     * @return コンパイルされたシェーダープログラム\r\n     */\n    compileShaderSource(shaderType, shaderSource) {\n      const source = shaderSource;\n      const shader = this.gl.createShader(shaderType);\n      this.gl.shaderSource(shader, source);\n      this.gl.compileShader(shader);\n      if (!shader) {\n        const log = this.gl.getShaderInfoLog(shader);\n        CubismLogError('Shader compile log: {0} ', log);\n      }\n      const status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n      if (!status) {\n        this.gl.deleteShader(shader);\n        return null;\n      }\n      return shader;\n    }\n    setGl(gl) {\n      this.gl = gl;\n    }\n\n    // webglコンテキスト\n  }\n  _Live2DCubismFramework.CubismShader_WebGL = CubismShader_WebGL;\n  class CubismShaderSet {\n    constructor() {\n      this.shaderProgram = void 0;\n      // シェーダープログラムのアドレス\n      this.attributePositionLocation = void 0;\n      // シェーダープログラムに渡す変数のアドレス（Position）\n      this.attributeTexCoordLocation = void 0;\n      // シェーダープログラムに渡す変数のアドレス（TexCoord）\n      this.uniformMatrixLocation = void 0;\n      // シェーダープログラムに渡す変数のアドレス（Matrix）\n      this.uniformClipMatrixLocation = void 0;\n      // シェーダープログラムに渡す変数のアドレス（ClipMatrix）\n      this.samplerTexture0Location = void 0;\n      // シェーダープログラムに渡す変数のアドレス（Texture0）\n      this.samplerTexture1Location = void 0;\n      // シェーダープログラムに渡す変数のアドレス（Texture1）\n      this.uniformBaseColorLocation = void 0;\n      // シェーダープログラムに渡す変数のアドレス（BaseColor）\n      this.uniformChannelFlagLocation = void 0;\n    } // シェーダープログラムに渡す変数のアドレス（ChannelFlag）\n  }\n  _Live2DCubismFramework.CubismShaderSet = CubismShaderSet;\n  let ShaderNames = /*#__PURE__*/function (ShaderNames) {\n    ShaderNames[ShaderNames[\"ShaderNames_SetupMask\"] = 0] = \"ShaderNames_SetupMask\";\n    ShaderNames[ShaderNames[\"ShaderNames_NormalPremultipliedAlpha\"] = 1] = \"ShaderNames_NormalPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_NormalMaskedPremultipliedAlpha\"] = 2] = \"ShaderNames_NormalMaskedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\"] = 3] = \"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_AddPremultipliedAlpha\"] = 4] = \"ShaderNames_AddPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlpha\"] = 5] = \"ShaderNames_AddMaskedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlphaInverted\"] = 6] = \"ShaderNames_AddMaskedPremultipliedAlphaInverted\";\n    ShaderNames[ShaderNames[\"ShaderNames_MultPremultipliedAlpha\"] = 7] = \"ShaderNames_MultPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlpha\"] = 8] = \"ShaderNames_MultMaskedPremultipliedAlpha\";\n    ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlphaInverted\"] = 9] = \"ShaderNames_MultMaskedPremultipliedAlphaInverted\";\n    return ShaderNames;\n  }({});\n  _Live2DCubismFramework.ShaderNames = ShaderNames;\n  const vertexShaderSrcSetupMask = _Live2DCubismFramework.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' + 'attribute vec2     a_texCoord;' + 'varying vec2       v_texCoord;' + 'varying vec4       v_myPos;' + 'uniform mat4       u_clipMatrix;' + 'void main()' + '{' + '   gl_Position = u_clipMatrix * a_position;' + '   v_myPos = u_clipMatrix * a_position;' + '   v_texCoord = a_texCoord;' + '   v_texCoord.y = 1.0 - v_texCoord.y;' + '}';\n  const fragmentShaderSrcsetupMask = _Live2DCubismFramework.fragmentShaderSrcsetupMask = 'precision mediump float;' + 'varying vec2       v_texCoord;' + 'varying vec4       v_myPos;' + 'uniform vec4       u_baseColor;' + 'uniform vec4       u_channelFlag;' + 'uniform sampler2D  s_texture0;' + 'void main()' + '{' + '   float isInside = ' + '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' + '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' + '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' + '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' + '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' + '}';\n  const vertexShaderSrc = _Live2DCubismFramework.vertexShaderSrc = 'attribute vec4     a_position;' +\n  //v.vertex\n  'attribute vec2     a_texCoord;' +\n  //v.texcoord\n  'varying vec2       v_texCoord;' +\n  //v2f.texcoord\n  'uniform mat4       u_matrix;' + 'void main()' + '{' + '   gl_Position = u_matrix * a_position;' + '   v_texCoord = a_texCoord;' + '   v_texCoord.y = 1.0 - v_texCoord.y;' + '}';\n  const vertexShaderSrcMasked = _Live2DCubismFramework.vertexShaderSrcMasked = 'attribute vec4     a_position;' + 'attribute vec2     a_texCoord;' + 'varying vec2       v_texCoord;' + 'varying vec4       v_clipPos;' + 'uniform mat4       u_matrix;' + 'uniform mat4       u_clipMatrix;' + 'void main()' + '{' + '   gl_Position = u_matrix * a_position;' + '   v_clipPos = u_clipMatrix * a_position;' + '   v_texCoord = a_texCoord;' + '   v_texCoord.y = 1.0 - v_texCoord.y;' + '}';\n  const fragmentShaderSrcPremultipliedAlpha = _Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' + 'varying vec2       v_texCoord;' +\n  //v2f.texcoord\n  'uniform vec4       u_baseColor;' + 'uniform sampler2D  s_texture0;' +\n  //_MainTex\n  'void main()' + '{' + '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' + '}';\n  const fragmentShaderSrcMaskPremultipliedAlpha = _Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' + 'varying vec2       v_texCoord;' + 'varying vec4       v_clipPos;' + 'uniform vec4       u_baseColor;' + 'uniform vec4       u_channelFlag;' + 'uniform sampler2D  s_texture0;' + 'uniform sampler2D  s_texture1;' + 'void main()' + '{' + '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' + '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' + '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' + '   col_formask = col_formask * maskVal;' + '   gl_FragColor = col_formask;' + '}';\n  const fragmentShaderSrcMaskInvertedPremultipliedAlpha = _Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' + 'varying vec2 v_texCoord;' + 'varying vec4 v_clipPos;' + 'uniform sampler2D s_texture0;' + 'uniform sampler2D s_texture1;' + 'uniform vec4 u_channelFlag;' + 'uniform vec4 u_baseColor;' + 'void main()' + '{' + 'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' + 'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' + 'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' + 'col_formask = col_formask * (1.0 - maskVal);' + 'gl_FragColor = col_formask;' + '}';\n  class CubismRenderer_WebGL extends CubismRenderer {\n    /**\r\n     * レンダラの初期化処理を実行する\r\n     * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n     *\r\n     * @param model モデルのインスタンス\r\n     */\n    initialize(model) {\n      if (model.isUsingMasking()) {\n        this._clippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化\n        this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());\n      }\n      this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\n      super.initialize(model); // 親クラスの処理を呼ぶ\n    }\n\n    /**\r\n     * WebGLテクスチャのバインド処理\r\n     * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\r\n     * @param modelTextureNo セットするモデルテクスチャの番号\r\n     * @param glTextureNo WebGLテクスチャの番号\r\n     */\n    bindTexture(modelTextureNo, glTexture) {\n      this._textures.setValue(modelTextureNo, glTexture);\n    }\n\n    /**\r\n     * WebGLにバインドされたテクスチャのリストを取得する\r\n     * @return テクスチャのリスト\r\n     */\n    getBindedTextures() {\n      return this._textures;\n    }\n\n    /**\r\n     * クリッピングマスクバッファのサイズを設定する\r\n     * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\r\n     * @param size クリッピングマスクバッファのサイズ\r\n     */\n    setClippingMaskBufferSize(size) {\n      // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する\n      this._clippingManager.release();\n      this._clippingManager = void 0;\n      this._clippingManager = null;\n      this._clippingManager = new CubismClippingManager_WebGL();\n      this._clippingManager.setClippingMaskBufferSize(size);\n      this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());\n    }\n\n    /**\r\n     * クリッピングマスクバッファのサイズを取得する\r\n     * @return クリッピングマスクバッファのサイズ\r\n     */\n    getClippingMaskBufferSize() {\n      return this._clippingManager.getClippingMaskBufferSize();\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      super();\n      this._textures = void 0;\n      // モデルが参照するテクスチャとレンダラでバインドしているテクスチャとのマップ\n      this._sortedDrawableIndexList = void 0;\n      // 描画オブジェクトのインデックスを描画順に並べたリスト\n      this._clippingManager = void 0;\n      // クリッピングマスク管理オブジェクト\n      this._clippingContextBufferForMask = void 0;\n      // マスクテクスチャに描画するためのクリッピングコンテキスト\n      this._clippingContextBufferForDraw = void 0;\n      // 画面上描画するためのクリッピングコンテキスト\n      this.firstDraw = void 0;\n      this._bufferData = void 0;\n      // 頂点バッファデータ\n      this.gl = void 0;\n      this._clippingContextBufferForMask = null;\n      this._clippingContextBufferForDraw = null;\n      this._clippingManager = new CubismClippingManager_WebGL();\n      this.firstDraw = true;\n      this._textures = new csmMap();\n      this._sortedDrawableIndexList = new csmVector();\n      this._bufferData = {\n        vertex: WebGLBuffer = null,\n        uv: WebGLBuffer = null,\n        index: WebGLBuffer = null\n      };\n\n      // テクスチャ対応マップの容量を確保しておく\n      this._textures.prepareCapacity(32, true);\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      this._clippingManager.release();\n      this._clippingManager = void 0;\n      this._clippingManager = null;\n      this.gl.deleteBuffer(this._bufferData.vertex);\n      this._bufferData.vertex = null;\n      this.gl.deleteBuffer(this._bufferData.uv);\n      this._bufferData.uv = null;\n      this.gl.deleteBuffer(this._bufferData.index);\n      this._bufferData.index = null;\n      this._bufferData = null;\n      this._textures = null;\n    }\n\n    /**\r\n     * モデルを描画する実際の処理\r\n     */\n    doDrawModel() {\n      //------------ クリッピングマスク・バッファ前処理方式の場合 ------------\n      if (this._clippingManager != null) {\n        this.preDraw();\n        this._clippingManager.setupClippingContext(this.getModel(), this);\n      }\n\n      // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!\n      this.preDraw();\n      const drawableCount = this.getModel().getDrawableCount();\n      const renderOrder = this.getModel().getDrawableRenderOrders();\n\n      // インデックスを描画順でソート\n      for (let i = 0; i < drawableCount; ++i) {\n        const order = renderOrder[i];\n        this._sortedDrawableIndexList.set(order, i);\n      }\n\n      // 描画\n      for (let i = 0; i < drawableCount; ++i) {\n        const drawableIndex = this._sortedDrawableIndexList.at(i);\n\n        // Drawableが表示状態でなければ処理をパスする\n        if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\n          continue;\n        }\n\n        // クリッピングマスクをセットする\n        this.setClippingContextBufferForDraw(this._clippingManager != null ? this._clippingManager.getClippingContextListForDraw().at(drawableIndex) : null);\n        this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\n        this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));\n      }\n    }\n\n    /**\r\n     * [オーバーライド]\r\n     * 描画オブジェクト（アートメッシュ）を描画する。\r\n     * ポリゴンメッシュとテクスチャ番号をセットで渡す。\r\n     * @param textureNo 描画するテクスチャ番号\r\n     * @param indexCount 描画オブジェクトのインデックス値\r\n     * @param vertexCount ポリゴンメッシュの頂点数\r\n     * @param indexArray ポリゴンメッシュのインデックス配列\r\n     * @param vertexArray ポリゴンメッシュの頂点配列\r\n     * @param uvArray uv配列\r\n     * @param opacity 不透明度\r\n     * @param colorBlendMode カラー合成タイプ\r\n     * @param invertedMask マスク使用時のマスクの反転使用\r\n     */\n    drawMesh(textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {\n      // 裏面描画の有効・無効\n      if (this.isCulling()) {\n        this.gl.enable(this.gl.CULL_FACE);\n      } else {\n        this.gl.disable(this.gl.CULL_FACE);\n      }\n      this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\n\n      const modelColorRGBA = this.getModelColor();\n      if (this.getClippingContextBufferForMask() == null) {\n        // マスク生成時以外\n        modelColorRGBA.A *= opacity;\n        if (this.isPremultipliedAlpha()) {\n          modelColorRGBA.R *= modelColorRGBA.A;\n          modelColorRGBA.G *= modelColorRGBA.A;\n          modelColorRGBA.B *= modelColorRGBA.A;\n        }\n      }\n      let drawtexture; // シェーダに渡すテクスチャ\n\n      // テクスチャマップからバインド済みテクスチャＩＤを取得\n      // バインドされていなければダミーのテクスチャIDをセットする\n      if (this._textures.getValue(textureNo) != null) {\n        drawtexture = this._textures.getValue(textureNo);\n      } else {\n        drawtexture = null;\n      }\n      CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);\n\n      // ポリゴンメッシュを描画する\n      this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);\n\n      // 後処理\n      this.gl.useProgram(null);\n      this.setClippingContextBufferForDraw(null);\n      this.setClippingContextBufferForMask(null);\n    }\n\n    /**\r\n     * レンダラが保持する静的なリソースを解放する\r\n     * WebGLの静的なシェーダープログラムを解放する\r\n     */\n    static doStaticRelease() {\n      CubismShader_WebGL.deleteInstance();\n    }\n\n    /**\r\n     * レンダーステートを設定する\r\n     * @param fbo アプリケーション側で指定しているフレームバッファ\r\n     * @param viewport ビューポート\r\n     */\n    setRenderState(fbo, viewport) {\n      s_fbo = fbo;\n      s_viewport = viewport;\n    }\n\n    /**\r\n     * 描画開始時の追加処理\r\n     * モデルを描画する前にクリッピングマスクに必要な処理を実装している\r\n     */\n    preDraw() {\n      if (this.firstDraw) {\n        this.firstDraw = false;\n\n        // 拡張機能を有効にする\n        this._anisortopy = this.gl.getExtension('EXT_texture_filter_anisotropic') || this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') || this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\n      }\n      this.gl.disable(this.gl.SCISSOR_TEST);\n      this.gl.disable(this.gl.STENCIL_TEST);\n      this.gl.disable(this.gl.DEPTH_TEST);\n\n      // カリング（1.0beta3）\n      this.gl.frontFace(this.gl.CW);\n      this.gl.enable(this.gl.BLEND);\n      this.gl.colorMask(true, true, true, true);\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n\n    /**\r\n     * マスクテクスチャに描画するクリッピングコンテキストをセットする\r\n     */\n    setClippingContextBufferForMask(clip) {\n      this._clippingContextBufferForMask = clip;\n    }\n\n    /**\r\n     * マスクテクスチャに描画するクリッピングコンテキストを取得する\r\n     * @return マスクテクスチャに描画するクリッピングコンテキスト\r\n     */\n    getClippingContextBufferForMask() {\n      return this._clippingContextBufferForMask;\n    }\n\n    /**\r\n     * 画面上に描画するクリッピングコンテキストをセットする\r\n     */\n    setClippingContextBufferForDraw(clip) {\n      this._clippingContextBufferForDraw = clip;\n    }\n\n    /**\r\n     * 画面上に描画するクリッピングコンテキストを取得する\r\n     * @return 画面上に描画するクリッピングコンテキスト\r\n     */\n    getClippingContextBufferForDraw() {\n      return this._clippingContextBufferForDraw;\n    }\n\n    /**\r\n     * glの設定\r\n     */\n    startUp(gl) {\n      this.gl = gl;\n      this._clippingManager.setGL(gl);\n      CubismShader_WebGL.getInstance().setGl(gl);\n    }\n\n    // webglコンテキスト\n  }\n  _Live2DCubismFramework.CubismRenderer_WebGL = CubismRenderer_WebGL;\n  /**\r\n   * レンダラが保持する静的なリソースを開放する\r\n   */\n  CubismRenderer.staticRelease = () => {\n    CubismRenderer_WebGL.doStaticRelease();\n  };\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismframework","csmrect","cubismrenderer","cubismmodel","cubsimmatrix44","csmmap","csmvector","CubismLogError","Constant","CubismMatrix44","csmRect","csmMap","csmVector","CubismModel","CubismRenderer","CubismBlendMode","CubismTextureColor","_Live2DCubismFramework","ColorChannelCount","shaderCount","s_instance","s_viewport","s_fbo","CubismClippingManager_WebGL","getChannelFlagAsColor","channelNo","_channelColors","at","getMaskRenderTexture","ret","_maskTexture","texture","frameNo","_currentFrameNo","size","_clippingMaskBufferSize","_colorBuffer","gl","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","CubismRenderTextureResource","setGL","calcClippedDrawTotalBounds","model","clippingContext","clippedDrawTotalMinX","Number","MAX_VALUE","clippedDrawTotalMinY","clippedDrawTotalMaxX","MIN_VALUE","clippedDrawTotalMaxY","clippedDrawCount","_clippedDrawableIndexList","length","clippedDrawableIndex","drawableIndex","drawableVertexCount","getDrawableVertexCount","drawableVertexes","getDrawableVertices","minX","minY","maxX","maxY","loop","vertexStep","pi","vertexOffset","x","y","_allClippedDrawRect","width","height","_isUsing","w","h","constructor","_maskRenderTexture","_clippingContextListForMask","_clippingContextListForDraw","_tmpMatrix","_tmpMatrixForMask","_tmpMatrixForDraw","_tmpBoundsOnModel","tmp","R","G","B","A","pushBack","release","i","getSize","set","deleteFramebuffer","deleteTexture","initialize","drawableCount","drawableMasks","drawableMaskCounts","findSameClip","CubismClippingContext","addClippedDrawable","setupClippingContext","renderer","usingClipCount","clipIndex","cc","viewport","modelToWorldF","getMvpMatrix","preDraw","setupLayoutBounds","clearColor","clear","COLOR_BUFFER_BIT","clipContext","allClipedDrawRect","layoutBoundsOnTex01","_layoutBounds","MARGIN","setRect","expand","scaleX","scaleY","loadIdentity","translateRelative","scaleRelative","setMatrix","getArray","_matrixForMask","_matrixForDraw","clipDrawCount","_clippingIdCount","clipDrawIndex","_clippingIdList","getDrawableDynamicFlagVertexPositionsDidChange","setIsCulling","getDrawableCulling","setClippingContextBufferForMask","drawMesh","getDrawableTextureIndices","getDrawableVertexIndexCount","getDrawableVertexIndices","getDrawableVertexUvs","getDrawableOpacity","CubismBlendMode_Normal","count","sameCount","j","clipId","k","div","mod","curClipIndex","layoutCount","_layoutChannelNo","xpos","ypos","getColorBuffer","getClippingContextListForDraw","setClippingMaskBufferSize","getClippingMaskBufferSize","manager","clippingDrawableIndices","clipCount","_owner","push","getClippingManager","setGl","CubismShader_WebGL","getInstance","deleteInstance","_shaderSets","releaseShaderProgram","setupShaderProgram","textureId","vertexCount","vertexArray","indexArray","uvArray","bufferData","opacity","colorBlendMode","baseColor","isPremultipliedAlpha","matrix4x4","invertedMask","generateShaders","SRC_COLOR","DST_COLOR","SRC_ALPHA","DST_ALPHA","getClippingContextBufferForMask","shaderSet","ShaderNames","ShaderNames_SetupMask","useProgram","shaderProgram","activeTexture","TEXTURE0","uniform1i","samplerTexture0Location","vertex","createBuffer","bindBuffer","ARRAY_BUFFER","DYNAMIC_DRAW","enableVertexAttribArray","attributePositionLocation","vertexAttribPointer","FLOAT","uv","attributeTexCoordLocation","colorChannel","uniform4f","uniformChannelFlagLocation","uniformMatrix4fv","uniformClipMatrixLocation","rect","uniformBaseColorLocation","getRight","getBottom","ZERO","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","masked","getClippingContextBufferForDraw","offset","CubismShaderSet","ShaderNames_NormalPremultipliedAlpha","ONE","CubismBlendMode_Additive","ShaderNames_AddPremultipliedAlpha","CubismBlendMode_Multiplicative","ShaderNames_MultPremultipliedAlpha","TEXTURE1","tex","samplerTexture1Location","uniformMatrixLocation","index","ELEMENT_ARRAY_BUFFER","blendFuncSeparate","deleteProgram","loadShaderProgram","vertexShaderSrcSetupMask","fragmentShaderSrcsetupMask","vertexShaderSrc","fragmentShaderSrcPremultipliedAlpha","vertexShaderSrcMasked","fragmentShaderSrcMaskPremultipliedAlpha","fragmentShaderSrcMaskInvertedPremultipliedAlpha","getAttribLocation","getUniformLocation","vertexShaderSource","fragmentShaderSource","createProgram","vertShader","compileShaderSource","VERTEX_SHADER","fragShader","FRAGMENT_SHADER","attachShader","linkProgram","linkStatus","getProgramParameter","LINK_STATUS","deleteShader","shaderType","shaderSource","source","shader","createShader","compileShader","log","getShaderInfoLog","status","getShaderParameter","COMPILE_STATUS","CubismRenderer_WebGL","isUsingMasking","_clippingManager","getDrawableCount","getDrawableMasks","getDrawableMaskCounts","_sortedDrawableIndexList","resize","modelTextureNo","glTexture","_textures","setValue","getBindedTextures","getModel","_clippingContextBufferForMask","_clippingContextBufferForDraw","firstDraw","_bufferData","WebGLBuffer","prepareCapacity","deleteBuffer","doDrawModel","renderOrder","getDrawableRenderOrders","order","getDrawableDynamicFlagIsVisible","setClippingContextBufferForDraw","getDrawableBlendMode","getDrawableInvertedMaskBit","textureNo","indexCount","isCulling","enable","CULL_FACE","disable","frontFace","CCW","modelColorRGBA","getModelColor","drawtexture","getValue","drawElements","TRIANGLES","UNSIGNED_SHORT","doStaticRelease","setRenderState","fbo","_anisortopy","getExtension","SCISSOR_TEST","STENCIL_TEST","DEPTH_TEST","CW","BLEND","colorMask","clip","startUp","staticRelease"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/rendering/cubismrenderer_webgl.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as csmrect } from '../type/csmrectf';\r\nimport { Live2DCubismFramework as cubismrenderer } from './cubismrenderer';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport { Live2DCubismFramework as cubsimmatrix44 } from '../math/cubismmatrix44';\r\nimport { Live2DCubismFramework as csmmap } from '../type/csmmap';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { CubismLogError } from '../utils/cubismdebug';\r\nimport Constant = cubismframework.Constant;\r\nimport CubismMatrix44 = cubsimmatrix44.CubismMatrix44;\r\nimport csmRect = csmrect.csmRect;\r\nimport csmMap = csmmap.csmMap;\r\nimport csmVector = csmvector.csmVector;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismRenderer = cubismrenderer.CubismRenderer;\r\nimport CubismBlendMode = cubismrenderer.CubismBlendMode;\r\nimport CubismTextureColor = cubismrenderer.CubismTextureColor;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  const ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4\r\n\r\n  const shaderCount = 10; // シェーダーの数 = マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版 + マスク有反転の乗算済アルファ対応版)\r\n  let s_instance: CubismShader_WebGL;\r\n  let s_viewport: number[];\r\n  let s_fbo: WebGLFramebuffer;\r\n\r\n  /**\r\n   * クリッピングマスクの処理を実行するクラス\r\n   */\r\n  export class CubismClippingManager_WebGL {\r\n    /**\r\n     * カラーチャンネル（RGBA）のフラグを取得する\r\n     * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\r\n     */\r\n    public getChannelFlagAsColor(channelNo: number): CubismTextureColor {\r\n      return this._channelColors.at(channelNo);\r\n    }\r\n\r\n    /**\r\n     * テンポラリのレンダーテクスチャのアドレスを取得する\r\n     * FrameBufferObjectが存在しない場合、新しく生成する\r\n     *\r\n     * @return レンダーテクスチャのアドレス\r\n     */\r\n    public getMaskRenderTexture(): WebGLFramebuffer {\r\n      let ret: WebGLFramebuffer = 0;\r\n\r\n      // テンポラリのRenderTextureを取得する\r\n      if (this._maskTexture && this._maskTexture.texture != 0) {\r\n        // 前回使ったものを返す\r\n        this._maskTexture.frameNo = this._currentFrameNo;\r\n        ret = this._maskTexture.texture;\r\n      }\r\n\r\n      if (ret == 0) {\r\n        // FrameBufferObjectが存在しない場合、新しく生成する\r\n\r\n        // クリッピングバッファサイズを取得\r\n        const size: number = this._clippingMaskBufferSize;\r\n\r\n        this._colorBuffer = this.gl.createTexture();\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\r\n        this.gl.texImage2D(\r\n          this.gl.TEXTURE_2D,\r\n          0,\r\n          this.gl.RGBA,\r\n          size,\r\n          size,\r\n          0,\r\n          this.gl.RGBA,\r\n          this.gl.UNSIGNED_BYTE,\r\n          null\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_WRAP_S,\r\n          this.gl.CLAMP_TO_EDGE\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_WRAP_T,\r\n          this.gl.CLAMP_TO_EDGE\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_MIN_FILTER,\r\n          this.gl.LINEAR\r\n        );\r\n        this.gl.texParameteri(\r\n          this.gl.TEXTURE_2D,\r\n          this.gl.TEXTURE_MAG_FILTER,\r\n          this.gl.LINEAR\r\n        );\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n\r\n        ret = this.gl.createFramebuffer();\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\r\n        this.gl.framebufferTexture2D(\r\n          this.gl.FRAMEBUFFER,\r\n          this.gl.COLOR_ATTACHMENT0,\r\n          this.gl.TEXTURE_2D,\r\n          this._colorBuffer,\r\n          0\r\n        );\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n\r\n        this._maskTexture = new CubismRenderTextureResource(\r\n          this._currentFrameNo,\r\n          ret\r\n        );\r\n      }\r\n\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * WebGLレンダリングコンテキストを設定する\r\n     * @param gl WebGLレンダリングコンテキスト\r\n     */\r\n    public setGL(gl: WebGLRenderingContext): void {\r\n      this.gl = gl;\r\n    }\r\n\r\n    /**\r\n     * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\r\n     * @param model モデルのインスタンス\r\n     * @param clippingContext クリッピングマスクのコンテキスト\r\n     */\r\n    public calcClippedDrawTotalBounds(\r\n      model: CubismModel,\r\n      clippingContext: CubismClippingContext\r\n    ): void {\r\n      // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\r\n      let clippedDrawTotalMinX: number = Number.MAX_VALUE;\r\n      let clippedDrawTotalMinY: number = Number.MAX_VALUE;\r\n      let clippedDrawTotalMaxX: number = Number.MIN_VALUE;\r\n      let clippedDrawTotalMaxY: number = Number.MIN_VALUE;\r\n\r\n      // このマスクが実際に必要か判定する\r\n      // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\r\n      const clippedDrawCount: number =\r\n        clippingContext._clippedDrawableIndexList.length;\r\n\r\n      for (\r\n        let clippedDrawableIndex = 0;\r\n        clippedDrawableIndex < clippedDrawCount;\r\n        clippedDrawableIndex++\r\n      ) {\r\n        // マスクを使用する描画オブジェクトの描画される矩形を求める\r\n        const drawableIndex: number =\r\n          clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\r\n\r\n        const drawableVertexCount: number = model.getDrawableVertexCount(\r\n          drawableIndex\r\n        );\r\n        const drawableVertexes: Float32Array = model.getDrawableVertices(\r\n          drawableIndex\r\n        );\r\n\r\n        let minX: number = Number.MAX_VALUE;\r\n        let minY: number = Number.MAX_VALUE;\r\n        let maxX: number = Number.MIN_VALUE;\r\n        let maxY: number = Number.MIN_VALUE;\r\n\r\n        const loop: number = drawableVertexCount * Constant.vertexStep;\r\n        for (\r\n          let pi: number = Constant.vertexOffset;\r\n          pi < loop;\r\n          pi += Constant.vertexStep\r\n        ) {\r\n          const x: number = drawableVertexes[pi];\r\n          const y: number = drawableVertexes[pi + 1];\r\n\r\n          if (x < minX) {\r\n            minX = x;\r\n          }\r\n          if (x > maxX) {\r\n            maxX = x;\r\n          }\r\n          if (y < minY) {\r\n            minY = y;\r\n          }\r\n          if (y > maxY) {\r\n            maxY = y;\r\n          }\r\n        }\r\n\r\n        // 有効な点が一つも取れなかったのでスキップ\r\n        if (minX == Number.MAX_VALUE) {\r\n          continue;\r\n        }\r\n\r\n        // 全体の矩形に反映\r\n        if (minX < clippedDrawTotalMinX) {\r\n          clippedDrawTotalMinX = minX;\r\n        }\r\n        if (minY < clippedDrawTotalMinY) {\r\n          clippedDrawTotalMinY = minY;\r\n        }\r\n        if (maxX > clippedDrawTotalMaxX) {\r\n          clippedDrawTotalMaxX = maxX;\r\n        }\r\n        if (maxY > clippedDrawTotalMaxY) {\r\n          clippedDrawTotalMaxY = maxY;\r\n        }\r\n\r\n        if (clippedDrawTotalMinX == Number.MAX_VALUE) {\r\n          clippingContext._allClippedDrawRect.x = 0.0;\r\n          clippingContext._allClippedDrawRect.y = 0.0;\r\n          clippingContext._allClippedDrawRect.width = 0.0;\r\n          clippingContext._allClippedDrawRect.height = 0.0;\r\n          clippingContext._isUsing = false;\r\n        } else {\r\n          clippingContext._isUsing = true;\r\n          const w: number = clippedDrawTotalMaxX - clippedDrawTotalMinX;\r\n          const h: number = clippedDrawTotalMaxY - clippedDrawTotalMinY;\r\n          clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\r\n          clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\r\n          clippingContext._allClippedDrawRect.width = w;\r\n          clippingContext._allClippedDrawRect.height = h;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._maskRenderTexture = null;\r\n      this._colorBuffer = null;\r\n      this._currentFrameNo = 0;\r\n      this._clippingMaskBufferSize = 256;\r\n      this._clippingContextListForMask = new csmVector<CubismClippingContext>();\r\n      this._clippingContextListForDraw = new csmVector<CubismClippingContext>();\r\n      this._channelColors = new csmVector<CubismTextureColor>();\r\n      this._tmpBoundsOnModel = new csmRect();\r\n      this._tmpMatrix = new CubismMatrix44();\r\n      this._tmpMatrixForMask = new CubismMatrix44();\r\n      this._tmpMatrixForDraw = new CubismMatrix44();\r\n      this._maskTexture = null;\r\n\r\n      let tmp: CubismTextureColor = new CubismTextureColor();\r\n      tmp.R = 1.0;\r\n      tmp.G = 0.0;\r\n      tmp.B = 0.0;\r\n      tmp.A = 0.0;\r\n      this._channelColors.pushBack(tmp);\r\n\r\n      tmp = new CubismTextureColor();\r\n      tmp.R = 0.0;\r\n      tmp.G = 1.0;\r\n      tmp.B = 0.0;\r\n      tmp.A = 0.0;\r\n      this._channelColors.pushBack(tmp);\r\n\r\n      tmp = new CubismTextureColor();\r\n      tmp.R = 0.0;\r\n      tmp.G = 0.0;\r\n      tmp.B = 1.0;\r\n      tmp.A = 0.0;\r\n      this._channelColors.pushBack(tmp);\r\n\r\n      tmp = new CubismTextureColor();\r\n      tmp.R = 0.0;\r\n      tmp.G = 0.0;\r\n      tmp.B = 0.0;\r\n      tmp.A = 1.0;\r\n      this._channelColors.pushBack(tmp);\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n        if (this._clippingContextListForMask.at(i)) {\r\n          this._clippingContextListForMask.at(i).release();\r\n          this._clippingContextListForMask.set(i, void 0);\r\n        }\r\n        this._clippingContextListForMask.set(i, null);\r\n      }\r\n      this._clippingContextListForMask = null;\r\n\r\n      // _clippingContextListForDrawは_clippingContextListForMaskにあるインスタンスを指している。上記の処理により要素ごとのDELETEは不要。\r\n      for (let i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\r\n        this._clippingContextListForDraw.set(i, null);\r\n      }\r\n      this._clippingContextListForDraw = null;\r\n\r\n      if (this._maskTexture) {\r\n        this.gl.deleteFramebuffer(this._maskTexture.texture);\r\n        this._maskTexture = null;\r\n      }\r\n\r\n      for (let i = 0; i < this._channelColors.getSize(); i++) {\r\n        this._channelColors.set(i, null);\r\n      }\r\n\r\n      this._channelColors = null;\r\n\r\n      // テクスチャ解放\r\n      this.gl.deleteTexture(this._colorBuffer);\r\n      this._colorBuffer = null;\r\n    }\r\n\r\n    /**\r\n     * マネージャの初期化処理\r\n     * クリッピングマスクを使う描画オブジェクトの登録を行う\r\n     * @param model モデルのインスタンス\r\n     * @param drawableCount 描画オブジェクトの数\r\n     * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのインデックスのリスト\r\n     * @param drawableCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n     */\r\n    public initialize(\r\n      model: CubismModel,\r\n      drawableCount: number,\r\n      drawableMasks: Int32Array[],\r\n      drawableMaskCounts: Int32Array\r\n    ): void {\r\n      // クリッピングマスクを使う描画オブジェクトをすべて登録する\r\n      // クリッピングマスクは、通常数個程度に限定して使うものとする\r\n      for (let i = 0; i < drawableCount; i++) {\r\n        if (drawableMaskCounts[i] <= 0) {\r\n          // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）\r\n          this._clippingContextListForDraw.pushBack(null);\r\n          continue;\r\n        }\r\n\r\n        // 既にあるClipContextと同じかチェックする\r\n        let clippingContext: CubismClippingContext = this.findSameClip(\r\n          drawableMasks[i],\r\n          drawableMaskCounts[i]\r\n        );\r\n        if (clippingContext == null) {\r\n          // 同一のマスクが存在していない場合は生成する\r\n          clippingContext = new CubismClippingContext(\r\n            this,\r\n            drawableMasks[i],\r\n            drawableMaskCounts[i]\r\n          );\r\n          this._clippingContextListForMask.pushBack(clippingContext);\r\n        }\r\n\r\n        clippingContext.addClippedDrawable(i);\r\n\r\n        this._clippingContextListForDraw.pushBack(clippingContext);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * クリッピングコンテキストを作成する。モデル描画時に実行する。\r\n     * @param model モデルのインスタンス\r\n     * @param renderer レンダラのインスタンス\r\n     */\r\n    public setupClippingContext(\r\n      model: CubismModel,\r\n      renderer: CubismRenderer_WebGL\r\n    ): void {\r\n      this._currentFrameNo++;\r\n\r\n      // 全てのクリッピングを用意する\r\n      // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\r\n      let usingClipCount = 0;\r\n      for (\r\n        let clipIndex = 0;\r\n        clipIndex < this._clippingContextListForMask.getSize();\r\n        clipIndex++\r\n      ) {\r\n        // 1つのクリッピングマスクに関して\r\n        const cc: CubismClippingContext = this._clippingContextListForMask.at(\r\n          clipIndex\r\n        );\r\n\r\n        // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\r\n        this.calcClippedDrawTotalBounds(model, cc);\r\n\r\n        if (cc._isUsing) {\r\n          usingClipCount++; // 使用中としてカウント\r\n        }\r\n      }\r\n\r\n      // マスク作成処理\r\n      if (usingClipCount > 0) {\r\n        // 生成したFrameBufferと同じサイズでビューポートを設定\r\n        this.gl.viewport(\r\n          0,\r\n          0,\r\n          this._clippingMaskBufferSize,\r\n          this._clippingMaskBufferSize\r\n        );\r\n\r\n        // マスクをactiveにする\r\n        this._maskRenderTexture = this.getMaskRenderTexture();\r\n\r\n        // モデル描画時にDrawMeshNowに渡される変換(モデルtoワールド座標変換)\r\n        const modelToWorldF: CubismMatrix44 = renderer.getMvpMatrix();\r\n\r\n        renderer.preDraw(); // バッファをクリアする\r\n\r\n        // 各マスクのレイアウトを決定していく\r\n        this.setupLayoutBounds(usingClipCount);\r\n\r\n        // ---------- マスク描画処理 ----------\r\n        // マスク用RenderTextureをactiveにセット\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\r\n\r\n        // マスクをクリアする\r\n        // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\r\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // 実際にマスクを生成する\r\n        // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する\r\n        for (\r\n          let clipIndex = 0;\r\n          clipIndex < this._clippingContextListForMask.getSize();\r\n          clipIndex++\r\n        ) {\r\n          // --- 実際に1つのマスクを描く ---\r\n          const clipContext: CubismClippingContext = this._clippingContextListForMask.at(\r\n            clipIndex\r\n          );\r\n          const allClipedDrawRect: csmRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形\r\n          const layoutBoundsOnTex01: csmRect = clipContext._layoutBounds; // この中にマスクを収める\r\n\r\n          // モデル座標上の矩形を、適宜マージンを付けて使う\r\n          const MARGIN = 0.05;\r\n          this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n          this._tmpBoundsOnModel.expand(\r\n            allClipedDrawRect.width * MARGIN,\r\n            allClipedDrawRect.height * MARGIN\r\n          );\r\n          //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい\r\n\r\n          // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり\r\n          // movePeriod' = movePeriod * scaleX + offX\t\t  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]\r\n          const scaleX: number =\r\n            layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n          const scaleY: number =\r\n            layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n\r\n          // マスク生成時に使う行列を求める\r\n          {\r\n            // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\r\n            this._tmpMatrix.loadIdentity();\r\n            {\r\n              // layout0..1 を -1..1に変換\r\n              this._tmpMatrix.translateRelative(-1.0, -1.0);\r\n              this._tmpMatrix.scaleRelative(2.0, 2.0);\r\n            }\r\n            {\r\n              // view to layout0..1\r\n              this._tmpMatrix.translateRelative(\r\n                layoutBoundsOnTex01.x,\r\n                layoutBoundsOnTex01.y\r\n              );\r\n              this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\r\n              this._tmpMatrix.translateRelative(\r\n                -this._tmpBoundsOnModel.x,\r\n                -this._tmpBoundsOnModel.y\r\n              );\r\n              // new = [translate][scale][translate]\r\n            }\r\n            // tmpMatrixForMaskが計算結果\r\n            this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n          }\r\n\r\n          //--------- draw時の mask 参照用行列を計算\r\n          {\r\n            // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\r\n            this._tmpMatrix.loadIdentity();\r\n            {\r\n              this._tmpMatrix.translateRelative(\r\n                layoutBoundsOnTex01.x,\r\n                layoutBoundsOnTex01.y\r\n              );\r\n              this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\r\n              this._tmpMatrix.translateRelative(\r\n                -this._tmpBoundsOnModel.x,\r\n                -this._tmpBoundsOnModel.y\r\n              );\r\n              // new = [translate][scale][translate]\r\n            }\r\n            this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n          }\r\n          clipContext._matrixForMask.setMatrix(\r\n            this._tmpMatrixForMask.getArray()\r\n          );\r\n          clipContext._matrixForDraw.setMatrix(\r\n            this._tmpMatrixForDraw.getArray()\r\n          );\r\n\r\n          const clipDrawCount: number = clipContext._clippingIdCount;\r\n          for (let i = 0; i < clipDrawCount; i++) {\r\n            const clipDrawIndex: number = clipContext._clippingIdList[i];\r\n\r\n            // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\r\n            if (\r\n              !model.getDrawableDynamicFlagVertexPositionsDidChange(\r\n                clipDrawIndex\r\n              )\r\n            ) {\r\n              continue;\r\n            }\r\n\r\n            renderer.setIsCulling(\r\n              model.getDrawableCulling(clipDrawIndex) != false\r\n            );\r\n\r\n            // 今回専用の変換を適用して描く\r\n            // チャンネルも切り替える必要がある(A,R,G,B)\r\n            renderer.setClippingContextBufferForMask(clipContext);\r\n            renderer.drawMesh(\r\n              model.getDrawableTextureIndices(clipDrawIndex),\r\n              model.getDrawableVertexIndexCount(clipDrawIndex),\r\n              model.getDrawableVertexCount(clipDrawIndex),\r\n              model.getDrawableVertexIndices(clipDrawIndex),\r\n              model.getDrawableVertices(clipDrawIndex),\r\n              model.getDrawableVertexUvs(clipDrawIndex),\r\n              model.getDrawableOpacity(clipDrawIndex),\r\n              CubismBlendMode.CubismBlendMode_Normal, // クリッピングは通常描画を強制\r\n              false // マスク生成時はクリッピングの反転使用は全く関係がない\r\n            );\r\n          }\r\n        }\r\n\r\n        // --- 後処理 ---\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\r\n        renderer.setClippingContextBufferForMask(null);\r\n\r\n        this.gl.viewport(\r\n          s_viewport[0],\r\n          s_viewport[1],\r\n          s_viewport[2],\r\n          s_viewport[3]\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 既にマスクを作っているかを確認\r\n     * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\r\n     * 作っていなければNULLを返す\r\n     * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\r\n     * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\r\n     * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\r\n     */\r\n    public findSameClip(\r\n      drawableMasks: Int32Array,\r\n      drawableMaskCounts: number\r\n    ): CubismClippingContext {\r\n      // 作成済みClippingContextと一致するか確認\r\n      for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n        const clippingContext: CubismClippingContext = this._clippingContextListForMask.at(\r\n          i\r\n        );\r\n        const count: number = clippingContext._clippingIdCount;\r\n\r\n        // 個数が違う場合は別物\r\n        if (count != drawableMaskCounts) {\r\n          continue;\r\n        }\r\n\r\n        let sameCount = 0;\r\n\r\n        // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする\r\n        for (let j = 0; j < count; j++) {\r\n          const clipId: number = clippingContext._clippingIdList[j];\r\n\r\n          for (let k = 0; k < count; k++) {\r\n            if (drawableMasks[k] == clipId) {\r\n              sameCount++;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (sameCount == count) {\r\n          return clippingContext;\r\n        }\r\n      }\r\n\r\n      return null; // 見つからなかった\r\n    }\r\n\r\n    /**\r\n     * クリッピングコンテキストを配置するレイアウト\r\n     * 一つのレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\r\n     * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\r\n     *\r\n     * @param usingClipCount 配置するクリッピングコンテキストの数\r\n     */\r\n    public setupLayoutBounds(usingClipCount: number): void {\r\n      // ひとつのRenderTextureを極力いっぱいに使ってマスクをレイアウトする\r\n      // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する\r\n\r\n      // RGBAを順番に使っていく\r\n      let div: number = usingClipCount / ColorChannelCount; // 1チャンネルに配置する基本のマスク\r\n      let mod: number = usingClipCount % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する\r\n\r\n      // 小数点は切り捨てる\r\n      div = ~~div;\r\n      mod = ~~mod;\r\n\r\n      // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）\r\n      let curClipIndex = 0; // 順番に設定していく\r\n\r\n      for (let channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\r\n        // このチャンネルにレイアウトする数\r\n        const layoutCount: number = div + (channelNo < mod ? 1 : 0);\r\n\r\n        // 分割方法を決定する\r\n        if (layoutCount == 0) {\r\n          // 何もしない\r\n        } else if (layoutCount == 1) {\r\n          // 全てをそのまま使う\r\n          const clipContext: CubismClippingContext = this._clippingContextListForMask.at(\r\n            curClipIndex++\r\n          );\r\n          clipContext._layoutChannelNo = channelNo;\r\n          clipContext._layoutBounds.x = 0.0;\r\n          clipContext._layoutBounds.y = 0.0;\r\n          clipContext._layoutBounds.width = 1.0;\r\n          clipContext._layoutBounds.height = 1.0;\r\n        } else if (layoutCount == 2) {\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos: number = i % 2;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n\r\n            const cc: CubismClippingContext = this._clippingContextListForMask.at(\r\n              curClipIndex++\r\n            );\r\n            cc._layoutChannelNo = channelNo;\r\n\r\n            cc._layoutBounds.x = xpos * 0.5;\r\n            cc._layoutBounds.y = 0.0;\r\n            cc._layoutBounds.width = 0.5;\r\n            cc._layoutBounds.height = 1.0;\r\n            // UVを2つに分解して使う\r\n          }\r\n        } else if (layoutCount <= 4) {\r\n          // 4分割して使う\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos: number = i % 2;\r\n            let ypos: number = i / 2;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n            ypos = ~~ypos;\r\n\r\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\r\n            cc._layoutChannelNo = channelNo;\r\n\r\n            cc._layoutBounds.x = xpos * 0.5;\r\n            cc._layoutBounds.y = ypos * 0.5;\r\n            cc._layoutBounds.width = 0.5;\r\n            cc._layoutBounds.height = 0.5;\r\n          }\r\n        } else if (layoutCount <= 9) {\r\n          // 9分割して使う\r\n          for (let i = 0; i < layoutCount; i++) {\r\n            let xpos = i % 3;\r\n            let ypos = i / 3;\r\n\r\n            // 小数点は切り捨てる\r\n            xpos = ~~xpos;\r\n            ypos = ~~ypos;\r\n\r\n            const cc: CubismClippingContext = this._clippingContextListForMask.at(\r\n              curClipIndex++\r\n            );\r\n            cc._layoutChannelNo = channelNo;\r\n\r\n            cc._layoutBounds.x = xpos / 3.0;\r\n            cc._layoutBounds.y = ypos / 3.0;\r\n            cc._layoutBounds.width = 1.0 / 3.0;\r\n            cc._layoutBounds.height = 1.0 / 3.0;\r\n          }\r\n        } else {\r\n          CubismLogError('not supported mask count : {0}', layoutCount);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * カラーバッファを取得する\r\n     * @return カラーバッファ\r\n     */\r\n    public getColorBuffer(): WebGLTexture {\r\n      return this._colorBuffer;\r\n    }\r\n\r\n    /**\r\n     * 画面描画に使用するクリッピングマスクのリストを取得する\r\n     * @return 画面描画に使用するクリッピングマスクのリスト\r\n     */\r\n    public getClippingContextListForDraw(): csmVector<CubismClippingContext> {\r\n      return this._clippingContextListForDraw;\r\n    }\r\n\r\n    /**\r\n     * クリッピングマスクバッファのサイズを設定する\r\n     * @param size クリッピングマスクバッファのサイズ\r\n     */\r\n    public setClippingMaskBufferSize(size: number): void {\r\n      this._clippingMaskBufferSize = size;\r\n    }\r\n\r\n    /**\r\n     * クリッピングマスクバッファのサイズを取得する\r\n     * @return クリッピングマスクバッファのサイズ\r\n     */\r\n    public getClippingMaskBufferSize(): number {\r\n      return this._clippingMaskBufferSize;\r\n    }\r\n\r\n    public _maskRenderTexture: WebGLFramebuffer; // マスク用レンダーテクスチャのアドレス\r\n    public _colorBuffer: WebGLTexture; // マスク用カラーバッファーのアドレス\r\n    public _currentFrameNo: number; // マスクテクスチャに与えるフレーム番号\r\n\r\n    public _channelColors: csmVector<CubismTextureColor>;\r\n    public _maskTexture: CubismRenderTextureResource; // マスク用のテクスチャリソースのリスト\r\n    public _clippingContextListForMask: csmVector<CubismClippingContext>; // マスク用クリッピングコンテキストのリスト\r\n    public _clippingContextListForDraw: csmVector<CubismClippingContext>; // 描画用クリッピングコンテキストのリスト\r\n    public _clippingMaskBufferSize: number; // クリッピングマスクのバッファサイズ（初期値:256）\r\n\r\n    private _tmpMatrix: CubismMatrix44; // マスク計算用の行列\r\n    private _tmpMatrixForMask: CubismMatrix44; // マスク計算用の行列\r\n    private _tmpMatrixForDraw: CubismMatrix44; // マスク計算用の行列\r\n    private _tmpBoundsOnModel: csmRect; // マスク配置計算用の矩形\r\n\r\n    gl: WebGLRenderingContext; // WebGLレンダリングコンテキスト\r\n  }\r\n\r\n  /**\r\n   * レンダーテクスチャのリソースを定義する構造体\r\n   * クリッピングマスクで使用する\r\n   */\r\n  export class CubismRenderTextureResource {\r\n    /**\r\n     * 引数付きコンストラクタ\r\n     * @param frameNo レンダラーのフレーム番号\r\n     * @param texture テクスチャのアドレス\r\n     */\r\n    public constructor(frameNo: number, texture: WebGLFramebuffer) {\r\n      this.frameNo = frameNo;\r\n      this.texture = texture;\r\n    }\r\n\r\n    public frameNo: number; // レンダラのフレーム番号\r\n    public texture: WebGLFramebuffer; // テクスチャのアドレス\r\n  }\r\n\r\n  /**\r\n   * クリッピングマスクのコンテキスト\r\n   */\r\n  export class CubismClippingContext {\r\n    /**\r\n     * 引数付きコンストラクタ\r\n     */\r\n    public constructor(\r\n      manager: CubismClippingManager_WebGL,\r\n      clippingDrawableIndices: Int32Array,\r\n      clipCount: number\r\n    ) {\r\n      this._owner = manager;\r\n\r\n      // クリップしている（＝マスク用の）Drawableのインデックスリスト\r\n      this._clippingIdList = clippingDrawableIndices;\r\n\r\n      // マスクの数\r\n      this._clippingIdCount = clipCount;\r\n\r\n      this._allClippedDrawRect = new csmRect();\r\n      this._layoutBounds = new csmRect();\r\n\r\n      this._clippedDrawableIndexList = [];\r\n\r\n      this._matrixForMask = new CubismMatrix44();\r\n      this._matrixForDraw = new CubismMatrix44();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      if (this._layoutBounds != null) {\r\n        this._layoutBounds = null;\r\n      }\r\n\r\n      if (this._allClippedDrawRect != null) {\r\n        this._allClippedDrawRect = null;\r\n      }\r\n\r\n      if (this._clippedDrawableIndexList != null) {\r\n        this._clippedDrawableIndexList = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * このマスクにクリップされる描画オブジェクトを追加する\r\n     *\r\n     * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\r\n     */\r\n    public addClippedDrawable(drawableIndex: number) {\r\n      this._clippedDrawableIndexList.push(drawableIndex);\r\n    }\r\n\r\n    /**\r\n     * このマスクを管理するマネージャのインスタンスを取得する\r\n     * @return クリッピングマネージャのインスタンス\r\n     */\r\n    public getClippingManager(): CubismClippingManager_WebGL {\r\n      return this._owner;\r\n    }\r\n\r\n    public setGl(gl: WebGLRenderingContext): void {\r\n      this._owner.setGL(gl);\r\n    }\r\n\r\n    public _isUsing: boolean; // 現在の描画状態でマスクの準備が必要ならtrue\r\n    public readonly _clippingIdList: Int32Array; // クリッピングマスクのIDリスト\r\n    public _clippingIdCount: number; // クリッピングマスクの数\r\n    public _layoutChannelNo: number; // RGBAのいずれのチャンネルにこのクリップを配置するか（0:R, 1:G, 2:B, 3:A）\r\n    public _layoutBounds: csmRect; // マスク用チャンネルのどの領域にマスクを入れるか（View座標-1~1, UVは0~1に直す）\r\n    public _allClippedDrawRect: csmRect; // このクリッピングで、クリッピングされるすべての描画オブジェクトの囲み矩形（毎回更新）\r\n    public _matrixForMask: CubismMatrix44; // マスクの位置計算結果を保持する行列\r\n    public _matrixForDraw: CubismMatrix44; // 描画オブジェクトの位置計算結果を保持する行列\r\n    public _clippedDrawableIndexList: number[]; // このマスクにクリップされる描画オブジェクトのリスト\r\n\r\n    private _owner: CubismClippingManager_WebGL; // このマスクを管理しているマネージャのインスタンス\r\n  }\r\n\r\n  /**\r\n   * WebGL用のシェーダープログラムを生成・破棄するクラス\r\n   * シングルトンなクラスであり、CubismShader_WebGL.getInstanceからアクセスする。\r\n   */\r\n  export class CubismShader_WebGL {\r\n    /**\r\n     * インスタンスを取得する（シングルトン）\r\n     * @return インスタンス\r\n     */\r\n    public static getInstance(): CubismShader_WebGL {\r\n      if (s_instance == null) {\r\n        s_instance = new CubismShader_WebGL();\r\n\r\n        return s_instance;\r\n      }\r\n      return s_instance;\r\n    }\r\n\r\n    /**\r\n     * インスタンスを開放する（シングルトン）\r\n     */\r\n    public static deleteInstance(): void {\r\n      if (s_instance) {\r\n        s_instance.release();\r\n        s_instance = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * privateなコンストラクタ\r\n     */\r\n    private constructor() {\r\n      this._shaderSets = new csmVector<CubismShaderSet>();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      this.releaseShaderProgram();\r\n    }\r\n\r\n    /**\r\n     * シェーダープログラムの一連のセットアップを実行する\r\n     * @param renderer レンダラのインスタンス\r\n     * @param textureId GPUのテクスチャID\r\n     * @param vertexCount ポリゴンメッシュの頂点数\r\n     * @param vertexArray ポリゴンメッシュの頂点配列\r\n     * @param indexArray インデックスバッファの頂点配列\r\n     * @param uvArray uv配列\r\n     * @param opacity 不透明度\r\n     * @param colorBlendMode カラーブレンディングのタイプ\r\n     * @param baseColor ベースカラー\r\n     * @param isPremultipliedAlpha 乗算済みアルファかどうか\r\n     * @param matrix4x4 Model-View-Projection行列\r\n     * @param invertedMask マスクを反転して使用するフラグ\r\n     */\r\n    public setupShaderProgram(\r\n      renderer: CubismRenderer_WebGL,\r\n      textureId: WebGLTexture,\r\n      vertexCount: number,\r\n      vertexArray: Float32Array,\r\n      indexArray: Uint16Array,\r\n      uvArray: Float32Array,\r\n      bufferData: {\r\n        vertex: WebGLBuffer;\r\n        uv: WebGLBuffer;\r\n        index: WebGLBuffer;\r\n      },\r\n      opacity: number,\r\n      colorBlendMode: CubismBlendMode,\r\n      baseColor: CubismTextureColor,\r\n      isPremultipliedAlpha: boolean,\r\n      matrix4x4: CubismMatrix44,\r\n      invertedMask: boolean\r\n    ): void {\r\n      if (!isPremultipliedAlpha) {\r\n        CubismLogError('NoPremultipliedAlpha is not allowed');\r\n      }\r\n\r\n      if (this._shaderSets.getSize() == 0) {\r\n        this.generateShaders();\r\n      }\r\n\r\n      // Blending\r\n      let SRC_COLOR: number;\r\n      let DST_COLOR: number;\r\n      let SRC_ALPHA: number;\r\n      let DST_ALPHA: number;\r\n\r\n      if (renderer.getClippingContextBufferForMask() != null) {\r\n        // マスク生成時\r\n        const shaderSet: CubismShaderSet = this._shaderSets.at(\r\n          ShaderNames.ShaderNames_SetupMask\r\n        );\r\n        this.gl.useProgram(shaderSet.shaderProgram);\r\n\r\n        // テクスチャ設定\r\n        this.gl.activeTexture(this.gl.TEXTURE0);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n        this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n\r\n        // 頂点配列の設定(VBO)\r\n        if (bufferData.vertex == null) {\r\n          bufferData.vertex = this.gl.createBuffer();\r\n        }\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          vertexArray,\r\n          this.gl.DYNAMIC_DRAW\r\n        );\r\n        this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n        this.gl.vertexAttribPointer(\r\n          shaderSet.attributePositionLocation,\r\n          2,\r\n          this.gl.FLOAT,\r\n          false,\r\n          0,\r\n          0\r\n        );\r\n\r\n        // テクスチャ頂点の設定\r\n        if (bufferData.uv == null) {\r\n          bufferData.uv = this.gl.createBuffer();\r\n        }\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n        this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n        this.gl.vertexAttribPointer(\r\n          shaderSet.attributeTexCoordLocation,\r\n          2,\r\n          this.gl.FLOAT,\r\n          false,\r\n          0,\r\n          0\r\n        );\r\n\r\n        // チャンネル\r\n        const channelNo: number = renderer.getClippingContextBufferForMask()\r\n          ._layoutChannelNo;\r\n        const colorChannel: CubismTextureColor = renderer\r\n          .getClippingContextBufferForMask()\r\n          .getClippingManager()\r\n          .getChannelFlagAsColor(channelNo);\r\n        this.gl.uniform4f(\r\n          shaderSet.uniformChannelFlagLocation,\r\n          colorChannel.R,\r\n          colorChannel.G,\r\n          colorChannel.B,\r\n          colorChannel.A\r\n        );\r\n\r\n        this.gl.uniformMatrix4fv(\r\n          shaderSet.uniformClipMatrixLocation,\r\n          false,\r\n          renderer.getClippingContextBufferForMask()._matrixForMask.getArray()\r\n        );\r\n\r\n        const rect: csmRect = renderer.getClippingContextBufferForMask()\r\n          ._layoutBounds;\r\n\r\n        this.gl.uniform4f(\r\n          shaderSet.uniformBaseColorLocation,\r\n          rect.x * 2.0 - 1.0,\r\n          rect.y * 2.0 - 1.0,\r\n          rect.getRight() * 2.0 - 1.0,\r\n          rect.getBottom() * 2.0 - 1.0\r\n        );\r\n\r\n        SRC_COLOR = this.gl.ZERO;\r\n        DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\r\n        SRC_ALPHA = this.gl.ZERO;\r\n        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n      } // マスク生成以外の場合\r\n      else {\r\n        const masked: boolean =\r\n          renderer.getClippingContextBufferForDraw() != null; // この描画オブジェクトはマスク対象か\r\n        const offset: number = masked ? (invertedMask ? 2 : 1) : 0;\r\n\r\n        let shaderSet: CubismShaderSet = new CubismShaderSet();\r\n\r\n        switch (colorBlendMode) {\r\n          case CubismBlendMode.CubismBlendMode_Normal:\r\n          default:\r\n            shaderSet = this._shaderSets.at(\r\n              ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\r\n            );\r\n            SRC_COLOR = this.gl.ONE;\r\n            DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n            SRC_ALPHA = this.gl.ONE;\r\n            DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n            break;\r\n\r\n          case CubismBlendMode.CubismBlendMode_Additive:\r\n            shaderSet = this._shaderSets.at(\r\n              ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\r\n            );\r\n            SRC_COLOR = this.gl.ONE;\r\n            DST_COLOR = this.gl.ONE;\r\n            SRC_ALPHA = this.gl.ZERO;\r\n            DST_ALPHA = this.gl.ONE;\r\n            break;\r\n\r\n          case CubismBlendMode.CubismBlendMode_Multiplicative:\r\n            shaderSet = this._shaderSets.at(\r\n              ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\r\n            );\r\n            SRC_COLOR = this.gl.DST_COLOR;\r\n            DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n            SRC_ALPHA = this.gl.ZERO;\r\n            DST_ALPHA = this.gl.ONE;\r\n            break;\r\n        }\r\n\r\n        this.gl.useProgram(shaderSet.shaderProgram);\r\n\r\n        // 頂点配列の設定\r\n        if (bufferData.vertex == null) {\r\n          bufferData.vertex = this.gl.createBuffer();\r\n        }\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          vertexArray,\r\n          this.gl.DYNAMIC_DRAW\r\n        );\r\n        this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n        this.gl.vertexAttribPointer(\r\n          shaderSet.attributePositionLocation,\r\n          2,\r\n          this.gl.FLOAT,\r\n          false,\r\n          0,\r\n          0\r\n        );\r\n\r\n        // テクスチャ頂点の設定\r\n        if (bufferData.uv == null) {\r\n          bufferData.uv = this.gl.createBuffer();\r\n        }\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n        this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n        this.gl.vertexAttribPointer(\r\n          shaderSet.attributeTexCoordLocation,\r\n          2,\r\n          this.gl.FLOAT,\r\n          false,\r\n          0,\r\n          0\r\n        );\r\n\r\n        if (masked) {\r\n          this.gl.activeTexture(this.gl.TEXTURE1);\r\n          const tex: WebGLTexture = renderer\r\n            .getClippingContextBufferForDraw()\r\n            .getClippingManager()\r\n            .getColorBuffer();\r\n          this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\r\n          this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\r\n\r\n          // view座標をClippingContextの座標に変換するための行列を設定\r\n          this.gl.uniformMatrix4fv(\r\n            shaderSet.uniformClipMatrixLocation,\r\n            false,\r\n            renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray()\r\n          );\r\n\r\n          // 使用するカラーチャンネルを設定\r\n          const channelNo: number = renderer.getClippingContextBufferForDraw()\r\n            ._layoutChannelNo;\r\n          const colorChannel: CubismTextureColor = renderer\r\n            .getClippingContextBufferForDraw()\r\n            .getClippingManager()\r\n            .getChannelFlagAsColor(channelNo);\r\n          this.gl.uniform4f(\r\n            shaderSet.uniformChannelFlagLocation,\r\n            colorChannel.R,\r\n            colorChannel.G,\r\n            colorChannel.B,\r\n            colorChannel.A\r\n          );\r\n        }\r\n\r\n        // テクスチャ設定\r\n        this.gl.activeTexture(this.gl.TEXTURE0);\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n        this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n\r\n        // 座標変換\r\n        this.gl.uniformMatrix4fv(\r\n          shaderSet.uniformMatrixLocation,\r\n          false,\r\n          matrix4x4.getArray()\r\n        );\r\n\r\n        this.gl.uniform4f(\r\n          shaderSet.uniformBaseColorLocation,\r\n          baseColor.R,\r\n          baseColor.G,\r\n          baseColor.B,\r\n          baseColor.A\r\n        );\r\n      }\r\n\r\n      // IBOを作成し、データを転送\r\n      if (bufferData.index == null) {\r\n        bufferData.index = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\r\n      this.gl.bufferData(\r\n        this.gl.ELEMENT_ARRAY_BUFFER,\r\n        indexArray,\r\n        this.gl.DYNAMIC_DRAW\r\n      );\r\n      this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\r\n    }\r\n\r\n    /**\r\n     * シェーダープログラムを解放する\r\n     */\r\n    public releaseShaderProgram(): void {\r\n      for (let i = 0; i < this._shaderSets.getSize(); i++) {\r\n        this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\r\n        this._shaderSets.at(i).shaderProgram = 0;\r\n        this._shaderSets.set(i, void 0);\r\n        this._shaderSets.set(i, null);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * シェーダープログラムを初期化する\r\n     * @param vertShaderSrc 頂点シェーダのソース\r\n     * @param fragShaderSrc フラグメントシェーダのソース\r\n     */\r\n    public generateShaders(): void {\r\n      for (let i = 0; i < shaderCount; i++) {\r\n        this._shaderSets.pushBack(new CubismShaderSet());\r\n      }\r\n\r\n      this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(\r\n        vertexShaderSrcSetupMask,\r\n        fragmentShaderSrcsetupMask\r\n      );\r\n\r\n      this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(\r\n        vertexShaderSrc,\r\n        fragmentShaderSrcPremultipliedAlpha\r\n      );\r\n      this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(\r\n        vertexShaderSrcMasked,\r\n        fragmentShaderSrcMaskPremultipliedAlpha\r\n      );\r\n      this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(\r\n        vertexShaderSrcMasked,\r\n        fragmentShaderSrcMaskInvertedPremultipliedAlpha\r\n      );\r\n\r\n      // 加算も通常と同じシェーダーを利用する\r\n      this._shaderSets.at(4).shaderProgram = this._shaderSets.at(\r\n        1\r\n      ).shaderProgram;\r\n      this._shaderSets.at(5).shaderProgram = this._shaderSets.at(\r\n        2\r\n      ).shaderProgram;\r\n      this._shaderSets.at(6).shaderProgram = this._shaderSets.at(\r\n        3\r\n      ).shaderProgram;\r\n\r\n      // 乗算も通常と同じシェーダーを利用する\r\n      this._shaderSets.at(7).shaderProgram = this._shaderSets.at(\r\n        1\r\n      ).shaderProgram;\r\n      this._shaderSets.at(8).shaderProgram = this._shaderSets.at(\r\n        2\r\n      ).shaderProgram;\r\n      this._shaderSets.at(9).shaderProgram = this._shaderSets.at(\r\n        3\r\n      ).shaderProgram;\r\n\r\n      // SetupMask\r\n      this._shaderSets.at(\r\n        0\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        0\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        0\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        0\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        0\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        0\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(0).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 通常（PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        1\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        1\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        1\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        1\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(1).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 通常（クリッピング、PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        2\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        2\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        2\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        2\r\n      ).samplerTexture1Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        's_texture1'\r\n      );\r\n      this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        2\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        2\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        2\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(2).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 通常（クリッピング・反転, PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        3\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        3\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        3\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        3\r\n      ).samplerTexture1Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        's_texture1'\r\n      );\r\n      this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        3\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        3\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        3\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(3).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 加算（PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        4\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        4\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        4\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        4\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(4).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 加算（クリッピング、PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        5\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        5\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        5\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        5\r\n      ).samplerTexture1Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        's_texture1'\r\n      );\r\n      this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        5\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        5\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        5\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(5).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 加算（クリッピング・反転、PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        6\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        6\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        6\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        6\r\n      ).samplerTexture1Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        's_texture1'\r\n      );\r\n      this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        6\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        6\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        6\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(6).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 乗算（PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        7\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        7\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        7\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        7\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(7).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 乗算（クリッピング、PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        8\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        8\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        8\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        8\r\n      ).samplerTexture1Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        's_texture1'\r\n      );\r\n      this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        8\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        8\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        8\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(8).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n\r\n      // 乗算（クリッピング・反転、PremultipliedAlpha）\r\n      this._shaderSets.at(\r\n        9\r\n      ).attributePositionLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'a_position'\r\n      );\r\n      this._shaderSets.at(\r\n        9\r\n      ).attributeTexCoordLocation = this.gl.getAttribLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'a_texCoord'\r\n      );\r\n      this._shaderSets.at(\r\n        9\r\n      ).samplerTexture0Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        's_texture0'\r\n      );\r\n      this._shaderSets.at(\r\n        9\r\n      ).samplerTexture1Location = this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        's_texture1'\r\n      );\r\n      this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_matrix'\r\n      );\r\n      this._shaderSets.at(\r\n        9\r\n      ).uniformClipMatrixLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_clipMatrix'\r\n      );\r\n      this._shaderSets.at(\r\n        9\r\n      ).uniformChannelFlagLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_channelFlag'\r\n      );\r\n      this._shaderSets.at(\r\n        9\r\n      ).uniformBaseColorLocation = this.gl.getUniformLocation(\r\n        this._shaderSets.at(9).shaderProgram,\r\n        'u_baseColor'\r\n      );\r\n    }\r\n\r\n    /**\r\n     * シェーダプログラムをロードしてアドレスを返す\r\n     * @param vertexShaderSource    頂点シェーダのソース\r\n     * @param fragmentShaderSource  フラグメントシェーダのソース\r\n     * @return シェーダプログラムのアドレス\r\n     */\r\n    public loadShaderProgram(\r\n      vertexShaderSource: string,\r\n      fragmentShaderSource: string\r\n    ): WebGLProgram {\r\n      // Create Shader Program\r\n      let shaderProgram: WebGLProgram = this.gl.createProgram();\r\n\r\n      let vertShader = this.compileShaderSource(\r\n        this.gl.VERTEX_SHADER,\r\n        vertexShaderSource\r\n      );\r\n\r\n      if (!vertShader) {\r\n        CubismLogError('Vertex shader compile error!');\r\n        return 0;\r\n      }\r\n\r\n      let fragShader = this.compileShaderSource(\r\n        this.gl.FRAGMENT_SHADER,\r\n        fragmentShaderSource\r\n      );\r\n      if (!fragShader) {\r\n        CubismLogError('Vertex shader compile error!');\r\n        return 0;\r\n      }\r\n\r\n      // Attach vertex shader to program\r\n      this.gl.attachShader(shaderProgram, vertShader);\r\n\r\n      // Attach fragment shader to program\r\n      this.gl.attachShader(shaderProgram, fragShader);\r\n\r\n      // link program\r\n      this.gl.linkProgram(shaderProgram);\r\n      const linkStatus = this.gl.getProgramParameter(\r\n        shaderProgram,\r\n        this.gl.LINK_STATUS\r\n      );\r\n\r\n      // リンクに失敗したらシェーダーを削除\r\n      if (!linkStatus) {\r\n        CubismLogError('Failed to link program: {0}', shaderProgram);\r\n\r\n        this.gl.deleteShader(vertShader);\r\n        vertShader = 0;\r\n\r\n        this.gl.deleteShader(fragShader);\r\n        fragShader = 0;\r\n\r\n        if (shaderProgram) {\r\n          this.gl.deleteProgram(shaderProgram);\r\n          shaderProgram = 0;\r\n        }\r\n\r\n        return 0;\r\n      }\r\n\r\n      // Release vertex and fragment shaders.\r\n      this.gl.deleteShader(vertShader);\r\n      this.gl.deleteShader(fragShader);\r\n\r\n      return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * シェーダープログラムをコンパイルする\r\n     * @param shaderType シェーダタイプ(Vertex/Fragment)\r\n     * @param shaderSource シェーダソースコード\r\n     *\r\n     * @return コンパイルされたシェーダープログラム\r\n     */\r\n    public compileShaderSource(\r\n      shaderType: GLenum,\r\n      shaderSource: string\r\n    ): WebGLProgram {\r\n      const source: string = shaderSource;\r\n\r\n      const shader: WebGLProgram = this.gl.createShader(shaderType);\r\n      this.gl.shaderSource(shader, source);\r\n      this.gl.compileShader(shader);\r\n\r\n      if (!shader) {\r\n        const log: string = this.gl.getShaderInfoLog(shader);\r\n        CubismLogError('Shader compile log: {0} ', log);\r\n      }\r\n\r\n      const status: any = this.gl.getShaderParameter(\r\n        shader,\r\n        this.gl.COMPILE_STATUS\r\n      );\r\n      if (!status) {\r\n        this.gl.deleteShader(shader);\r\n        return null;\r\n      }\r\n\r\n      return shader;\r\n    }\r\n\r\n    public setGl(gl: WebGLRenderingContext): void {\r\n      this.gl = gl;\r\n    }\r\n\r\n    _shaderSets: csmVector<CubismShaderSet>; // ロードしたシェーダープログラムを保持する変数\r\n    gl: WebGLRenderingContext; // webglコンテキスト\r\n  }\r\n\r\n  /**\r\n   * CubismShader_WebGLのインナークラス\r\n   */\r\n  export class CubismShaderSet {\r\n    shaderProgram: WebGLProgram; // シェーダープログラムのアドレス\r\n    attributePositionLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（Position）\r\n    attributeTexCoordLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（TexCoord）\r\n    uniformMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Matrix）\r\n    uniformClipMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ClipMatrix）\r\n    samplerTexture0Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture0）\r\n    samplerTexture1Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture1）\r\n    uniformBaseColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（BaseColor）\r\n    uniformChannelFlagLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ChannelFlag）\r\n  }\r\n\r\n  export enum ShaderNames {\r\n    // SetupMask\r\n    ShaderNames_SetupMask,\r\n\r\n    // Normal\r\n    ShaderNames_NormalPremultipliedAlpha,\r\n    ShaderNames_NormalMaskedPremultipliedAlpha,\r\n    ShaderNames_NomralMaskedInvertedPremultipliedAlpha,\r\n\r\n    // Add\r\n    ShaderNames_AddPremultipliedAlpha,\r\n    ShaderNames_AddMaskedPremultipliedAlpha,\r\n    ShaderNames_AddMaskedPremultipliedAlphaInverted,\r\n\r\n    // Mult\r\n    ShaderNames_MultPremultipliedAlpha,\r\n    ShaderNames_MultMaskedPremultipliedAlpha,\r\n    ShaderNames_MultMaskedPremultipliedAlphaInverted\r\n  }\r\n\r\n  export const vertexShaderSrcSetupMask =\r\n    'attribute vec4     a_position;' +\r\n    'attribute vec2     a_texCoord;' +\r\n    'varying vec2       v_texCoord;' +\r\n    'varying vec4       v_myPos;' +\r\n    'uniform mat4       u_clipMatrix;' +\r\n    'void main()' +\r\n    '{' +\r\n    '   gl_Position = u_clipMatrix * a_position;' +\r\n    '   v_myPos = u_clipMatrix * a_position;' +\r\n    '   v_texCoord = a_texCoord;' +\r\n    '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n    '}';\r\n  export const fragmentShaderSrcsetupMask =\r\n    'precision mediump float;' +\r\n    'varying vec2       v_texCoord;' +\r\n    'varying vec4       v_myPos;' +\r\n    'uniform vec4       u_baseColor;' +\r\n    'uniform vec4       u_channelFlag;' +\r\n    'uniform sampler2D  s_texture0;' +\r\n    'void main()' +\r\n    '{' +\r\n    '   float isInside = ' +\r\n    '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\r\n    '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\r\n    '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\r\n    '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\r\n    '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\r\n    '}';\r\n\r\n  //----- バーテックスシェーダプログラム -----\r\n  // Normal & Add & Mult 共通\r\n  export const vertexShaderSrc =\r\n    'attribute vec4     a_position;' + //v.vertex\r\n    'attribute vec2     a_texCoord;' + //v.texcoord\r\n    'varying vec2       v_texCoord;' + //v2f.texcoord\r\n    'uniform mat4       u_matrix;' +\r\n    'void main()' +\r\n    '{' +\r\n    '   gl_Position = u_matrix * a_position;' +\r\n    '   v_texCoord = a_texCoord;' +\r\n    '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n    '}';\r\n\r\n  // Normal & Add & Mult 共通（クリッピングされたものの描画用）\r\n  export const vertexShaderSrcMasked =\r\n    'attribute vec4     a_position;' +\r\n    'attribute vec2     a_texCoord;' +\r\n    'varying vec2       v_texCoord;' +\r\n    'varying vec4       v_clipPos;' +\r\n    'uniform mat4       u_matrix;' +\r\n    'uniform mat4       u_clipMatrix;' +\r\n    'void main()' +\r\n    '{' +\r\n    '   gl_Position = u_matrix * a_position;' +\r\n    '   v_clipPos = u_clipMatrix * a_position;' +\r\n    '   v_texCoord = a_texCoord;' +\r\n    '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n    '}';\r\n\r\n  //----- フラグメントシェーダプログラム -----\r\n  // Normal & Add & Mult 共通 （PremultipliedAlpha）\r\n  export const fragmentShaderSrcPremultipliedAlpha =\r\n    'precision mediump float;' +\r\n    'varying vec2       v_texCoord;' + //v2f.texcoord\r\n    'uniform vec4       u_baseColor;' +\r\n    'uniform sampler2D  s_texture0;' + //_MainTex\r\n    'void main()' +\r\n    '{' +\r\n    '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\r\n    '}';\r\n\r\n  // Normal （クリッピングされたものの描画用、PremultipliedAlpha兼用）\r\n  export const fragmentShaderSrcMaskPremultipliedAlpha =\r\n    'precision mediump float;' +\r\n    'varying vec2       v_texCoord;' +\r\n    'varying vec4       v_clipPos;' +\r\n    'uniform vec4       u_baseColor;' +\r\n    'uniform vec4       u_channelFlag;' +\r\n    'uniform sampler2D  s_texture0;' +\r\n    'uniform sampler2D  s_texture1;' +\r\n    'void main()' +\r\n    '{' +\r\n    '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\r\n    '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n    '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n    '   col_formask = col_formask * maskVal;' +\r\n    '   gl_FragColor = col_formask;' +\r\n    '}';\r\n\r\n  // Normal & Add & Mult 共通（クリッピングされて反転使用の描画用、PremultipliedAlphaの場合）\r\n  export const fragmentShaderSrcMaskInvertedPremultipliedAlpha =\r\n    'precision mediump float;' +\r\n    'varying vec2 v_texCoord;' +\r\n    'varying vec4 v_clipPos;' +\r\n    'uniform sampler2D s_texture0;' +\r\n    'uniform sampler2D s_texture1;' +\r\n    'uniform vec4 u_channelFlag;' +\r\n    'uniform vec4 u_baseColor;' +\r\n    'void main()' +\r\n    '{' +\r\n    'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' +\r\n    'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n    'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n    'col_formask = col_formask * (1.0 - maskVal);' +\r\n    'gl_FragColor = col_formask;' +\r\n    '}';\r\n\r\n  /**\r\n   * WebGL用の描画命令を実装したクラス\r\n   */\r\n  export class CubismRenderer_WebGL extends CubismRenderer {\r\n    /**\r\n     * レンダラの初期化処理を実行する\r\n     * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\r\n     *\r\n     * @param model モデルのインスタンス\r\n     */\r\n    public initialize(model: CubismModel): void {\r\n      if (model.isUsingMasking()) {\r\n        this._clippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化\r\n        this._clippingManager.initialize(\r\n          model,\r\n          model.getDrawableCount(),\r\n          model.getDrawableMasks(),\r\n          model.getDrawableMaskCounts()\r\n        );\r\n      }\r\n\r\n      this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\r\n\r\n      super.initialize(model); // 親クラスの処理を呼ぶ\r\n    }\r\n\r\n    /**\r\n     * WebGLテクスチャのバインド処理\r\n     * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\r\n     * @param modelTextureNo セットするモデルテクスチャの番号\r\n     * @param glTextureNo WebGLテクスチャの番号\r\n     */\r\n    public bindTexture(modelTextureNo: number, glTexture: WebGLTexture): void {\r\n      this._textures.setValue(modelTextureNo, glTexture);\r\n    }\r\n\r\n    /**\r\n     * WebGLにバインドされたテクスチャのリストを取得する\r\n     * @return テクスチャのリスト\r\n     */\r\n    public getBindedTextures(): csmMap<number, WebGLTexture> {\r\n      return this._textures;\r\n    }\r\n\r\n    /**\r\n     * クリッピングマスクバッファのサイズを設定する\r\n     * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\r\n     * @param size クリッピングマスクバッファのサイズ\r\n     */\r\n    public setClippingMaskBufferSize(size: number) {\r\n      // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する\r\n      this._clippingManager.release();\r\n      this._clippingManager = void 0;\r\n      this._clippingManager = null;\r\n\r\n      this._clippingManager = new CubismClippingManager_WebGL();\r\n\r\n      this._clippingManager.setClippingMaskBufferSize(size);\r\n\r\n      this._clippingManager.initialize(\r\n        this.getModel(),\r\n        this.getModel().getDrawableCount(),\r\n        this.getModel().getDrawableMasks(),\r\n        this.getModel().getDrawableMaskCounts()\r\n      );\r\n    }\r\n\r\n    /**\r\n     * クリッピングマスクバッファのサイズを取得する\r\n     * @return クリッピングマスクバッファのサイズ\r\n     */\r\n    public getClippingMaskBufferSize(): number {\r\n      return this._clippingManager.getClippingMaskBufferSize();\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      super();\r\n      this._clippingContextBufferForMask = null;\r\n      this._clippingContextBufferForDraw = null;\r\n      this._clippingManager = new CubismClippingManager_WebGL();\r\n      this.firstDraw = true;\r\n      this._textures = new csmMap<number, number>();\r\n      this._sortedDrawableIndexList = new csmVector<number>();\r\n      this._bufferData = {\r\n        vertex: WebGLBuffer = null,\r\n        uv: WebGLBuffer = null,\r\n        index: WebGLBuffer = null\r\n      };\r\n\r\n      // テクスチャ対応マップの容量を確保しておく\r\n      this._textures.prepareCapacity(32, true);\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      this._clippingManager.release();\r\n      this._clippingManager = void 0;\r\n      this._clippingManager = null;\r\n\r\n      this.gl.deleteBuffer(this._bufferData.vertex);\r\n      this._bufferData.vertex = null;\r\n      this.gl.deleteBuffer(this._bufferData.uv);\r\n      this._bufferData.uv = null;\r\n      this.gl.deleteBuffer(this._bufferData.index);\r\n      this._bufferData.index = null;\r\n      this._bufferData = null;\r\n\r\n      this._textures = null;\r\n    }\r\n\r\n    /**\r\n     * モデルを描画する実際の処理\r\n     */\r\n    public doDrawModel(): void {\r\n      //------------ クリッピングマスク・バッファ前処理方式の場合 ------------\r\n      if (this._clippingManager != null) {\r\n        this.preDraw();\r\n        this._clippingManager.setupClippingContext(this.getModel(), this);\r\n      }\r\n\r\n      // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!\r\n      this.preDraw();\r\n\r\n      const drawableCount: number = this.getModel().getDrawableCount();\r\n      const renderOrder: Int32Array = this.getModel().getDrawableRenderOrders();\r\n\r\n      // インデックスを描画順でソート\r\n      for (let i = 0; i < drawableCount; ++i) {\r\n        const order: number = renderOrder[i];\r\n        this._sortedDrawableIndexList.set(order, i);\r\n      }\r\n\r\n      // 描画\r\n      for (let i = 0; i < drawableCount; ++i) {\r\n        const drawableIndex: number = this._sortedDrawableIndexList.at(i);\r\n\r\n        // Drawableが表示状態でなければ処理をパスする\r\n        if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\r\n          continue;\r\n        }\r\n\r\n        // クリッピングマスクをセットする\r\n        this.setClippingContextBufferForDraw(\r\n          this._clippingManager != null\r\n            ? this._clippingManager\r\n                .getClippingContextListForDraw()\r\n                .at(drawableIndex)\r\n            : null\r\n        );\r\n\r\n        this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\r\n\r\n        this.drawMesh(\r\n          this.getModel().getDrawableTextureIndices(drawableIndex),\r\n          this.getModel().getDrawableVertexIndexCount(drawableIndex),\r\n          this.getModel().getDrawableVertexCount(drawableIndex),\r\n          this.getModel().getDrawableVertexIndices(drawableIndex),\r\n          this.getModel().getDrawableVertices(drawableIndex),\r\n          this.getModel().getDrawableVertexUvs(drawableIndex),\r\n          this.getModel().getDrawableOpacity(drawableIndex),\r\n          this.getModel().getDrawableBlendMode(drawableIndex),\r\n          this.getModel().getDrawableInvertedMaskBit(drawableIndex)\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * [オーバーライド]\r\n     * 描画オブジェクト（アートメッシュ）を描画する。\r\n     * ポリゴンメッシュとテクスチャ番号をセットで渡す。\r\n     * @param textureNo 描画するテクスチャ番号\r\n     * @param indexCount 描画オブジェクトのインデックス値\r\n     * @param vertexCount ポリゴンメッシュの頂点数\r\n     * @param indexArray ポリゴンメッシュのインデックス配列\r\n     * @param vertexArray ポリゴンメッシュの頂点配列\r\n     * @param uvArray uv配列\r\n     * @param opacity 不透明度\r\n     * @param colorBlendMode カラー合成タイプ\r\n     * @param invertedMask マスク使用時のマスクの反転使用\r\n     */\r\n    public drawMesh(\r\n      textureNo: number,\r\n      indexCount: number,\r\n      vertexCount: number,\r\n      indexArray: Uint16Array,\r\n      vertexArray: Float32Array,\r\n      uvArray: Float32Array,\r\n      opacity: number,\r\n      colorBlendMode: CubismBlendMode,\r\n      invertedMask: boolean\r\n    ): void {\r\n      // 裏面描画の有効・無効\r\n      if (this.isCulling()) {\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n      } else {\r\n        this.gl.disable(this.gl.CULL_FACE);\r\n      }\r\n\r\n      this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\r\n\r\n      const modelColorRGBA: CubismTextureColor = this.getModelColor();\r\n\r\n      if (this.getClippingContextBufferForMask() == null) {\r\n        // マスク生成時以外\r\n        modelColorRGBA.A *= opacity;\r\n        if (this.isPremultipliedAlpha()) {\r\n          modelColorRGBA.R *= modelColorRGBA.A;\r\n          modelColorRGBA.G *= modelColorRGBA.A;\r\n          modelColorRGBA.B *= modelColorRGBA.A;\r\n        }\r\n      }\r\n\r\n      let drawtexture: WebGLTexture; // シェーダに渡すテクスチャ\r\n\r\n      // テクスチャマップからバインド済みテクスチャＩＤを取得\r\n      // バインドされていなければダミーのテクスチャIDをセットする\r\n      if (this._textures.getValue(textureNo) != null) {\r\n        drawtexture = this._textures.getValue(textureNo);\r\n      } else {\r\n        drawtexture = null;\r\n      }\r\n\r\n      CubismShader_WebGL.getInstance().setupShaderProgram(\r\n        this,\r\n        drawtexture,\r\n        vertexCount,\r\n        vertexArray,\r\n        indexArray,\r\n        uvArray,\r\n        this._bufferData,\r\n        opacity,\r\n        colorBlendMode,\r\n        modelColorRGBA,\r\n        this.isPremultipliedAlpha(),\r\n        this.getMvpMatrix(),\r\n        invertedMask\r\n      );\r\n\r\n      // ポリゴンメッシュを描画する\r\n      this.gl.drawElements(\r\n        this.gl.TRIANGLES,\r\n        indexCount,\r\n        this.gl.UNSIGNED_SHORT,\r\n        0\r\n      );\r\n\r\n      // 後処理\r\n      this.gl.useProgram(null);\r\n      this.setClippingContextBufferForDraw(null);\r\n      this.setClippingContextBufferForMask(null);\r\n    }\r\n\r\n    /**\r\n     * レンダラが保持する静的なリソースを解放する\r\n     * WebGLの静的なシェーダープログラムを解放する\r\n     */\r\n    public static doStaticRelease(): void {\r\n      CubismShader_WebGL.deleteInstance();\r\n    }\r\n\r\n    /**\r\n     * レンダーステートを設定する\r\n     * @param fbo アプリケーション側で指定しているフレームバッファ\r\n     * @param viewport ビューポート\r\n     */\r\n    public setRenderState(fbo: WebGLFramebuffer, viewport: number[]): void {\r\n      s_fbo = fbo;\r\n      s_viewport = viewport;\r\n    }\r\n\r\n    /**\r\n     * 描画開始時の追加処理\r\n     * モデルを描画する前にクリッピングマスクに必要な処理を実装している\r\n     */\r\n    public preDraw(): void {\r\n      if (this.firstDraw) {\r\n        this.firstDraw = false;\r\n\r\n        // 拡張機能を有効にする\r\n        this._anisortopy =\r\n          this.gl.getExtension('EXT_texture_filter_anisotropic') ||\r\n          this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\r\n          this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\r\n      }\r\n\r\n      this.gl.disable(this.gl.SCISSOR_TEST);\r\n      this.gl.disable(this.gl.STENCIL_TEST);\r\n      this.gl.disable(this.gl.DEPTH_TEST);\r\n\r\n      // カリング（1.0beta3）\r\n      this.gl.frontFace(this.gl.CW);\r\n\r\n      this.gl.enable(this.gl.BLEND);\r\n      this.gl.colorMask(true, true, true, true);\r\n\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある\r\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n\r\n    /**\r\n     * マスクテクスチャに描画するクリッピングコンテキストをセットする\r\n     */\r\n    public setClippingContextBufferForMask(clip: CubismClippingContext) {\r\n      this._clippingContextBufferForMask = clip;\r\n    }\r\n\r\n    /**\r\n     * マスクテクスチャに描画するクリッピングコンテキストを取得する\r\n     * @return マスクテクスチャに描画するクリッピングコンテキスト\r\n     */\r\n    public getClippingContextBufferForMask(): CubismClippingContext {\r\n      return this._clippingContextBufferForMask;\r\n    }\r\n\r\n    /**\r\n     * 画面上に描画するクリッピングコンテキストをセットする\r\n     */\r\n    public setClippingContextBufferForDraw(clip: CubismClippingContext): void {\r\n      this._clippingContextBufferForDraw = clip;\r\n    }\r\n\r\n    /**\r\n     * 画面上に描画するクリッピングコンテキストを取得する\r\n     * @return 画面上に描画するクリッピングコンテキスト\r\n     */\r\n    public getClippingContextBufferForDraw(): CubismClippingContext {\r\n      return this._clippingContextBufferForDraw;\r\n    }\r\n\r\n    /**\r\n     * glの設定\r\n     */\r\n    public startUp(gl: WebGLRenderingContext): void {\r\n      this.gl = gl;\r\n      this._clippingManager.setGL(gl);\r\n      CubismShader_WebGL.getInstance().setGl(gl);\r\n    }\r\n\r\n    _textures: csmMap<number, WebGLTexture>; // モデルが参照するテクスチャとレンダラでバインドしているテクスチャとのマップ\r\n    _sortedDrawableIndexList: csmVector<number>; // 描画オブジェクトのインデックスを描画順に並べたリスト\r\n    _clippingManager: CubismClippingManager_WebGL; // クリッピングマスク管理オブジェクト\r\n    _clippingContextBufferForMask: CubismClippingContext; // マスクテクスチャに描画するためのクリッピングコンテキスト\r\n    _clippingContextBufferForDraw: CubismClippingContext; // 画面上描画するためのクリッピングコンテキスト\r\n    firstDraw: boolean;\r\n    _bufferData: {\r\n      vertex: WebGLBuffer;\r\n      uv: WebGLBuffer;\r\n      index: WebGLBuffer;\r\n    }; // 頂点バッファデータ\r\n    gl: WebGLRenderingContext; // webglコンテキスト\r\n  }\r\n\r\n  /**\r\n   * レンダラが保持する静的なリソースを開放する\r\n   */\r\n  CubismRenderer.staticRelease = (): void => {\r\n    CubismRenderer_WebGL.doStaticRelease();\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}