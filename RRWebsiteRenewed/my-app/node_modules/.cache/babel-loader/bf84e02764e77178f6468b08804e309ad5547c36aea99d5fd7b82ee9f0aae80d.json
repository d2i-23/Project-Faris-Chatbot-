{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { Live2DCubismFramework as icubismmodelsetting } from '../icubismmodelsetting';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\nvar csmVector = csmvector.csmVector;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismEyeBlink {\n    /**\r\n     * インスタンスを作成する\r\n     * @param modelSetting モデルの設定情報\r\n     * @return 作成されたインスタンス\r\n     * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\r\n     */\n    static create() {\n      let modelSetting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new CubismEyeBlink(modelSetting);\n    }\n\n    /**\r\n     * インスタンスの破棄\r\n     * @param eyeBlink 対象のCubismEyeBlink\r\n     */\n    static delete(eyeBlink) {\n      if (eyeBlink != null) {\n        eyeBlink = null;\n      }\n    }\n\n    /**\r\n     * まばたきの間隔の設定\r\n     * @param blinkingInterval まばたきの間隔の時間[秒]\r\n     */\n    setBlinkingInterval(blinkingInterval) {\n      this._blinkingIntervalSeconds = blinkingInterval;\n    }\n\n    /**\r\n     * まばたきのモーションの詳細設定\r\n     * @param closing   まぶたを閉じる動作の所要時間[秒]\r\n     * @param closed    まぶたを閉じている動作の所要時間[秒]\r\n     * @param opening   まぶたを開く動作の所要時間[秒]\r\n     */\n    setBlinkingSetting(closing, closed, opening) {\n      this._closingSeconds = closing;\n      this._closedSeconds = closed;\n      this._openingSeconds = opening;\n    }\n\n    /**\r\n     * まばたきさせるパラメータIDのリストの設定\r\n     * @param parameterIds パラメータのIDのリスト\r\n     */\n    setParameterIds(parameterIds) {\n      this._parameterIds = parameterIds;\n    }\n\n    /**\r\n     * まばたきさせるパラメータIDのリストの取得\r\n     * @return パラメータIDのリスト\r\n     */\n    getParameterIds() {\n      return this._parameterIds;\n    }\n\n    /**\r\n     * モデルのパラメータの更新\r\n     * @param model 対象のモデル\r\n     * @param deltaTimeSeconds デルタ時間[秒]\r\n     */\n    updateParameters(model, deltaTimeSeconds) {\n      this._userTimeSeconds += deltaTimeSeconds;\n      let parameterValue;\n      let t = 0.0;\n      switch (this._blinkingState) {\n        case EyeState.EyeState_Closing:\n          t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closingSeconds;\n          if (t >= 1.0) {\n            t = 1.0;\n            this._blinkingState = EyeState.EyeState_Closed;\n            this._stateStartTimeSeconds = this._userTimeSeconds;\n          }\n          parameterValue = 1.0 - t;\n          break;\n        case EyeState.EyeState_Closed:\n          t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closedSeconds;\n          if (t >= 1.0) {\n            this._blinkingState = EyeState.EyeState_Opening;\n            this._stateStartTimeSeconds = this._userTimeSeconds;\n          }\n          parameterValue = 0.0;\n          break;\n        case EyeState.EyeState_Opening:\n          t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._openingSeconds;\n          if (t >= 1.0) {\n            t = 1.0;\n            this._blinkingState = EyeState.EyeState_Interval;\n            this._nextBlinkingTime = this.determinNextBlinkingTiming();\n          }\n          parameterValue = t;\n          break;\n        case EyeState.EyeState_Interval:\n          if (this._nextBlinkingTime < this._userTimeSeconds) {\n            this._blinkingState = EyeState.EyeState_Closing;\n            this._stateStartTimeSeconds = this._userTimeSeconds;\n          }\n          parameterValue = 1.0;\n          break;\n        case EyeState.EyeState_First:\n        default:\n          this._blinkingState = EyeState.EyeState_Interval;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n          parameterValue = 1.0;\n          break;\n      }\n      if (!CubismEyeBlink.CloseIfZero) {\n        parameterValue = -parameterValue;\n      }\n      for (let i = 0; i < this._parameterIds.getSize(); ++i) {\n        model.setParameterValueById(this._parameterIds.at(i), parameterValue);\n      }\n    }\n\n    /**\r\n     * コンストラクタ\r\n     * @param modelSetting モデルの設定情報\r\n     */\n    constructor(modelSetting) {\n      this._blinkingState = void 0;\n      // 現在の状態\n      this._parameterIds = void 0;\n      // 操作対象のパラメータのIDのリスト\n      this._nextBlinkingTime = void 0;\n      // 次のまばたきの時刻[秒]\n      this._stateStartTimeSeconds = void 0;\n      // 現在の状態が開始した時刻[秒]\n      this._blinkingIntervalSeconds = void 0;\n      // まばたきの間隔[秒]\n      this._closingSeconds = void 0;\n      // まぶたを閉じる動作の所要時間[秒]\n      this._closedSeconds = void 0;\n      // まぶたを閉じている動作の所要時間[秒]\n      this._openingSeconds = void 0;\n      // まぶたを開く動作の所要時間[秒]\n      this._userTimeSeconds = void 0;\n      this._blinkingState = EyeState.EyeState_First;\n      this._nextBlinkingTime = 0.0;\n      this._stateStartTimeSeconds = 0.0;\n      this._blinkingIntervalSeconds = 4.0;\n      this._closingSeconds = 0.1;\n      this._closedSeconds = 0.05;\n      this._openingSeconds = 0.15;\n      this._userTimeSeconds = 0.0;\n      this._parameterIds = new csmVector();\n      if (modelSetting == null) {\n        return;\n      }\n      for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\n        this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\n      }\n    }\n\n    /**\r\n     * 次の瞬きのタイミングの決定\r\n     *\r\n     * @return 次のまばたきを行う時刻[秒]\r\n     */\n    determinNextBlinkingTiming() {\n      const r = Math.random();\n      return this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0);\n    }\n  }\n  // デルタ時間の積算値[秒]\n  /**\r\n   * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\r\n   */\n  CubismEyeBlink.CloseIfZero = true;\n  _Live2DCubismFramework.CubismEyeBlink = CubismEyeBlink;\n  let EyeState = /*#__PURE__*/function (EyeState) {\n    EyeState[EyeState[\"EyeState_First\"] = 0] = \"EyeState_First\";\n    EyeState[EyeState[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\n    EyeState[EyeState[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\n    EyeState[EyeState[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\n    EyeState[EyeState[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\n    return EyeState;\n  }({});\n  _Live2DCubismFramework.EyeState = EyeState;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","csmvector","icubismmodelsetting","cubismid","cubismmodel","CubismModel","CubismIdHandle","ICubismModelSetting","csmVector","_Live2DCubismFramework","CubismEyeBlink","create","modelSetting","arguments","length","undefined","delete","eyeBlink","setBlinkingInterval","blinkingInterval","_blinkingIntervalSeconds","setBlinkingSetting","closing","closed","opening","_closingSeconds","_closedSeconds","_openingSeconds","setParameterIds","parameterIds","_parameterIds","getParameterIds","updateParameters","model","deltaTimeSeconds","_userTimeSeconds","parameterValue","t","_blinkingState","EyeState","EyeState_Closing","_stateStartTimeSeconds","EyeState_Closed","EyeState_Opening","EyeState_Interval","_nextBlinkingTime","determinNextBlinkingTiming","EyeState_First","CloseIfZero","i","getSize","setParameterValueById","at","constructor","getEyeBlinkParameterCount","pushBack","getEyeBlinkParameterId","r","Math","random"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/effect/cubismeyeblink.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { Live2DCubismFramework as icubismmodelsetting } from '../icubismmodelsetting';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\r\nimport csmVector = csmvector.csmVector;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * 自動まばたき機能\r\n   *\r\n   * 自動まばたき機能を提供する。\r\n   */\r\n  export class CubismEyeBlink {\r\n    /**\r\n     * インスタンスを作成する\r\n     * @param modelSetting モデルの設定情報\r\n     * @return 作成されたインスタンス\r\n     * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\r\n     */\r\n    public static create(\r\n      modelSetting: ICubismModelSetting = null\r\n    ): CubismEyeBlink {\r\n      return new CubismEyeBlink(modelSetting);\r\n    }\r\n\r\n    /**\r\n     * インスタンスの破棄\r\n     * @param eyeBlink 対象のCubismEyeBlink\r\n     */\r\n    public static delete(eyeBlink: CubismEyeBlink): void {\r\n      if (eyeBlink != null) {\r\n        eyeBlink = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * まばたきの間隔の設定\r\n     * @param blinkingInterval まばたきの間隔の時間[秒]\r\n     */\r\n    public setBlinkingInterval(blinkingInterval: number): void {\r\n      this._blinkingIntervalSeconds = blinkingInterval;\r\n    }\r\n\r\n    /**\r\n     * まばたきのモーションの詳細設定\r\n     * @param closing   まぶたを閉じる動作の所要時間[秒]\r\n     * @param closed    まぶたを閉じている動作の所要時間[秒]\r\n     * @param opening   まぶたを開く動作の所要時間[秒]\r\n     */\r\n    public setBlinkingSetting(\r\n      closing: number,\r\n      closed: number,\r\n      opening: number\r\n    ): void {\r\n      this._closingSeconds = closing;\r\n      this._closedSeconds = closed;\r\n      this._openingSeconds = opening;\r\n    }\r\n\r\n    /**\r\n     * まばたきさせるパラメータIDのリストの設定\r\n     * @param parameterIds パラメータのIDのリスト\r\n     */\r\n    public setParameterIds(parameterIds: csmVector<CubismIdHandle>): void {\r\n      this._parameterIds = parameterIds;\r\n    }\r\n\r\n    /**\r\n     * まばたきさせるパラメータIDのリストの取得\r\n     * @return パラメータIDのリスト\r\n     */\r\n    public getParameterIds(): csmVector<CubismIdHandle> {\r\n      return this._parameterIds;\r\n    }\r\n\r\n    /**\r\n     * モデルのパラメータの更新\r\n     * @param model 対象のモデル\r\n     * @param deltaTimeSeconds デルタ時間[秒]\r\n     */\r\n    public updateParameters(\r\n      model: CubismModel,\r\n      deltaTimeSeconds: number\r\n    ): void {\r\n      this._userTimeSeconds += deltaTimeSeconds;\r\n      let parameterValue: number;\r\n      let t = 0.0;\r\n\r\n      switch (this._blinkingState) {\r\n        case EyeState.EyeState_Closing:\r\n          t =\r\n            (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n            this._closingSeconds;\r\n\r\n          if (t >= 1.0) {\r\n            t = 1.0;\r\n            this._blinkingState = EyeState.EyeState_Closed;\r\n            this._stateStartTimeSeconds = this._userTimeSeconds;\r\n          }\r\n\r\n          parameterValue = 1.0 - t;\r\n\r\n          break;\r\n        case EyeState.EyeState_Closed:\r\n          t =\r\n            (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n            this._closedSeconds;\r\n\r\n          if (t >= 1.0) {\r\n            this._blinkingState = EyeState.EyeState_Opening;\r\n            this._stateStartTimeSeconds = this._userTimeSeconds;\r\n          }\r\n\r\n          parameterValue = 0.0;\r\n\r\n          break;\r\n        case EyeState.EyeState_Opening:\r\n          t =\r\n            (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n            this._openingSeconds;\r\n\r\n          if (t >= 1.0) {\r\n            t = 1.0;\r\n            this._blinkingState = EyeState.EyeState_Interval;\r\n            this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n          }\r\n\r\n          parameterValue = t;\r\n\r\n          break;\r\n        case EyeState.EyeState_Interval:\r\n          if (this._nextBlinkingTime < this._userTimeSeconds) {\r\n            this._blinkingState = EyeState.EyeState_Closing;\r\n            this._stateStartTimeSeconds = this._userTimeSeconds;\r\n          }\r\n\r\n          parameterValue = 1.0;\r\n\r\n          break;\r\n        case EyeState.EyeState_First:\r\n        default:\r\n          this._blinkingState = EyeState.EyeState_Interval;\r\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n\r\n          parameterValue = 1.0;\r\n          break;\r\n      }\r\n\r\n      if (!CubismEyeBlink.CloseIfZero) {\r\n        parameterValue = -parameterValue;\r\n      }\r\n\r\n      for (let i = 0; i < this._parameterIds.getSize(); ++i) {\r\n        model.setParameterValueById(this._parameterIds.at(i), parameterValue);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     * @param modelSetting モデルの設定情報\r\n     */\r\n    public constructor(modelSetting: ICubismModelSetting) {\r\n      this._blinkingState = EyeState.EyeState_First;\r\n      this._nextBlinkingTime = 0.0;\r\n      this._stateStartTimeSeconds = 0.0;\r\n      this._blinkingIntervalSeconds = 4.0;\r\n      this._closingSeconds = 0.1;\r\n      this._closedSeconds = 0.05;\r\n      this._openingSeconds = 0.15;\r\n      this._userTimeSeconds = 0.0;\r\n      this._parameterIds = new csmVector<CubismIdHandle>();\r\n\r\n      if (modelSetting == null) {\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\r\n        this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 次の瞬きのタイミングの決定\r\n     *\r\n     * @return 次のまばたきを行う時刻[秒]\r\n     */\r\n    public determinNextBlinkingTiming(): number {\r\n      const r: number = Math.random();\r\n      return (\r\n        this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0)\r\n      );\r\n    }\r\n\r\n    _blinkingState: number; // 現在の状態\r\n    _parameterIds: csmVector<CubismIdHandle>; // 操作対象のパラメータのIDのリスト\r\n    _nextBlinkingTime: number; // 次のまばたきの時刻[秒]\r\n    _stateStartTimeSeconds: number; // 現在の状態が開始した時刻[秒]\r\n    _blinkingIntervalSeconds: number; // まばたきの間隔[秒]\r\n    _closingSeconds: number; // まぶたを閉じる動作の所要時間[秒]\r\n    _closedSeconds: number; // まぶたを閉じている動作の所要時間[秒]\r\n    _openingSeconds: number; // まぶたを開く動作の所要時間[秒]\r\n    _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n    /**\r\n     * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\r\n     */\r\n    static readonly CloseIfZero: boolean = true;\r\n  }\r\n\r\n  /**\r\n   * まばたきの状態\r\n   *\r\n   * まばたきの状態を表す列挙型\r\n   */\r\n  export enum EyeState {\r\n    EyeState_First = 0, // 初期状態\r\n    EyeState_Interval, // まばたきしていない状態\r\n    EyeState_Closing, // まぶたが閉じていく途中の状態\r\n    EyeState_Closed, // まぶたが閉じている状態\r\n    EyeState_Opening // まぶたが開いていく途中の状態\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}