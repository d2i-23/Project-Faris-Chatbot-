{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as acubismmotion } from './acubismmotion';\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nvar JsonFloat = cubismjson.JsonFloat;\nvar csmVector = csmvector.csmVector;\nvar CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismJson = cubismjson.CubismJson;\nvar Value = cubismjson.Value;\nvar ACubismMotion = acubismmotion.ACubismMotion;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  // exp3.jsonのキーとデフォルト\n  const ExpressionKeyFadeIn = 'FadeInTime';\n  const ExpressionKeyFadeOut = 'FadeOutTime';\n  const ExpressionKeyParameters = 'Parameters';\n  const ExpressionKeyId = 'Id';\n  const ExpressionKeyValue = 'Value';\n  const ExpressionKeyBlend = 'Blend';\n  const BlendValueAdd = 'Add';\n  const BlendValueMultiply = 'Multiply';\n  const BlendValueOverwrite = 'Overwrite';\n  const DefaultFadeTime = 1.0;\n\n  /**\r\n   * 表情のモーション\r\n   *\r\n   * 表情のモーションクラス。\r\n   */\n  class CubismExpressionMotion extends ACubismMotion {\n    /**\r\n     * インスタンスを作成する。\r\n     * @param buffer expファイルが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     * @return 作成されたインスタンス\r\n     */\n    static create(buffer, size) {\n      const expression = new CubismExpressionMotion();\n      const json = CubismJson.create(buffer, size);\n      const root = json.getRoot();\n      expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)); // フェードイン\n      expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)); // フェードアウト\n\n      // 各パラメータについて\n      const parameterCount = root.getValueByString(ExpressionKeyParameters).getSize();\n      expression._parameters.prepareCapacity(parameterCount);\n      for (let i = 0; i < parameterCount; ++i) {\n        const param = root.getValueByString(ExpressionKeyParameters).getValueByIndex(i);\n        const parameterId = CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString()); // パラメータID\n\n        const value = param.getValueByString(ExpressionKeyValue).toFloat(); // 値\n\n        // 計算方法の設定\n        let blendType;\n        if (param.getValueByString(ExpressionKeyBlend).isNull() || param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd) {\n          blendType = ExpressionBlendType.ExpressionBlendType_Add;\n        } else if (param.getValueByString(ExpressionKeyBlend).getString() == BlendValueMultiply) {\n          blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\n        } else if (param.getValueByString(ExpressionKeyBlend).getString() == BlendValueOverwrite) {\n          blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\n        } else {\n          // その他 仕様にない値を設定した時は加算モードにすることで復旧\n          blendType = ExpressionBlendType.ExpressionBlendType_Add;\n        }\n\n        // 設定オブジェクトを作成してリストに追加する\n        const item = new ExpressionParameter();\n        item.parameterId = parameterId;\n        item.blendType = blendType;\n        item.value = value;\n        expression._parameters.pushBack(item);\n      }\n      CubismJson.delete(json); // JSONデータは不要になったら削除する\n      return expression;\n    }\n\n    /**\r\n     * モデルのパラメータの更新の実行\r\n     * @param model 対象のモデル\r\n     * @param userTimeSeconds デルタ時間の積算値[秒]\r\n     * @param weight モーションの重み\r\n     * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n     */\n    doUpdateParameters(model, userTimeSeconds, weight, motionQueueEntry) {\n      for (let i = 0; i < this._parameters.getSize(); ++i) {\n        const parameter = this._parameters.at(i);\n        switch (parameter.blendType) {\n          case ExpressionBlendType.ExpressionBlendType_Add:\n            {\n              model.addParameterValueById(parameter.parameterId, parameter.value, weight);\n              break;\n            }\n          case ExpressionBlendType.ExpressionBlendType_Multiply:\n            {\n              model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\n              break;\n            }\n          case ExpressionBlendType.ExpressionBlendType_Overwrite:\n            {\n              model.setParameterValueById(parameter.parameterId, parameter.value, weight);\n              break;\n            }\n          default:\n            // 仕様にない値を設定した時はすでに加算モードになっている\n            break;\n        }\n      }\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      super();\n      this._parameters = void 0;\n      this._parameters = new csmVector();\n    }\n\n    // 表情のパラメータ情報リスト\n  }\n  _Live2DCubismFramework.CubismExpressionMotion = CubismExpressionMotion;\n  let ExpressionBlendType = /*#__PURE__*/function (ExpressionBlendType) {\n    ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\n    ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\n    ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\n    return ExpressionBlendType;\n  }({});\n  _Live2DCubismFramework.ExpressionBlendType = ExpressionBlendType;\n  class ExpressionParameter {\n    constructor() {\n      this.parameterId = void 0;\n      // パラメータID\n      this.blendType = void 0;\n      // パラメータの演算種類\n      this.value = void 0;\n    } // 値\n  }\n  _Live2DCubismFramework.ExpressionParameter = ExpressionParameter;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","acubismmotion","cubismjson","cubismid","cubismframework","cubismmodel","cubismmotionqueueentry","csmvector","JsonFloat","csmVector","CubismMotionQueueEntry","CubismModel","CubismFramework","CubismIdHandle","CubismJson","Value","ACubismMotion","_Live2DCubismFramework","ExpressionKeyFadeIn","ExpressionKeyFadeOut","ExpressionKeyParameters","ExpressionKeyId","ExpressionKeyValue","ExpressionKeyBlend","BlendValueAdd","BlendValueMultiply","BlendValueOverwrite","DefaultFadeTime","CubismExpressionMotion","create","buffer","size","expression","json","root","getRoot","setFadeInTime","getValueByString","toFloat","setFadeOutTime","parameterCount","getSize","_parameters","prepareCapacity","i","param","getValueByIndex","parameterId","getIdManager","getId","getRawString","value","blendType","isNull","getString","ExpressionBlendType","ExpressionBlendType_Add","ExpressionBlendType_Multiply","ExpressionBlendType_Overwrite","item","ExpressionParameter","pushBack","delete","doUpdateParameters","model","userTimeSeconds","weight","motionQueueEntry","parameter","at","addParameterValueById","multiplyParameterValueById","setParameterValueById","constructor"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/motion/cubismexpressionmotion.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as acubismmotion } from './acubismmotion';\r\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport JsonFloat = cubismjson.JsonFloat;\r\nimport csmVector = csmvector.csmVector;\r\nimport CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismJson = cubismjson.CubismJson;\r\nimport Value = cubismjson.Value;\r\nimport ACubismMotion = acubismmotion.ACubismMotion;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  // exp3.jsonのキーとデフォルト\r\n  const ExpressionKeyFadeIn = 'FadeInTime';\r\n  const ExpressionKeyFadeOut = 'FadeOutTime';\r\n  const ExpressionKeyParameters = 'Parameters';\r\n  const ExpressionKeyId = 'Id';\r\n  const ExpressionKeyValue = 'Value';\r\n  const ExpressionKeyBlend = 'Blend';\r\n  const BlendValueAdd = 'Add';\r\n  const BlendValueMultiply = 'Multiply';\r\n  const BlendValueOverwrite = 'Overwrite';\r\n  const DefaultFadeTime = 1.0;\r\n\r\n  /**\r\n   * 表情のモーション\r\n   *\r\n   * 表情のモーションクラス。\r\n   */\r\n  export class CubismExpressionMotion extends ACubismMotion {\r\n    /**\r\n     * インスタンスを作成する。\r\n     * @param buffer expファイルが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     * @return 作成されたインスタンス\r\n     */\r\n    public static create(\r\n      buffer: ArrayBuffer,\r\n      size: number\r\n    ): CubismExpressionMotion {\r\n      const expression: CubismExpressionMotion = new CubismExpressionMotion();\r\n\r\n      const json: CubismJson = CubismJson.create(buffer, size);\r\n      const root: Value = json.getRoot();\r\n\r\n      expression.setFadeInTime(\r\n        root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)\r\n      ); // フェードイン\r\n      expression.setFadeOutTime(\r\n        root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)\r\n      ); // フェードアウト\r\n\r\n      // 各パラメータについて\r\n      const parameterCount = root\r\n        .getValueByString(ExpressionKeyParameters)\r\n        .getSize();\r\n      expression._parameters.prepareCapacity(parameterCount);\r\n\r\n      for (let i = 0; i < parameterCount; ++i) {\r\n        const param: Value = root\r\n          .getValueByString(ExpressionKeyParameters)\r\n          .getValueByIndex(i);\r\n        const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\r\n          param.getValueByString(ExpressionKeyId).getRawString()\r\n        ); // パラメータID\r\n\r\n        const value: number = param\r\n          .getValueByString(ExpressionKeyValue)\r\n          .toFloat(); // 値\r\n\r\n        // 計算方法の設定\r\n        let blendType: ExpressionBlendType;\r\n\r\n        if (\r\n          param.getValueByString(ExpressionKeyBlend).isNull() ||\r\n          param.getValueByString(ExpressionKeyBlend).getString() ==\r\n            BlendValueAdd\r\n        ) {\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n        } else if (\r\n          param.getValueByString(ExpressionKeyBlend).getString() ==\r\n          BlendValueMultiply\r\n        ) {\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\r\n        } else if (\r\n          param.getValueByString(ExpressionKeyBlend).getString() ==\r\n          BlendValueOverwrite\r\n        ) {\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\r\n        } else {\r\n          // その他 仕様にない値を設定した時は加算モードにすることで復旧\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n        }\r\n\r\n        // 設定オブジェクトを作成してリストに追加する\r\n        const item: ExpressionParameter = new ExpressionParameter();\r\n\r\n        item.parameterId = parameterId;\r\n        item.blendType = blendType;\r\n        item.value = value;\r\n\r\n        expression._parameters.pushBack(item);\r\n      }\r\n\r\n      CubismJson.delete(json); // JSONデータは不要になったら削除する\r\n      return expression;\r\n    }\r\n\r\n    /**\r\n     * モデルのパラメータの更新の実行\r\n     * @param model 対象のモデル\r\n     * @param userTimeSeconds デルタ時間の積算値[秒]\r\n     * @param weight モーションの重み\r\n     * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\r\n     */\r\n    public doUpdateParameters(\r\n      model: CubismModel,\r\n      userTimeSeconds: number,\r\n      weight: number,\r\n      motionQueueEntry: CubismMotionQueueEntry\r\n    ): void {\r\n      for (let i = 0; i < this._parameters.getSize(); ++i) {\r\n        const parameter: ExpressionParameter = this._parameters.at(i);\r\n\r\n        switch (parameter.blendType) {\r\n          case ExpressionBlendType.ExpressionBlendType_Add: {\r\n            model.addParameterValueById(\r\n              parameter.parameterId,\r\n              parameter.value,\r\n              weight\r\n            );\r\n            break;\r\n          }\r\n          case ExpressionBlendType.ExpressionBlendType_Multiply: {\r\n            model.multiplyParameterValueById(\r\n              parameter.parameterId,\r\n              parameter.value,\r\n              weight\r\n            );\r\n            break;\r\n          }\r\n          case ExpressionBlendType.ExpressionBlendType_Overwrite: {\r\n            model.setParameterValueById(\r\n              parameter.parameterId,\r\n              parameter.value,\r\n              weight\r\n            );\r\n            break;\r\n          }\r\n          default:\r\n            // 仕様にない値を設定した時はすでに加算モードになっている\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    constructor() {\r\n      super();\r\n\r\n      this._parameters = new csmVector<ExpressionParameter>();\r\n    }\r\n\r\n    _parameters: csmVector<ExpressionParameter>; // 表情のパラメータ情報リスト\r\n  }\r\n\r\n  /**\r\n   * 表情パラメータ値の計算方式\r\n   */\r\n  export enum ExpressionBlendType {\r\n    ExpressionBlendType_Add = 0, // 加算\r\n    ExpressionBlendType_Multiply = 1, // 乗算\r\n    ExpressionBlendType_Overwrite = 2 // 上書き\r\n  }\r\n\r\n  /**\r\n   * 表情のパラメータ情報\r\n   */\r\n  export class ExpressionParameter {\r\n    parameterId: CubismIdHandle; // パラメータID\r\n    blendType: ExpressionBlendType; // パラメータの演算種類\r\n    value: number; // 値\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}