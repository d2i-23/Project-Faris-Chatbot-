{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismid } from './id/cubismid';\nimport { Live2DCubismFramework as csmmap } from './type/csmmap';\nvar csmMap = csmmap.csmMap;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class ICubismModelSetting {}\n  _Live2DCubismFramework.ICubismModelSetting = ICubismModelSetting;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismid","csmmap","csmMap","CubismIdHandle","_Live2DCubismFramework","ICubismModelSetting"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/icubismmodelsetting.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismid } from './id/cubismid';\r\nimport { Live2DCubismFramework as csmmap } from './type/csmmap';\r\nimport csmMap = csmmap.csmMap;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * モデル設定情報を取り扱う関数を宣言した純粋仮想クラス。\r\n   *\r\n   * このクラスを継承することで、モデル設定情報を取り扱うクラスになる。\r\n   */\r\n  export abstract class ICubismModelSetting {\r\n    /**\r\n     * Mocファイルの名前を取得する\r\n     * @return Mocファイルの名前\r\n     */\r\n    public abstract getModelFileName(): string;\r\n\r\n    /**\r\n     * モデルが使用するテクスチャの数を取得する\r\n     * テクスチャの数\r\n     */\r\n    public abstract getTextureCount(): number;\r\n\r\n    /**\r\n     * テクスチャが配置されたディレクトリの名前を取得する\r\n     * @return テクスチャが配置されたディレクトリの名前\r\n     */\r\n    public abstract getTextureDirectory(): string;\r\n\r\n    /**\r\n     * モデルが使用するテクスチャの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return テクスチャの名前\r\n     */\r\n    public abstract getTextureFileName(index: number): string;\r\n\r\n    /**\r\n     * モデルに設定された当たり判定の数を取得する\r\n     * @return モデルに設定された当たり判定の数\r\n     */\r\n    public abstract getHitAreasCount(): number;\r\n\r\n    /**\r\n     * 当たり判定に設定されたIDを取得する\r\n     *\r\n     * @param index 配列のindex\r\n     * @return 当たり判定に設定されたID\r\n     */\r\n    public abstract getHitAreaId(index: number): CubismIdHandle;\r\n\r\n    /**\r\n     * 当たり判定に設定された名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 当たり判定に設定された名前\r\n     */\r\n    public abstract getHitAreaName(index: number): string;\r\n\r\n    /**\r\n     * 物理演算設定ファイルの名前を取得する\r\n     * @return 物理演算設定ファイルの名前\r\n     */\r\n    public abstract getPhysicsFileName(): string;\r\n\r\n    /**\r\n     * パーツ切り替え設定ファイルの名前を取得する\r\n     * @return パーツ切り替え設定ファイルの名前\r\n     */\r\n    public abstract getPoseFileName(): string;\r\n\r\n    /**\r\n     * 表情設定ファイルの数を取得する\r\n     * @return 表情設定ファイルの数\r\n     */\r\n    public abstract getExpressionCount(): number;\r\n\r\n    /**\r\n     * 表情設定ファイルを識別する名前（別名）を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 表情の名前\r\n     */\r\n    public abstract getExpressionName(index: number): string;\r\n\r\n    /**\r\n     * 表情設定ファイルの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 表情設定ファイルの名前\r\n     */\r\n    public abstract getExpressionFileName(index: number): string;\r\n\r\n    /**\r\n     * モーショングループの数を取得する\r\n     * @return モーショングループの数\r\n     */\r\n    public abstract getMotionGroupCount(): number;\r\n\r\n    /**\r\n     * モーショングループの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return モーショングループの名前\r\n     */\r\n    public abstract getMotionGroupName(index: number): string;\r\n\r\n    /**\r\n     * モーショングループに含まれるモーションの数を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @return モーショングループの数\r\n     */\r\n    public abstract getMotionCount(groupName: string): number;\r\n\r\n    /**\r\n     * グループ名とインデックス値からモーションファイル名を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index     配列のインデックス値\r\n     * @return モーションファイルの名前\r\n     */\r\n    public abstract getMotionFileName(groupName: string, index: number): string;\r\n\r\n    /**\r\n     * モーションに対応するサウンドファイルの名前を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return サウンドファイルの名前\r\n     */\r\n    public abstract getMotionSoundFileName(\r\n      groupName: string,\r\n      index: number\r\n    ): string;\r\n\r\n    /**\r\n     * モーション開始時のフェードイン処理時間を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return フェードイン処理時間[秒]\r\n     */\r\n    public abstract getMotionFadeInTimeValue(\r\n      groupName: string,\r\n      index: number\r\n    ): number;\r\n\r\n    /**\r\n     * モーション終了時のフェードアウト処理時間を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return フェードアウト処理時間[秒]\r\n     */\r\n    public abstract getMotionFadeOutTimeValue(\r\n      groupName: string,\r\n      index: number\r\n    ): number;\r\n\r\n    /**\r\n     * ユーザーデータのファイル名を取得する\r\n     * @return ユーザーデータのファイル名\r\n     */\r\n    public abstract getUserDataFile(): string;\r\n\r\n    /**\r\n     * レイアウト情報を取得する\r\n     * @param outLayoutMap csmMapクラスのインスタンス\r\n     * @return true レイアウト情報が存在する\r\n     * @return false レイアウト情報が存在しない\r\n     */\r\n    public abstract getLayoutMap(outLayoutMap: csmMap<string, number>): boolean;\r\n\r\n    /**\r\n     * 目パチに関連付けられたパラメータの数を取得する\r\n     * @return 目パチに関連付けられたパラメータの数\r\n     */\r\n    public abstract getEyeBlinkParameterCount(): number;\r\n\r\n    /**\r\n     * 目パチに関連付けられたパラメータのIDを取得する\r\n     * @param index 配列のインデックス値\r\n     * @return パラメータID\r\n     */\r\n    public abstract getEyeBlinkParameterId(index: number): CubismIdHandle;\r\n\r\n    /**\r\n     * リップシンクに関連付けられたパラメータの数を取得する\r\n     * @return リップシンクに関連付けられたパラメータの数\r\n     */\r\n    public abstract getLipSyncParameterCount(): number;\r\n\r\n    /**\r\n     * リップシンクに関連付けられたパラメータの数を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return パラメータID\r\n     */\r\n    public abstract getLipSyncParameterId(index: number): CubismIdHandle;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,qBAAqB,IAAIC,QAAQ,QAAQ,eAAe;AACjE,SAASD,qBAAqB,IAAIE,MAAM,QAAQ,eAAe;AAAC,IACzDC,MAAM,GAAGD,MAAM,CAACC,MAAM;AAAA,IACtBC,cAAc,GAAGH,QAAQ,CAACG,cAAc;AAE/C,WAAAJ,qBAAA;AA0LC,WAAAK,sBAAA;EApLQ,MAAeC,mBAAmB,CAAC;EAmLzCD,sBAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAAA,GAzLcN,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}