{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from './icubismmodelsetting';\nimport { CubismFramework } from './live2dcubismframework';\nimport { csmVector } from './type/csmvector';\nimport { CubismJson } from './utils/cubismjson';\n\n/**\n * Model3Jsonのキー文字列\n */\n\n// JSON Keys\nconst Version = 'Version';\nconst FileReferences = 'FileReferences';\nconst Groups = 'Groups';\nconst Layout = 'Layout';\nconst HitAreas = 'HitAreas';\nconst Moc = 'Moc';\nconst Textures = 'Textures';\nconst Physics = 'Physics';\nconst Pose = 'Pose';\nconst Expressions = 'Expressions';\nconst Motions = 'Motions';\nconst UserData = 'UserData';\nconst Name = 'Name';\nconst FilePath = 'File';\nconst Id = 'Id';\nconst Ids = 'Ids';\nconst Target = 'Target';\n\n// Motions\nconst Idle = 'Idle';\nconst TapBody = 'TapBody';\nconst PinchIn = 'PinchIn';\nconst PinchOut = 'PinchOut';\nconst Shake = 'Shake';\nconst FlickHead = 'FlickHead';\nconst Parameter = 'Parameter';\nconst SoundPath = 'Sound';\nconst FadeInTime = 'FadeInTime';\nconst FadeOutTime = 'FadeOutTime';\n\n// Layout\nconst CenterX = 'CenterX';\nconst CenterY = 'CenterY';\nconst X = 'X';\nconst Y = 'Y';\nconst Width = 'Width';\nconst Height = 'Height';\nconst LipSync = 'LipSync';\nconst EyeBlink = 'EyeBlink';\nconst InitParameter = 'init_param';\nconst InitPartsVisible = 'init_parts_visible';\nconst Val = 'val';\nvar FrequestNode = /*#__PURE__*/function (FrequestNode) {\n  FrequestNode[FrequestNode[\"FrequestNode_Groups\"] = 0] = \"FrequestNode_Groups\";\n  FrequestNode[FrequestNode[\"FrequestNode_Moc\"] = 1] = \"FrequestNode_Moc\";\n  FrequestNode[FrequestNode[\"FrequestNode_Motions\"] = 2] = \"FrequestNode_Motions\";\n  FrequestNode[FrequestNode[\"FrequestNode_Expressions\"] = 3] = \"FrequestNode_Expressions\";\n  FrequestNode[FrequestNode[\"FrequestNode_Textures\"] = 4] = \"FrequestNode_Textures\";\n  FrequestNode[FrequestNode[\"FrequestNode_Physics\"] = 5] = \"FrequestNode_Physics\";\n  FrequestNode[FrequestNode[\"FrequestNode_Pose\"] = 6] = \"FrequestNode_Pose\";\n  FrequestNode[FrequestNode[\"FrequestNode_HitAreas\"] = 7] = \"FrequestNode_HitAreas\";\n  return FrequestNode;\n}(FrequestNode || {}); // getRoot().getValueByString(HitAreas)\n/**\n * Model3Jsonパーサー\n *\n * model3.jsonファイルをパースして値を取得する\n */\nexport class CubismModelSettingJson extends ICubismModelSetting {\n  /**\n   * 引数付きコンストラクタ\n   *\n   * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\n   * @param size      Model3Jsonのデータサイズ\n   */\n  constructor(buffer, size) {\n    console.log(buffer);\n    super();\n    this._json = void 0;\n    this._jsonValue = void 0;\n    this._json = CubismJson.create(buffer, size);\n    if (this._json) {\n      this._jsonValue = new csmVector();\n\n      // 順番はenum FrequestNodeと一致させる\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(Groups));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Moc));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Motions));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Expressions));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Textures));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Physics));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Pose));\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(HitAreas));\n    }\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    CubismJson.delete(this._json);\n    this._jsonValue = null;\n  }\n\n  /**\n   * CubismJsonオブジェクトを取得する\n   *\n   * @return CubismJson\n   */\n  GetJson() {\n    return this._json;\n  }\n\n  /**\n   * Mocファイルの名前を取得する\n   * @return Mocファイルの名前\n   */\n  getModelFileName() {\n    if (!this.isExistModelFile()) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\n  }\n\n  /**\n   * モデルが使用するテクスチャの数を取得する\n   * テクスチャの数\n   */\n  getTextureCount() {\n    if (!this.isExistTextureFiles()) {\n      return 0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\n  }\n\n  /**\n   * テクスチャが配置されたディレクトリの名前を取得する\n   * @return テクスチャが配置されたディレクトリの名前\n   */\n  getTextureDirectory() {\n    const texturePath = this._jsonValue.at(FrequestNode.FrequestNode_Textures).getValueByIndex(0).getRawString();\n    const pathArray = texturePath.split('/');\n    // 最後の要素はテクスチャ名なので不要\n    const arrayLength = pathArray.length - 1;\n    let textureDirectoryStr = '';\n\n    // 分割したパスを結合\n    for (let i = 0; i < arrayLength; i++) {\n      textureDirectoryStr += pathArray[i];\n      if (i < arrayLength - 1) {\n        textureDirectoryStr += '/';\n      }\n    }\n    return textureDirectoryStr;\n  }\n\n  /**\n   * モデルが使用するテクスチャの名前を取得する\n   * @param index 配列のインデックス値\n   * @return テクスチャの名前\n   */\n  getTextureFileName(index) {\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getValueByIndex(index).getRawString();\n  }\n\n  /**\n   * モデルに設定された当たり判定の数を取得する\n   * @return モデルに設定された当たり判定の数\n   */\n  getHitAreasCount() {\n    if (!this.isExistHitAreas()) {\n      return 0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\n  }\n\n  /**\n   * 当たり判定に設定されたIDを取得する\n   *\n   * @param index 配列のindex\n   * @return 当たり判定に設定されたID\n   */\n  getHitAreaId(index) {\n    return CubismFramework.getIdManager().getId(this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getValueByIndex(index).getValueByString(Id).getRawString());\n  }\n\n  /**\n   * 当たり判定に設定された名前を取得する\n   * @param index 配列のインデックス値\n   * @return 当たり判定に設定された名前\n   */\n  getHitAreaName(index) {\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getValueByIndex(index).getValueByString(Name).getRawString();\n  }\n\n  /**\n   * 物理演算設定ファイルの名前を取得する\n   * @return 物理演算設定ファイルの名前\n   */\n  getPhysicsFileName() {\n    if (!this.isExistPhysicsFile()) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\n  }\n\n  /**\n   * パーツ切り替え設定ファイルの名前を取得する\n   * @return パーツ切り替え設定ファイルの名前\n   */\n  getPoseFileName() {\n    if (!this.isExistPoseFile()) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの数を取得する\n   * @return 表情設定ファイルの数\n   */\n  getExpressionCount() {\n    if (!this.isExistExpressionFile()) {\n      return 0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\n  }\n\n  /**\n   * 表情設定ファイルを識別する名前（別名）を取得する\n   * @param index 配列のインデックス値\n   * @return 表情の名前\n   */\n  getExpressionName(index) {\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getValueByIndex(index).getValueByString(Name).getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの名前を取得する\n   * @param index 配列のインデックス値\n   * @return 表情設定ファイルの名前\n   */\n  getExpressionFileName(index) {\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getValueByIndex(index).getValueByString(FilePath).getRawString();\n  }\n\n  /**\n   * モーショングループの数を取得する\n   * @return モーショングループの数\n   */\n  getMotionGroupCount() {\n    if (!this.isExistMotionGroups()) {\n      return 0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getKeys().getSize();\n  }\n\n  /**\n   * モーショングループの名前を取得する\n   * @param index 配列のインデックス値\n   * @return モーショングループの名前\n   */\n  getMotionGroupName(index) {\n    if (!this.isExistMotionGroups()) {\n      return null;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getKeys().at(index);\n  }\n\n  /**\n   * モーショングループに含まれるモーションの数を取得する\n   * @param groupName モーショングループの名前\n   * @return モーショングループの数\n   */\n  getMotionCount(groupName) {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return 0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getSize();\n  }\n\n  /**\n   * グループ名とインデックス値からモーションファイル名を取得する\n   * @param groupName モーショングループの名前\n   * @param index     配列のインデックス値\n   * @return モーションファイルの名前\n   */\n  getMotionFileName(groupName, index) {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FilePath).getRawString();\n  }\n\n  /**\n   * モーションに対応するサウンドファイルの名前を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return サウンドファイルの名前\n   */\n  getMotionSoundFileName(groupName, index) {\n    if (!this.isExistMotionSoundFile(groupName, index)) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(SoundPath).getRawString();\n  }\n\n  /**\n   * モーション開始時のフェードイン処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードイン処理時間[秒]\n   */\n  getMotionFadeInTimeValue(groupName, index) {\n    if (!this.isExistMotionFadeIn(groupName, index)) {\n      return -1.0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeInTime).toFloat();\n  }\n\n  /**\n   * モーション終了時のフェードアウト処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードアウト処理時間[秒]\n   */\n  getMotionFadeOutTimeValue(groupName, index) {\n    if (!this.isExistMotionFadeOut(groupName, index)) {\n      return -1.0;\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeOutTime).toFloat();\n  }\n\n  /**\n   * ユーザーデータのファイル名を取得する\n   * @return ユーザーデータのファイル名\n   */\n  getUserDataFile() {\n    if (!this.isExistUserDataFile()) {\n      return '';\n    }\n    return this._json.getRoot().getValueByString(FileReferences).getValueByString(UserData).getRawString();\n  }\n\n  /**\n   * レイアウト情報を取得する\n   * @param outLayoutMap csmMapクラスのインスタンス\n   * @return true レイアウト情報が存在する\n   * @return false レイアウト情報が存在しない\n   */\n  getLayoutMap(outLayoutMap) {\n    // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\n    const map = this._json.getRoot().getValueByString(Layout).getMap();\n    if (map == null) {\n      return false;\n    }\n    let ret = false;\n    for (const ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {\n      outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\n      ret = true;\n    }\n    return ret;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータの数を取得する\n   * @return 目パチに関連付けられたパラメータの数\n   */\n  getEyeBlinkParameterCount() {\n    if (!this.isExistEyeBlinkParameters()) {\n      return 0;\n    }\n    let num = 0;\n    for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n      const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n        num = refI.getValueByString(Ids).getVector().getSize();\n        break;\n      }\n    }\n    return num;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータのIDを取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  getEyeBlinkParameterId(index) {\n    if (!this.isExistEyeBlinkParameters()) {\n      return null;\n    }\n    for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n      const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n        return CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());\n      }\n    }\n    return null;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @return リップシンクに関連付けられたパラメータの数\n   */\n  getLipSyncParameterCount() {\n    if (!this.isExistLipSyncParameters()) {\n      return 0;\n    }\n    let num = 0;\n    for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n      const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\n        num = refI.getValueByString(Ids).getVector().getSize();\n        break;\n      }\n    }\n    return num;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  getLipSyncParameterId(index) {\n    if (!this.isExistLipSyncParameters()) {\n      return null;\n    }\n    for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n      const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\n        return CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());\n      }\n    }\n    return null;\n  }\n\n  /**\n   * モデルファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistModelFile() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * テクスチャファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistTextureFiles() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 当たり判定のキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistHitAreas() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 物理演算ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistPhysicsFile() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * ポーズ設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistPoseFile() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 表情設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistExpressionFile() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * モーショングループのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistMotionGroups() {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーショングループのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistMotionGroupName(groupName) {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistMotionSoundFile(groupName, index) {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(SoundPath);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistMotionFadeIn(groupName, index) {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeInTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistMotionFadeOut(groupName, index) {\n    const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeOutTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * UserDataのファイル名が存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistUserDataFile() {\n    const node = this._json.getRoot().getValueByString(FileReferences).getValueByString(UserData);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistEyeBlinkParameters() {\n    if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() || this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\n      return false;\n    }\n    for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\n      if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i).getValueByString(Name).getRawString() == EyeBlink) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  isExistLipSyncParameters() {\n    if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() || this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\n      return false;\n    }\n    for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\n      if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i).getValueByString(Name).getRawString() == LipSync) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodelsettingjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismModelSettingJson = _Live2DCubismFramework.CubismModelSettingJson = $.CubismModelSettingJson;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["ICubismModelSetting","CubismFramework","csmVector","CubismJson","Version","FileReferences","Groups","Layout","HitAreas","Moc","Textures","Physics","Pose","Expressions","Motions","UserData","Name","FilePath","Id","Ids","Target","Idle","TapBody","PinchIn","PinchOut","Shake","FlickHead","Parameter","SoundPath","FadeInTime","FadeOutTime","CenterX","CenterY","X","Y","Width","Height","LipSync","EyeBlink","InitParameter","InitPartsVisible","Val","FrequestNode","CubismModelSettingJson","constructor","buffer","size","console","log","_json","_jsonValue","create","pushBack","getRoot","getValueByString","release","delete","GetJson","getModelFileName","isExistModelFile","at","FrequestNode_Moc","getRawString","getTextureCount","isExistTextureFiles","FrequestNode_Textures","getSize","getTextureDirectory","texturePath","getValueByIndex","pathArray","split","arrayLength","length","textureDirectoryStr","i","getTextureFileName","index","getHitAreasCount","isExistHitAreas","FrequestNode_HitAreas","getHitAreaId","getIdManager","getId","getHitAreaName","getPhysicsFileName","isExistPhysicsFile","FrequestNode_Physics","getPoseFileName","isExistPoseFile","FrequestNode_Pose","getExpressionCount","isExistExpressionFile","FrequestNode_Expressions","getExpressionName","getExpressionFileName","getMotionGroupCount","isExistMotionGroups","FrequestNode_Motions","getKeys","getMotionGroupName","getMotionCount","groupName","isExistMotionGroupName","getMotionFileName","getMotionSoundFileName","isExistMotionSoundFile","getMotionFadeInTimeValue","isExistMotionFadeIn","toFloat","getMotionFadeOutTimeValue","isExistMotionFadeOut","getUserDataFile","isExistUserDataFile","getLayoutMap","outLayoutMap","map","getMap","ret","ite","begin","notEqual","end","preIncrement","setValue","ptr","first","second","getEyeBlinkParameterCount","isExistEyeBlinkParameters","num","FrequestNode_Groups","refI","isNull","isError","getVector","getEyeBlinkParameterId","getLipSyncParameterCount","isExistLipSyncParameters","getLipSyncParameterId","node","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["D:/Personal/PythonStuff/RR/RRWebsiteRenewed/my-app/src/Framework/src/cubismmodelsettingjson.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from './icubismmodelsetting';\nimport { CubismIdHandle } from './id/cubismid';\nimport { CubismFramework } from './live2dcubismframework';\nimport { csmMap, iterator } from './type/csmmap';\nimport { csmVector } from './type/csmvector';\nimport { CubismJson, Value } from './utils/cubismjson';\n\n/**\n * Model3Jsonのキー文字列\n */\n\n// JSON Keys\nconst Version = 'Version';\nconst FileReferences = 'FileReferences';\nconst Groups = 'Groups';\nconst Layout = 'Layout';\nconst HitAreas = 'HitAreas';\n\nconst Moc = 'Moc';\nconst Textures = 'Textures';\nconst Physics = 'Physics';\nconst Pose = 'Pose';\nconst Expressions = 'Expressions';\nconst Motions = 'Motions';\n\nconst UserData = 'UserData';\nconst Name = 'Name';\nconst FilePath = 'File';\nconst Id = 'Id';\nconst Ids = 'Ids';\nconst Target = 'Target';\n\n// Motions\nconst Idle = 'Idle';\nconst TapBody = 'TapBody';\nconst PinchIn = 'PinchIn';\nconst PinchOut = 'PinchOut';\nconst Shake = 'Shake';\nconst FlickHead = 'FlickHead';\nconst Parameter = 'Parameter';\n\nconst SoundPath = 'Sound';\nconst FadeInTime = 'FadeInTime';\nconst FadeOutTime = 'FadeOutTime';\n\n// Layout\nconst CenterX = 'CenterX';\nconst CenterY = 'CenterY';\nconst X = 'X';\nconst Y = 'Y';\nconst Width = 'Width';\nconst Height = 'Height';\n\nconst LipSync = 'LipSync';\nconst EyeBlink = 'EyeBlink';\n\nconst InitParameter = 'init_param';\nconst InitPartsVisible = 'init_parts_visible';\nconst Val = 'val';\n\nenum FrequestNode {\n  FrequestNode_Groups, // getRoot().getValueByString(Groups)\n  FrequestNode_Moc, // getRoot().getValueByString(FileReferences).getValueByString(Moc)\n  FrequestNode_Motions, // getRoot().getValueByString(FileReferences).getValueByString(Motions)\n  FrequestNode_Expressions, // getRoot().getValueByString(FileReferences).getValueByString(Expressions)\n  FrequestNode_Textures, // getRoot().getValueByString(FileReferences).getValueByString(Textures)\n  FrequestNode_Physics, // getRoot().getValueByString(FileReferences).getValueByString(Physics)\n  FrequestNode_Pose, // getRoot().getValueByString(FileReferences).getValueByString(Pose)\n  FrequestNode_HitAreas, // getRoot().getValueByString(HitAreas)\n}\n\n/**\n * Model3Jsonパーサー\n *\n * model3.jsonファイルをパースして値を取得する\n */\nexport class CubismModelSettingJson extends ICubismModelSetting {\n  /**\n   * 引数付きコンストラクタ\n   *\n   * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\n   * @param size      Model3Jsonのデータサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    console.log(buffer)\n    super();\n    this._json = CubismJson.create(buffer, size);\n\n    if (this._json) {\n      this._jsonValue = new csmVector<Value>();\n\n      // 順番はenum FrequestNodeと一致させる\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(Groups));\n      this._jsonValue.pushBack(\n        this._json\n          .getRoot()\n          .getValueByString(FileReferences)\n          .getValueByString(Moc)\n      );\n      this._jsonValue.pushBack(\n        this._json\n          .getRoot()\n          .getValueByString(FileReferences)\n          .getValueByString(Motions)\n      );\n      this._jsonValue.pushBack(\n        this._json\n          .getRoot()\n          .getValueByString(FileReferences)\n          .getValueByString(Expressions)\n      );\n      this._jsonValue.pushBack(\n        this._json\n          .getRoot()\n          .getValueByString(FileReferences)\n          .getValueByString(Textures)\n      );\n      this._jsonValue.pushBack(\n        this._json\n          .getRoot()\n          .getValueByString(FileReferences)\n          .getValueByString(Physics)\n      );\n      this._jsonValue.pushBack(\n        this._json\n          .getRoot()\n          .getValueByString(FileReferences)\n          .getValueByString(Pose)\n      );\n      this._jsonValue.pushBack(this._json.getRoot().getValueByString(HitAreas));\n    }\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n\n    this._jsonValue = null;\n  }\n\n  /**\n   * CubismJsonオブジェクトを取得する\n   *\n   * @return CubismJson\n   */\n  public GetJson(): CubismJson {\n    return this._json;\n  }\n\n  /**\n   * Mocファイルの名前を取得する\n   * @return Mocファイルの名前\n   */\n  public getModelFileName(): string {\n    if (!this.isExistModelFile()) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\n  }\n\n  /**\n   * モデルが使用するテクスチャの数を取得する\n   * テクスチャの数\n   */\n  public getTextureCount(): number {\n    if (!this.isExistTextureFiles()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\n  }\n\n  /**\n   * テクスチャが配置されたディレクトリの名前を取得する\n   * @return テクスチャが配置されたディレクトリの名前\n   */\n  public getTextureDirectory(): string {\n    const texturePath = this._jsonValue\n      .at(FrequestNode.FrequestNode_Textures)\n      .getValueByIndex(0)\n      .getRawString();\n\n    const pathArray = texturePath.split('/');\n    // 最後の要素はテクスチャ名なので不要\n    const arrayLength = pathArray.length - 1;\n    let textureDirectoryStr = '';\n\n    // 分割したパスを結合\n    for (let i = 0; i < arrayLength; i++) {\n      textureDirectoryStr += pathArray[i];\n      if (i < arrayLength - 1) {\n        textureDirectoryStr += '/';\n      }\n    }\n\n    return textureDirectoryStr;\n  }\n\n  /**\n   * モデルが使用するテクスチャの名前を取得する\n   * @param index 配列のインデックス値\n   * @return テクスチャの名前\n   */\n  public getTextureFileName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Textures)\n      .getValueByIndex(index)\n      .getRawString();\n  }\n\n  /**\n   * モデルに設定された当たり判定の数を取得する\n   * @return モデルに設定された当たり判定の数\n   */\n  public getHitAreasCount(): number {\n    if (!this.isExistHitAreas()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\n  }\n\n  /**\n   * 当たり判定に設定されたIDを取得する\n   *\n   * @param index 配列のindex\n   * @return 当たり判定に設定されたID\n   */\n  public getHitAreaId(index: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._jsonValue\n        .at(FrequestNode.FrequestNode_HitAreas)\n        .getValueByIndex(index)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 当たり判定に設定された名前を取得する\n   * @param index 配列のインデックス値\n   * @return 当たり判定に設定された名前\n   */\n  public getHitAreaName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_HitAreas)\n      .getValueByIndex(index)\n      .getValueByString(Name)\n      .getRawString();\n  }\n\n  /**\n   * 物理演算設定ファイルの名前を取得する\n   * @return 物理演算設定ファイルの名前\n   */\n  public getPhysicsFileName(): string {\n    if (!this.isExistPhysicsFile()) {\n      return '';\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\n  }\n\n  /**\n   * パーツ切り替え設定ファイルの名前を取得する\n   * @return パーツ切り替え設定ファイルの名前\n   */\n  public getPoseFileName(): string {\n    if (!this.isExistPoseFile()) {\n      return '';\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの数を取得する\n   * @return 表情設定ファイルの数\n   */\n  public getExpressionCount(): number {\n    if (!this.isExistExpressionFile()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\n  }\n\n  /**\n   * 表情設定ファイルを識別する名前（別名）を取得する\n   * @param index 配列のインデックス値\n   * @return 表情の名前\n   */\n  public getExpressionName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Expressions)\n      .getValueByIndex(index)\n      .getValueByString(Name)\n      .getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの名前を取得する\n   * @param index 配列のインデックス値\n   * @return 表情設定ファイルの名前\n   */\n  public getExpressionFileName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Expressions)\n      .getValueByIndex(index)\n      .getValueByString(FilePath)\n      .getRawString();\n  }\n\n  /**\n   * モーショングループの数を取得する\n   * @return モーショングループの数\n   */\n  public getMotionGroupCount(): number {\n    if (!this.isExistMotionGroups()) {\n      return 0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getKeys()\n      .getSize();\n  }\n\n  /**\n   * モーショングループの名前を取得する\n   * @param index 配列のインデックス値\n   * @return モーショングループの名前\n   */\n  public getMotionGroupName(index: number): string {\n    if (!this.isExistMotionGroups()) {\n      return null;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getKeys()\n      .at(index);\n  }\n\n  /**\n   * モーショングループに含まれるモーションの数を取得する\n   * @param groupName モーショングループの名前\n   * @return モーショングループの数\n   */\n  public getMotionCount(groupName: string): number {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return 0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getSize();\n  }\n\n  /**\n   * グループ名とインデックス値からモーションファイル名を取得する\n   * @param groupName モーショングループの名前\n   * @param index     配列のインデックス値\n   * @return モーションファイルの名前\n   */\n  public getMotionFileName(groupName: string, index: number): string {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return '';\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(FilePath)\n      .getRawString();\n  }\n\n  /**\n   * モーションに対応するサウンドファイルの名前を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return サウンドファイルの名前\n   */\n  public getMotionSoundFileName(groupName: string, index: number): string {\n    if (!this.isExistMotionSoundFile(groupName, index)) {\n      return '';\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(SoundPath)\n      .getRawString();\n  }\n\n  /**\n   * モーション開始時のフェードイン処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードイン処理時間[秒]\n   */\n  public getMotionFadeInTimeValue(groupName: string, index: number): number {\n    if (!this.isExistMotionFadeIn(groupName, index)) {\n      return -1.0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(FadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーション終了時のフェードアウト処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードアウト処理時間[秒]\n   */\n  public getMotionFadeOutTimeValue(groupName: string, index: number): number {\n    if (!this.isExistMotionFadeOut(groupName, index)) {\n      return -1.0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(FadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * ユーザーデータのファイル名を取得する\n   * @return ユーザーデータのファイル名\n   */\n  public getUserDataFile(): string {\n    if (!this.isExistUserDataFile()) {\n      return '';\n    }\n\n    return this._json\n      .getRoot()\n      .getValueByString(FileReferences)\n      .getValueByString(UserData)\n      .getRawString();\n  }\n\n  /**\n   * レイアウト情報を取得する\n   * @param outLayoutMap csmMapクラスのインスタンス\n   * @return true レイアウト情報が存在する\n   * @return false レイアウト情報が存在しない\n   */\n  public getLayoutMap(outLayoutMap: csmMap<string, number>): boolean {\n    // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\n    const map: csmMap<string, Value> = this._json\n      .getRoot()\n      .getValueByString(Layout)\n      .getMap();\n\n    if (map == null) {\n      return false;\n    }\n\n    let ret = false;\n\n    for (\n      const ite: iterator<string, Value> = map.begin();\n      ite.notEqual(map.end());\n      ite.preIncrement()\n    ) {\n      outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\n      ret = true;\n    }\n\n    return ret;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータの数を取得する\n   * @return 目パチに関連付けられたパラメータの数\n   */\n  public getEyeBlinkParameterCount(): number {\n    if (!this.isExistEyeBlinkParameters()) {\n      return 0;\n    }\n\n    let num = 0;\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n        num = refI.getValueByString(Ids).getVector().getSize();\n        break;\n      }\n    }\n\n    return num;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータのIDを取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public getEyeBlinkParameterId(index: number): CubismIdHandle {\n    if (!this.isExistEyeBlinkParameters()) {\n      return null;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n        return CubismFramework.getIdManager().getId(\n          refI.getValueByString(Ids).getValueByIndex(index).getRawString()\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @return リップシンクに関連付けられたパラメータの数\n   */\n  public getLipSyncParameterCount(): number {\n    if (!this.isExistLipSyncParameters()) {\n      return 0;\n    }\n\n    let num = 0;\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\n        num = refI.getValueByString(Ids).getVector().getSize();\n        break;\n      }\n    }\n\n    return num;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public getLipSyncParameterId(index: number): CubismIdHandle {\n    if (!this.isExistLipSyncParameters()) {\n      return null;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(Name).getRawString() == LipSync) {\n        return CubismFramework.getIdManager().getId(\n          refI.getValueByString(Ids).getValueByIndex(index).getRawString()\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * モデルファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistModelFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * テクスチャファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistTextureFiles(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 当たり判定のキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistHitAreas(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 物理演算ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistPhysicsFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * ポーズ設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistPoseFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 表情設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistExpressionFile(): boolean {\n    const node: Value = this._jsonValue.at(\n      FrequestNode.FrequestNode_Expressions\n    );\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * モーショングループのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistMotionGroups(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーショングループのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistMotionGroupName(groupName: string): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistMotionSoundFile(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(SoundPath);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistMotionFadeIn(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(FadeInTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistMotionFadeOut(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(FadeOutTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * UserDataのファイル名が存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistUserDataFile(): boolean {\n    const node: Value = this._json\n      .getRoot()\n      .getValueByString(FileReferences)\n      .getValueByString(UserData);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistEyeBlinkParameters(): boolean {\n    if (\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\n    ) {\n      return false;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      ++i\n    ) {\n      if (\n        this._jsonValue\n          .at(FrequestNode.FrequestNode_Groups)\n          .getValueByIndex(i)\n          .getValueByString(Name)\n          .getRawString() == EyeBlink\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  private isExistLipSyncParameters(): boolean {\n    if (\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\n    ) {\n      return false;\n    }\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      ++i\n    ) {\n      if (\n        this._jsonValue\n          .at(FrequestNode.FrequestNode_Groups)\n          .getValueByIndex(i)\n          .getValueByString(Name)\n          .getRawString() == LipSync\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _json: CubismJson;\n  private _jsonValue: csmVector<Value>;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodelsettingjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelSettingJson = $.CubismModelSettingJson;\n  export type CubismModelSettingJson = $.CubismModelSettingJson;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}