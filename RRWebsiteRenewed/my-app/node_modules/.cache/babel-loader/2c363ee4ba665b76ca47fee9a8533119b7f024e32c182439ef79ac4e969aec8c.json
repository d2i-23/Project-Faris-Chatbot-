{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismMatrix44 {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._tr = void 0;\n      this._tr = new Float32Array(16); // 4 * 4のサイズ\n      this.loadIdentity();\n    }\n\n    /**\r\n     * 受け取った２つの行列の乗算を行う。\r\n     *\r\n     * @param a 行列a\r\n     * @param b 行列b\r\n     * @return 乗算結果の行列\r\n     */\n    static multiply(a, b, dst) {\n      const c = new Float32Array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);\n      const n = 4;\n      for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n          for (let k = 0; k < n; ++k) {\n            c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\n          }\n        }\n      }\n      for (let i = 0; i < 16; ++i) {\n        dst[i] = c[i];\n      }\n    }\n\n    /**\r\n     * 単位行列に初期化する\r\n     */\n    loadIdentity() {\n      const c = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n      this.setMatrix(c);\n    }\n\n    /**\r\n     * 行列を設定\r\n     *\r\n     * @param tr 16個の浮動小数点数で表される4x4の行列\r\n     */\n    setMatrix(tr) {\n      for (let i = 0; i < 16; ++i) {\n        this._tr[i] = tr[i];\n      }\n    }\n\n    /**\r\n     * 行列を浮動小数点数の配列で取得\r\n     *\r\n     * @return 16個の浮動小数点数で表される4x4の行列\r\n     */\n    getArray() {\n      return this._tr;\n    }\n\n    /**\r\n     * X軸の拡大率を取得\r\n     * @return X軸の拡大率\r\n     */\n    getScaleX() {\n      return this._tr[0];\n    }\n\n    /**\r\n     * Y軸の拡大率を取得する\r\n     *\r\n     * @return Y軸の拡大率\r\n     */\n    getScaleY() {\n      return this._tr[5];\n    }\n\n    /**\r\n     * X軸の移動量を取得\r\n     * @return X軸の移動量\r\n     */\n    getTranslateX() {\n      return this._tr[12];\n    }\n\n    /**\r\n     * Y軸の移動量を取得\r\n     * @return Y軸の移動量\r\n     */\n    getTranslateY() {\n      return this._tr[13];\n    }\n\n    /**\r\n     * X軸の値を現在の行列で計算\r\n     *\r\n     * @param src X軸の値\r\n     * @return 現在の行列で計算されたX軸の値\r\n     */\n    transformX(src) {\n      return this._tr[0] * src + this._tr[12];\n    }\n\n    /**\r\n     * Y軸の値を現在の行列で計算\r\n     *\r\n     * @param src Y軸の値\r\n     * @return 現在の行列で計算されたY軸の値\r\n     */\n    transformY(src) {\n      return this._tr[5] * src + this._tr[13];\n    }\n\n    /**\r\n     * X軸の値を現在の行列で逆計算\r\n     */\n    invertTransformX(src) {\n      return (src - this._tr[12]) / this._tr[0];\n    }\n\n    /**\r\n     * Y軸の値を現在の行列で逆計算\r\n     */\n    invertTransformY(src) {\n      return (src - this._tr[13]) / this._tr[5];\n    }\n\n    /**\r\n     * 現在の行列の位置を起点にして移動\r\n     *\r\n     * 現在の行列の位置を起点にして相対的に移動する。\r\n     *\r\n     * @param x X軸の移動量\r\n     * @param y Y軸の移動量\r\n     */\n    translateRelative(x, y) {\n      const tr1 = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, 0.0, 1.0]);\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    }\n\n    /**\r\n     * 現在の行列の位置を移動\r\n     *\r\n     * 現在の行列の位置を指定した位置へ移動する\r\n     *\r\n     * @param x X軸の移動量\r\n     * @param y y軸の移動量\r\n     */\n    translate(x, y) {\n      this._tr[12] = x;\n      this._tr[13] = y;\n    }\n\n    /**\r\n     * 現在の行列のX軸の位置を指定した位置へ移動する\r\n     *\r\n     * @param x X軸の移動量\r\n     */\n    translateX(x) {\n      this._tr[12] = x;\n    }\n\n    /**\r\n     * 現在の行列のY軸の位置を指定した位置へ移動する\r\n     *\r\n     * @param y Y軸の移動量\r\n     */\n    translateY(y) {\n      this._tr[13] = y;\n    }\n\n    /**\r\n     * 現在の行列の拡大率を相対的に設定する\r\n     *\r\n     * @param x X軸の拡大率\r\n     * @param y Y軸の拡大率\r\n     */\n    scaleRelative(x, y) {\n      const tr1 = new Float32Array([x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    }\n\n    /**\r\n     * 現在の行列の拡大率を指定した倍率に設定する\r\n     *\r\n     * @param x X軸の拡大率\r\n     * @param y Y軸の拡大率\r\n     */\n    scale(x, y) {\n      this._tr[0] = x;\n      this._tr[5] = y;\n    }\n\n    /**\r\n     * 現在の行列に行列を乗算\r\n     *\r\n     * @param m 行列\r\n     */\n    multiplyByMatrix(m) {\n      CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\n    }\n\n    /**\r\n     * オブジェクトのコピーを生成する\r\n     */\n    clone() {\n      const cloneMatrix = new CubismMatrix44();\n      for (let i = 0; i < this._tr.length; i++) {\n        cloneMatrix._tr[i] = this._tr[i];\n      }\n      return cloneMatrix;\n    }\n\n    // 4x4行列データ\n  }\n  _Live2DCubismFramework.CubismMatrix44 = CubismMatrix44;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","_Live2DCubismFramework","CubismMatrix44","constructor","_tr","Float32Array","loadIdentity","multiply","a","b","dst","c","n","i","j","k","setMatrix","tr","getArray","getScaleX","getScaleY","getTranslateX","getTranslateY","transformX","src","transformY","invertTransformX","invertTransformY","translateRelative","x","y","tr1","translate","translateX","translateY","scaleRelative","scale","multiplyByMatrix","m","clone","cloneMatrix","length"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/math/cubismmatrix44.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * 4x4の行列\r\n   *\r\n   * 4x4行列の便利クラス。\r\n   */\r\n  export class CubismMatrix44 {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._tr = new Float32Array(16); // 4 * 4のサイズ\r\n      this.loadIdentity();\r\n    }\r\n\r\n    /**\r\n     * 受け取った２つの行列の乗算を行う。\r\n     *\r\n     * @param a 行列a\r\n     * @param b 行列b\r\n     * @return 乗算結果の行列\r\n     */\r\n    public static multiply(\r\n      a: Float32Array,\r\n      b: Float32Array,\r\n      dst: Float32Array\r\n    ): void {\r\n      const c: Float32Array = new Float32Array([\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0\r\n      ]);\r\n\r\n      const n = 4;\r\n\r\n      for (let i = 0; i < n; ++i) {\r\n        for (let j = 0; j < n; ++j) {\r\n          for (let k = 0; k < n; ++k) {\r\n            c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < 16; ++i) {\r\n        dst[i] = c[i];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 単位行列に初期化する\r\n     */\r\n    public loadIdentity(): void {\r\n      const c: Float32Array = new Float32Array([\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      this.setMatrix(c);\r\n    }\r\n\r\n    /**\r\n     * 行列を設定\r\n     *\r\n     * @param tr 16個の浮動小数点数で表される4x4の行列\r\n     */\r\n    public setMatrix(tr: Float32Array): void {\r\n      for (let i = 0; i < 16; ++i) {\r\n        this._tr[i] = tr[i];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 行列を浮動小数点数の配列で取得\r\n     *\r\n     * @return 16個の浮動小数点数で表される4x4の行列\r\n     */\r\n    public getArray(): Float32Array {\r\n      return this._tr;\r\n    }\r\n\r\n    /**\r\n     * X軸の拡大率を取得\r\n     * @return X軸の拡大率\r\n     */\r\n    public getScaleX(): number {\r\n      return this._tr[0];\r\n    }\r\n\r\n    /**\r\n     * Y軸の拡大率を取得する\r\n     *\r\n     * @return Y軸の拡大率\r\n     */\r\n    public getScaleY(): number {\r\n      return this._tr[5];\r\n    }\r\n\r\n    /**\r\n     * X軸の移動量を取得\r\n     * @return X軸の移動量\r\n     */\r\n    public getTranslateX(): number {\r\n      return this._tr[12];\r\n    }\r\n\r\n    /**\r\n     * Y軸の移動量を取得\r\n     * @return Y軸の移動量\r\n     */\r\n    public getTranslateY(): number {\r\n      return this._tr[13];\r\n    }\r\n\r\n    /**\r\n     * X軸の値を現在の行列で計算\r\n     *\r\n     * @param src X軸の値\r\n     * @return 現在の行列で計算されたX軸の値\r\n     */\r\n    public transformX(src: number): number {\r\n      return this._tr[0] * src + this._tr[12];\r\n    }\r\n\r\n    /**\r\n     * Y軸の値を現在の行列で計算\r\n     *\r\n     * @param src Y軸の値\r\n     * @return 現在の行列で計算されたY軸の値\r\n     */\r\n    public transformY(src: number): number {\r\n      return this._tr[5] * src + this._tr[13];\r\n    }\r\n\r\n    /**\r\n     * X軸の値を現在の行列で逆計算\r\n     */\r\n    public invertTransformX(src: number): number {\r\n      return (src - this._tr[12]) / this._tr[0];\r\n    }\r\n\r\n    /**\r\n     * Y軸の値を現在の行列で逆計算\r\n     */\r\n    public invertTransformY(src: number): number {\r\n      return (src - this._tr[13]) / this._tr[5];\r\n    }\r\n\r\n    /**\r\n     * 現在の行列の位置を起点にして移動\r\n     *\r\n     * 現在の行列の位置を起点にして相対的に移動する。\r\n     *\r\n     * @param x X軸の移動量\r\n     * @param y Y軸の移動量\r\n     */\r\n    public translateRelative(x: number, y: number): void {\r\n      const tr1: Float32Array = new Float32Array([\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        x,\r\n        y,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n    }\r\n\r\n    /**\r\n     * 現在の行列の位置を移動\r\n     *\r\n     * 現在の行列の位置を指定した位置へ移動する\r\n     *\r\n     * @param x X軸の移動量\r\n     * @param y y軸の移動量\r\n     */\r\n    public translate(x: number, y: number): void {\r\n      this._tr[12] = x;\r\n      this._tr[13] = y;\r\n    }\r\n\r\n    /**\r\n     * 現在の行列のX軸の位置を指定した位置へ移動する\r\n     *\r\n     * @param x X軸の移動量\r\n     */\r\n    public translateX(x: number): void {\r\n      this._tr[12] = x;\r\n    }\r\n\r\n    /**\r\n     * 現在の行列のY軸の位置を指定した位置へ移動する\r\n     *\r\n     * @param y Y軸の移動量\r\n     */\r\n    public translateY(y: number): void {\r\n      this._tr[13] = y;\r\n    }\r\n\r\n    /**\r\n     * 現在の行列の拡大率を相対的に設定する\r\n     *\r\n     * @param x X軸の拡大率\r\n     * @param y Y軸の拡大率\r\n     */\r\n    public scaleRelative(x: number, y: number): void {\r\n      const tr1: Float32Array = new Float32Array([\r\n        x,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        y,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n    }\r\n\r\n    /**\r\n     * 現在の行列の拡大率を指定した倍率に設定する\r\n     *\r\n     * @param x X軸の拡大率\r\n     * @param y Y軸の拡大率\r\n     */\r\n    public scale(x: number, y: number): void {\r\n      this._tr[0] = x;\r\n      this._tr[5] = y;\r\n    }\r\n\r\n    /**\r\n     * 現在の行列に行列を乗算\r\n     *\r\n     * @param m 行列\r\n     */\r\n    public multiplyByMatrix(m: CubismMatrix44): void {\r\n      CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\r\n    }\r\n\r\n    /**\r\n     * オブジェクトのコピーを生成する\r\n     */\r\n    public clone(): CubismMatrix44 {\r\n      const cloneMatrix: CubismMatrix44 = new CubismMatrix44();\r\n\r\n      for (let i = 0; i < this._tr.length; i++) {\r\n        cloneMatrix._tr[i] = this._tr[i];\r\n      }\r\n\r\n      return cloneMatrix;\r\n    }\r\n\r\n    protected _tr: Float32Array; // 4x4行列データ\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAAA,qBAAA;AA4SC,WAAAC,sBAAA;EAtSQ,MAAMC,cAAc,CAAC;IAC1B;AACJ;AACA;IACWC,WAAWA,CAAA,EAAG;MAAA,KAgSXC,GAAG;MA/RX,IAAI,CAACA,GAAG,GAAG,IAAIC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;MACjC,IAAI,CAACC,YAAY,CAAC,CAAC;IACrB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,OAAcC,QAAQA,CACpBC,CAAe,EACfC,CAAe,EACfC,GAAiB,EACX;MACN,MAAMC,CAAe,GAAG,IAAIN,YAAY,CAAC,CACvC,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ,CAAC;MAEF,MAAMO,CAAC,GAAG,CAAC;MAEX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,EAAE,EAAEC,CAAC,EAAE;QAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAE,EAAEE,CAAC,EAAE;UAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,EAAE,EAAEG,CAAC,EAAE;YAC1BJ,CAAC,CAACG,CAAC,GAAGD,CAAC,GAAG,CAAC,CAAC,IAAIL,CAAC,CAACO,CAAC,GAAGF,CAAC,GAAG,CAAC,CAAC,GAAGJ,CAAC,CAACK,CAAC,GAAGC,CAAC,GAAG,CAAC,CAAC;UAC7C;QACF;MACF;MAEA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;QAC3BH,GAAG,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC;MACf;IACF;;IAEA;AACJ;AACA;IACWP,YAAYA,CAAA,EAAS;MAC1B,MAAMK,CAAe,GAAG,IAAIN,YAAY,CAAC,CACvC,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ,CAAC;MAEF,IAAI,CAACW,SAAS,CAACL,CAAC,CAAC;IACnB;;IAEA;AACJ;AACA;AACA;AACA;IACWK,SAASA,CAACC,EAAgB,EAAQ;MACvC,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAE,EAAEA,CAAC,EAAE;QAC3B,IAAI,CAACT,GAAG,CAACS,CAAC,CAAC,GAAGI,EAAE,CAACJ,CAAC,CAAC;MACrB;IACF;;IAEA;AACJ;AACA;AACA;AACA;IACWK,QAAQA,CAAA,EAAiB;MAC9B,OAAO,IAAI,CAACd,GAAG;IACjB;;IAEA;AACJ;AACA;AACA;IACWe,SAASA,CAAA,EAAW;MACzB,OAAO,IAAI,CAACf,GAAG,CAAC,CAAC,CAAC;IACpB;;IAEA;AACJ;AACA;AACA;AACA;IACWgB,SAASA,CAAA,EAAW;MACzB,OAAO,IAAI,CAAChB,GAAG,CAAC,CAAC,CAAC;IACpB;;IAEA;AACJ;AACA;AACA;IACWiB,aAAaA,CAAA,EAAW;MAC7B,OAAO,IAAI,CAACjB,GAAG,CAAC,EAAE,CAAC;IACrB;;IAEA;AACJ;AACA;AACA;IACWkB,aAAaA,CAAA,EAAW;MAC7B,OAAO,IAAI,CAAClB,GAAG,CAAC,EAAE,CAAC;IACrB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWmB,UAAUA,CAACC,GAAW,EAAU;MACrC,OAAO,IAAI,CAACpB,GAAG,CAAC,CAAC,CAAC,GAAGoB,GAAG,GAAG,IAAI,CAACpB,GAAG,CAAC,EAAE,CAAC;IACzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWqB,UAAUA,CAACD,GAAW,EAAU;MACrC,OAAO,IAAI,CAACpB,GAAG,CAAC,CAAC,CAAC,GAAGoB,GAAG,GAAG,IAAI,CAACpB,GAAG,CAAC,EAAE,CAAC;IACzC;;IAEA;AACJ;AACA;IACWsB,gBAAgBA,CAACF,GAAW,EAAU;MAC3C,OAAO,CAACA,GAAG,GAAG,IAAI,CAACpB,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAACA,GAAG,CAAC,CAAC,CAAC;IAC3C;;IAEA;AACJ;AACA;IACWuB,gBAAgBA,CAACH,GAAW,EAAU;MAC3C,OAAO,CAACA,GAAG,GAAG,IAAI,CAACpB,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAACA,GAAG,CAAC,CAAC,CAAC;IAC3C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACWwB,iBAAiBA,CAACC,CAAS,EAAEC,CAAS,EAAQ;MACnD,MAAMC,GAAiB,GAAG,IAAI1B,YAAY,CAAC,CACzC,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACHwB,CAAC,EACDC,CAAC,EACD,GAAG,EACH,GAAG,CACJ,CAAC;MAEF5B,cAAc,CAACK,QAAQ,CAACwB,GAAG,EAAE,IAAI,CAAC3B,GAAG,EAAE,IAAI,CAACA,GAAG,CAAC;IAClD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACW4B,SAASA,CAACH,CAAS,EAAEC,CAAS,EAAQ;MAC3C,IAAI,CAAC1B,GAAG,CAAC,EAAE,CAAC,GAAGyB,CAAC;MAChB,IAAI,CAACzB,GAAG,CAAC,EAAE,CAAC,GAAG0B,CAAC;IAClB;;IAEA;AACJ;AACA;AACA;AACA;IACWG,UAAUA,CAACJ,CAAS,EAAQ;MACjC,IAAI,CAACzB,GAAG,CAAC,EAAE,CAAC,GAAGyB,CAAC;IAClB;;IAEA;AACJ;AACA;AACA;AACA;IACWK,UAAUA,CAACJ,CAAS,EAAQ;MACjC,IAAI,CAAC1B,GAAG,CAAC,EAAE,CAAC,GAAG0B,CAAC;IAClB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWK,aAAaA,CAACN,CAAS,EAAEC,CAAS,EAAQ;MAC/C,MAAMC,GAAiB,GAAG,IAAI1B,YAAY,CAAC,CACzCwB,CAAC,EACD,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACHC,CAAC,EACD,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,CACJ,CAAC;MAEF5B,cAAc,CAACK,QAAQ,CAACwB,GAAG,EAAE,IAAI,CAAC3B,GAAG,EAAE,IAAI,CAACA,GAAG,CAAC;IAClD;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWgC,KAAKA,CAACP,CAAS,EAAEC,CAAS,EAAQ;MACvC,IAAI,CAAC1B,GAAG,CAAC,CAAC,CAAC,GAAGyB,CAAC;MACf,IAAI,CAACzB,GAAG,CAAC,CAAC,CAAC,GAAG0B,CAAC;IACjB;;IAEA;AACJ;AACA;AACA;AACA;IACWO,gBAAgBA,CAACC,CAAiB,EAAQ;MAC/CpC,cAAc,CAACK,QAAQ,CAAC+B,CAAC,CAACpB,QAAQ,CAAC,CAAC,EAAE,IAAI,CAACd,GAAG,EAAE,IAAI,CAACA,GAAG,CAAC;IAC3D;;IAEA;AACJ;AACA;IACWmC,KAAKA,CAAA,EAAmB;MAC7B,MAAMC,WAA2B,GAAG,IAAItC,cAAc,CAAC,CAAC;MAExD,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,GAAG,CAACqC,MAAM,EAAE5B,CAAC,EAAE,EAAE;QACxC2B,WAAW,CAACpC,GAAG,CAACS,CAAC,CAAC,GAAG,IAAI,CAACT,GAAG,CAACS,CAAC,CAAC;MAClC;MAEA,OAAO2B,WAAW;IACpB;;IAE6B;EAC/B;EAACvC,sBAAA,CAAAC,cAAA,GAAAA,cAAA;AAAA,GA3ScF,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}