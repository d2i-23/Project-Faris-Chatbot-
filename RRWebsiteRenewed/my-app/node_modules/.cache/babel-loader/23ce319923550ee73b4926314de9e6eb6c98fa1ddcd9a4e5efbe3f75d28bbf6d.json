{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismmotionjson } from './cubismmotionjson';\nimport { Live2DCubismFramework as cubismmotioninternal } from './cubismmotioninternal';\nimport { Live2DCubismFramework as acubismmotion } from './acubismmotion';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\nimport { Live2DCubismFramework as cubismmath } from '../math/cubismmath';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nimport { CubismLogDebug, CSM_ASSERT } from '../utils/cubismdebug';\nvar csmString = csmstring.csmString;\nvar CubismMotionData = cubismmotioninternal.CubismMotionData;\nvar CubismMotionSegment = cubismmotioninternal.CubismMotionSegment;\nvar CubismMotionPoint = cubismmotioninternal.CubismMotionPoint;\nvar CubismMotionEvent = cubismmotioninternal.CubismMotionEvent;\nvar CubismMotionSegmentType = cubismmotioninternal.CubismMotionSegmentType;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismMotionCurve = cubismmotioninternal.CubismMotionCurve;\nvar CubismMotionCurveTarget = cubismmotioninternal.CubismMotionCurveTarget;\nvar csmVector = csmvector.csmVector;\nvar CubismMath = cubismmath.CubismMath;\nvar CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismModel = cubismmodel.CubismModel;\nvar ACubismMotion = acubismmotion.ACubismMotion;\nvar FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\nvar CubismMotionJson = cubismmotionjson.CubismMotionJson;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const EffectNameEyeBlink = 'EyeBlink';\n  const EffectNameLipSync = 'LipSync';\n  const TargetNameModel = 'Model';\n  const TargetNameParameter = 'Parameter';\n  const TargetNamePartOpacity = 'PartOpacity';\n  function lerpPoints(a, b, t) {\n    const result = new CubismMotionPoint();\n    result.time = a.time + (b.time - a.time) * t;\n    result.value = a.value + (b.value - a.value) * t;\n    return result;\n  }\n  function linearEvaluate(points, time) {\n    // console.log('linearEvaluate',points)\n    // let t: number = (time - points[0].time) / (points[1].time - points[0].time);\n    let t;\n    if (points[0] && points[0].time != 0) {\n      t = (time - points[0].time) / (points[1].time - points[0].time);\n    } else if (points[2] && points[2].time) {\n      t = (time - points[1].time) / (points[2].time - points[1].time);\n    } else if (points.length > 0) {\n      t = (time - points[0].time) / (points[1].time - points[0].time);\n    }\n    if (t < 0.0) {\n      t = 0.0;\n    }\n    return points[0].value + (points[1].value - points[0].value) * t;\n  }\n  function bezierEvaluate(points, time) {\n    let t = (time - points[0].time) / (points[3].time - points[0].time);\n    if (t < 0.0) {\n      t = 0.0;\n    }\n    const p01 = lerpPoints(points[0], points[1], t);\n    const p12 = lerpPoints(points[1], points[2], t);\n    const p23 = lerpPoints(points[2], points[3], t);\n    const p012 = lerpPoints(p01, p12, t);\n    const p123 = lerpPoints(p12, p23, t);\n    return lerpPoints(p012, p123, t).value;\n  }\n  function steppedEvaluate(points, time) {\n    return points[0].value;\n  }\n  function inverseSteppedEvaluate(points, time) {\n    return points[1].value;\n  }\n  function evaluateCurve(motionData, index, time) {\n    // Find segment to evaluate.\n    const curve = motionData.curves.at(index);\n    let target = -1;\n    const totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\n    let pointPosition = 0;\n    for (let i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\n      // Get first point of next segment.\n      // 获取下个点，如果是贝赛尔曲线 则直接加上3使其流畅，否则加1\n      pointPosition = motionData.segments.at(i).basePointIndex + (motionData.segments.at(i).segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier ? 3 : 1);\n\n      // 部分模型点位超出最大值\n      if (pointPosition >= motionData.points._size) {\n        pointPosition = motionData.points._size - 3;\n      }\n\n      // console.warn('time',time)\n\n      // Break if time lies within current segment.\n\n      if (motionData.points.at(pointPosition).time > time) {\n        target = i;\n        break;\n      }\n    }\n    if (target == -1) {\n      return motionData.points.at(pointPosition).value;\n    }\n    const segment = motionData.segments.at(target);\n    return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\n  }\n\n  /**\r\n   * モーションクラス\r\n   *\r\n   * モーションのクラス。\r\n   */\n  class CubismMotion extends ACubismMotion {\n    /**\r\n     * 创建实例\r\n     *\r\n     * @param buffer motion3.json已读取的缓冲存储器\r\n     * @param size 缓冲区大小\r\n     * @param onFinishedMotionHandler 动作再生结束时调用的回调函数\r\n     * @return 作成されたインスタンス\r\n     */\n    static create(buffer, size, onFinishedMotionHandler) {\n      const ret = new CubismMotion();\n      ret.parse(buffer, size);\n      ret._sourceFrameRate = ret._motionData.fps;\n      ret._loopDurationSeconds = ret._motionData.duration;\n      ret._onFinishedMotion = onFinishedMotionHandler;\n\n      // NOTE: Editorではループありのモーション書き出しは非対応\n      // ret->_loop = (ret->_motionData->Loop > 0);\n      return ret;\n    }\n\n    /**\r\n     * 执行模型参数更新\r\n     * @param model             对象的模型\r\n     * @param userTimeSeconds   当前时间[秒]\r\n     * @param fadeWeight        动作的重量\r\n     * @param motionQueueEntry  CubismMotionQueueManager管理的动作\r\n     */\n    doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry) {\n      if (this._modelCurveIdEyeBlink == null) {\n        this._modelCurveIdEyeBlink = CubismFramework.getIdManager().getId(EffectNameEyeBlink);\n      }\n      if (this._modelCurveIdLipSync == null) {\n        this._modelCurveIdLipSync = CubismFramework.getIdManager().getId(EffectNameLipSync);\n      }\n      let timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\n      if (timeOffsetSeconds < 0.0) {\n        timeOffsetSeconds = 0.0; // エラー回避\n      }\n\n      let lipSyncValue = Number.MAX_VALUE;\n      let eyeBlinkValue = Number.MAX_VALUE;\n\n      //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで\n      const MaxTargetSize = 64;\n      let lipSyncFlags = 0;\n      let eyeBlinkFlags = 0;\n\n      //瞬き、リップシンクのターゲット数が上限を超えている場合\n      if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {\n        CubismLogDebug('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());\n      }\n      if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {\n        CubismLogDebug('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());\n      }\n      const tmpFadeIn = this._fadeInSeconds <= 0.0 ? 1.0 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\n      const tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0 ? 1.0 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\n      let value;\n      let c, parameterIndex;\n\n      // 'Repeat' time as necessary.\n      let time = timeOffsetSeconds;\n      if (this._isLoop) {\n        while (time > this._motionData.duration) {\n          time -= this._motionData.duration;\n        }\n      }\n      const curves = this._motionData.curves;\n\n      // Evaluate model curves.\n      for (c = 0; c < this._motionData.curveCount && curves.at(c).type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\n        // Evaluate curve and call handler.\n        // console.warn('evaluateCurve1,Evaluate curve and call handler.')\n        value = evaluateCurve(this._motionData, c, time);\n        if (curves.at(c).id == this._modelCurveIdEyeBlink) {\n          eyeBlinkValue = value;\n        } else if (curves.at(c).id == this._modelCurveIdLipSync) {\n          lipSyncValue = value;\n        }\n      }\n      let parameterMotionCurveCount = 0;\n      for (; c < this._motionData.curveCount && curves.at(c).type == CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\n        parameterMotionCurveCount++;\n\n        // Find parameter index.\n        parameterIndex = model.getParameterIndex(curves.at(c).id);\n\n        // Skip curve evaluation if no value in sink.\n        if (parameterIndex == -1) {\n          continue;\n        }\n        const sourceValue = model.getParameterValueByIndex(parameterIndex);\n\n        // Evaluate curve and apply value.\n        // console.warn('evaluateCurve2,Evaluate curve and apply value.')\n        value = evaluateCurve(this._motionData, c, time);\n        if (eyeBlinkValue != Number.MAX_VALUE) {\n          for (let i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\n            if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\n              value *= eyeBlinkValue;\n              eyeBlinkFlags |= 1 << i;\n              break;\n            }\n          }\n        }\n        if (lipSyncValue != Number.MAX_VALUE) {\n          for (let i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\n            if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\n              value += lipSyncValue;\n              lipSyncFlags |= 1 << i;\n              break;\n            }\n          }\n        }\n        let v;\n\n        // 各参数的淡入淡出\n        if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\n          // 应用动作淡入淡出\n          v = sourceValue + (value - sourceValue) * fadeWeight;\n        } else {\n          // 对于参数设定为淡入淡出或淡出时，适用该参数\n          let fin;\n          let fout;\n          if (curves.at(c).fadeInTime < 0.0) {\n            fin = tmpFadeIn;\n          } else {\n            fin = curves.at(c).fadeInTime == 0.0 ? 1.0 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / curves.at(c).fadeInTime);\n          }\n          if (curves.at(c).fadeOutTime < 0.0) {\n            fout = tmpFadeOut;\n          } else {\n            fout = curves.at(c).fadeOutTime == 0.0 || motionQueueEntry.getEndTime() < 0.0 ? 1.0 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / curves.at(c).fadeOutTime);\n          }\n          const paramWeight = this._weight * fin * fout;\n\n          // 应用每个参数的淡入淡出\n          v = sourceValue + (value - sourceValue) * paramWeight;\n        }\n        model.setParameterValueByIndex(parameterIndex, v, 1.0);\n      }\n      {\n        if (eyeBlinkValue != Number.MAX_VALUE) {\n          for (let i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\n            const sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));\n\n            // 在动作覆盖时不使用眨眼\n            if (eyeBlinkFlags >> i & 0x01) {\n              continue;\n            }\n            const v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\n            model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\n          }\n        }\n        if (lipSyncValue != Number.MAX_VALUE) {\n          for (let i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\n            const sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));\n\n            // モーションでの上書きがあった時にはリップシンクは適用しない\n            if (lipSyncFlags >> i & 0x01) {\n              continue;\n            }\n            const v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\n            model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\n          }\n        }\n      }\n      for (; c < this._motionData.curveCount && curves.at(c).type == CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\n        // Find parameter index.\n        parameterIndex = model.getParameterIndex(curves.at(c).id);\n\n        // Skip curve evaluation if no value in sink.\n        if (parameterIndex == -1) {\n          continue;\n        }\n\n        // Evaluate curve and apply value.\n        // console.warn('evaluateCurve3,Evaluate curve and apply value.')\n        value = evaluateCurve(this._motionData, c, time);\n        model.setParameterValueByIndex(parameterIndex, value);\n      }\n      if (timeOffsetSeconds >= this._motionData.duration) {\n        if (this._isLoop) {\n          motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ\n          if (this._isLoopFadeIn) {\n            // 循环淡入时，请重新淡入淡入淡出\n            motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n          }\n        } else {\n          if (this._onFinishedMotion) {\n            this._onFinishedMotion(this);\n          }\n          motionQueueEntry.setIsFinished(true);\n        }\n      }\n      this._lastWeight = fadeWeight;\n    }\n\n    /**\r\n     * ループ情報の設定\r\n     * @param loop ループ情報\r\n     */\n    setIsLoop(loop) {\n      this._isLoop = loop;\n    }\n\n    /**\r\n     * ループ情報の取得\r\n     * @return true ループする\r\n     * @return false ループしない\r\n     */\n    isLoop() {\n      return this._isLoop;\n    }\n\n    /**\r\n     * ループ時のフェードイン情報の設定\r\n     * @param loopFadeIn  ループ時のフェードイン情報\r\n     */\n    setIsLoopFadeIn(loopFadeIn) {\n      this._isLoopFadeIn = loopFadeIn;\n    }\n\n    /**\r\n     * ループ時のフェードイン情報の取得\r\n     *\r\n     * @return  true    する\r\n     * @return  false   しない\r\n     */\n    isLoopFadeIn() {\n      return this._isLoopFadeIn;\n    }\n\n    /**\r\n     * モーションの長さを取得する。\r\n     *\r\n     * @return  モーションの長さ[秒]\r\n     */\n    getDuration() {\n      return this._isLoop ? -1.0 : this._loopDurationSeconds;\n    }\n\n    /**\r\n     * モーションのループ時の長さを取得する。\r\n     *\r\n     * @return  モーションのループ時の長さ[秒]\r\n     */\n    getLoopDuration() {\n      return this._loopDurationSeconds;\n    }\n\n    /**\r\n     * 设置参数的淡入时间。\r\n     *\r\n     * @param parameterId     パラメータID\r\n     * @param value           フェードインにかかる時間[秒]\r\n     */\n    setParameterFadeInTime(parameterId, value) {\n      const curves = this._motionData.curves;\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\n        if (parameterId == curves.at(i).id) {\n          curves.at(i).fadeInTime = value;\n          return;\n        }\n      }\n    }\n\n    /**\r\n     * 设置参数的淡出时间\r\n     * @param parameterId     パラメータID\r\n     * @param value           フェードアウトにかかる時間[秒]\r\n     */\n    setParameterFadeOutTime(parameterId, value) {\n      const curves = this._motionData.curves;\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\n        if (parameterId == curves.at(i).id) {\n          curves.at(i).fadeOutTime = value;\n          return;\n        }\n      }\n    }\n\n    /**\r\n     * 获取参数的淡入时间\r\n     * @param    parameterId     パラメータID\r\n     * @return   フェードインにかかる時間[秒]\r\n     */\n    getParameterFadeInTime(parameterId) {\n      const curves = this._motionData.curves;\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\n        if (parameterId == curves.at(i).id) {\n          return curves.at(i).fadeInTime;\n        }\n      }\n      return -1;\n    }\n\n    /**\r\n     * 获取参数的淡出时间\r\n     *\r\n     * @param   parameterId     パラメータID\r\n     * @return   フェードアウトにかかる時間[秒]\r\n     */\n    getParameterFadeOutTime(parameterId) {\n      const curves = this._motionData.curves;\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\n        if (parameterId == curves.at(i).id) {\n          return curves.at(i).fadeOutTime;\n        }\n      }\n      return -1;\n    }\n\n    /**\r\n     * 自動エフェクトがかかっているパラメータIDリストの設定\r\n     * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\r\n     * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\r\n     */\n    setEffectIds(eyeBlinkParameterIds, lipSyncParameterIds) {\n      this._eyeBlinkParameterIds = eyeBlinkParameterIds;\n      this._lipSyncParameterIds = lipSyncParameterIds;\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      super();\n      this._sourceFrameRate = void 0;\n      // ロードしたファイルのFPS。記述が無ければデフォルト値15fpsとなる\n      this._loopDurationSeconds = void 0;\n      // mtnファイルで定義される一連のモーションの長さ\n      this._isLoop = void 0;\n      // ループするか?\n      this._isLoopFadeIn = void 0;\n      // ループ時にフェードインが有効かどうかのフラグ。初期値では有効。\n      this._lastWeight = void 0;\n      // 最後に設定された重み\n      this._motionData = void 0;\n      // 实际的动作数据主体\n      this._eyeBlinkParameterIds = void 0;\n      // 自動まばたきを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\n      this._lipSyncParameterIds = void 0;\n      // リップシンクを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\n      this._modelCurveIdEyeBlink = void 0;\n      // モデルが持つ自動まばたき用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n      this._modelCurveIdLipSync = void 0;\n      this._sourceFrameRate = 30.0;\n      this._loopDurationSeconds = -1.0;\n      this._isLoop = false; // trueから false へデフォルトを変更\n      this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ\n      this._lastWeight = 0.0;\n      this._motionData = null;\n      this._modelCurveIdEyeBlink = null;\n      this._modelCurveIdLipSync = null;\n      this._eyeBlinkParameterIds = null;\n      this._lipSyncParameterIds = null;\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      this._motionData = void 0;\n      this._motionData = null;\n    }\n\n    /**\r\n     * motion3.json清洗。\r\n     *\r\n     * @param motionJson  motion3.json读取的缓冲存储器\r\n     * @param size        バッファのサイズ\r\n     */\n    parse(motionJson, size) {\n      this._motionData = new CubismMotionData();\n      let json = new CubismMotionJson(motionJson, size);\n      this._motionData.duration = json.getMotionDuration();\n      this._motionData.loop = json.isMotionLoop();\n      // 曲线计数\n      this._motionData.curveCount = json.getMotionCurveCount();\n      this._motionData.fps = json.getMotionFps();\n      // 事件计数\n      this._motionData.eventCount = json.getEventCount();\n\n      // console.log('this._motionData.curveCount',this._motionData.curveCount)\n      // console.log('this._motionData.eventCount',this._motionData.eventCount)\n\n      if (json.isExistMotionFadeInTime()) {\n        this._fadeInSeconds = json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\n      } else {\n        this._fadeInSeconds = 1.0;\n      }\n      if (json.isExistMotionFadeOutTime()) {\n        this._fadeOutSeconds = json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\n      } else {\n        this._fadeOutSeconds = 1.0;\n      }\n      this._motionData.curves.updateSize(this._motionData.curveCount, CubismMotionCurve, true);\n      this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), CubismMotionSegment, true);\n      this._motionData.points.updateSize(json.getMotionTotalPointCount(), CubismMotionPoint, true);\n      this._motionData.events.updateSize(this._motionData.eventCount, CubismMotionEvent, true);\n      let totalPointCount = 0;\n      let totalSegmentCount = 0;\n\n      // Curves\n      // console.log('this._motionData.curveCount',this._motionData.curveCount)\n      for (let curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\n        if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\n          this._motionData.curves.at(curveCount).type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n        } else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\n          this._motionData.curves.at(curveCount).type = CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n        } else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {\n          this._motionData.curves.at(curveCount).type = CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n        }\n        this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);\n        this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;\n        this._motionData.curves.at(curveCount).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount) ? json.getMotionCurveFadeInTime(curveCount) : -1.0;\n        this._motionData.curves.at(curveCount).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount) ? json.getMotionCurveFadeOutTime(curveCount) : -1.0;\n\n        // Segments\n        for (let segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {\n          if (segmentPosition == 0) {\n            this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;\n            if (this._motionData.points.at(totalPointCount)) {\n              this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);\n              this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            }\n            totalPointCount += 1;\n            segmentPosition += 2;\n          } else {\n            this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount - 1;\n          }\n          const segment = json.getMotionCurveSegment(curveCount, segmentPosition);\n          switch (segment) {\n            case CubismMotionSegmentType.CubismMotionSegmentType_Linear:\n              {\n                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Linear;\n                this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;\n\n                // 修改最后点\n                if (this._motionData.points.at(totalPointCount)) {\n                  this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                  this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                }\n                totalPointCount += 1;\n                segmentPosition += 3;\n                break;\n              }\n            case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:\n              {\n                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\n                this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;\n\n                // 修改最后点\n                if (this._motionData.points.at(totalPointCount)) {\n                  this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                  this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                }\n\n                // 修改最后点\n                if (this._motionData.points.at(totalPointCount + 1)) {\n                  this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, segmentPosition + 3);\n                  this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, segmentPosition + 4);\n                }\n\n                // 修改最后点\n                if (this._motionData.points.at(totalPointCount + 2)) {\n                  this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, segmentPosition + 5);\n                  this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, segmentPosition + 6);\n                }\n                totalPointCount += 3;\n                segmentPosition += 7;\n                break;\n              }\n            case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:\n              {\n                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\n                this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;\n\n                // 修改最后点\n                if (this._motionData.points.at(totalPointCount)) {\n                  this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                  this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                }\n                totalPointCount += 1;\n                segmentPosition += 3;\n                break;\n              }\n            case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:\n              {\n                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\n                this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;\n\n                // 修改最后点\n                if (this._motionData.points.at(totalPointCount)) {\n                  this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n                  this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n                }\n                totalPointCount += 1;\n                segmentPosition += 3;\n                break;\n              }\n            default:\n              {\n                CSM_ASSERT(0);\n                break;\n              }\n          }\n          ++this._motionData.curves.at(curveCount).segmentCount;\n          ++totalSegmentCount;\n        }\n      }\n      // console.log('json.getEventCount()',json.getEventCount())\n      for (let userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\n        // console.log('userdatacount < json.getEventCount()',userdatacount,json.getEventCount())\n        this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);\n        this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);\n      }\n      json.release();\n      json = void 0;\n      json = null;\n    }\n\n    /**\r\n     * モデルのパラメータ更新\r\n     *\r\n     * イベント発火のチェック。\r\n     * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n     *\r\n     * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\r\n     * @param motionTimeSeconds        今回の再生時間[秒]\r\n     */\n    getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n      this._firedEventValues.updateSize(0);\n\n      // イベントの発火チェック\n      for (let u = 0; u < this._motionData.eventCount; ++u) {\n        if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds && this._motionData.events.at(u).fireTime <= motionTimeSeconds) {\n          this._firedEventValues.pushBack(new csmString(this._motionData.events.at(u).value.s));\n        }\n      }\n      return this._firedEventValues;\n    }\n\n    // モデルが持つリップシンク用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n  }\n  _Live2DCubismFramework.CubismMotion = CubismMotion;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismmotionjson","cubismmotioninternal","acubismmotion","cubismmodel","cubismframework","cubismmotionqueueentry","cubismmath","csmvector","cubismid","csmstring","CubismLogDebug","CSM_ASSERT","csmString","CubismMotionData","CubismMotionSegment","CubismMotionPoint","CubismMotionEvent","CubismMotionSegmentType","CubismIdHandle","CubismMotionCurve","CubismMotionCurveTarget","csmVector","CubismMath","CubismMotionQueueEntry","CubismFramework","CubismModel","ACubismMotion","FinishedMotionCallback","CubismMotionJson","_Live2DCubismFramework","EffectNameEyeBlink","EffectNameLipSync","TargetNameModel","TargetNameParameter","TargetNamePartOpacity","lerpPoints","a","b","t","result","time","value","linearEvaluate","points","length","bezierEvaluate","p01","p12","p23","p012","p123","steppedEvaluate","inverseSteppedEvaluate","evaluateCurve","motionData","index","curve","curves","at","target","totalSegmentCount","baseSegmentIndex","segmentCount","pointPosition","i","segments","basePointIndex","segmentType","CubismMotionSegmentType_Bezier","_size","segment","evaluate","get","CubismMotion","create","buffer","size","onFinishedMotionHandler","ret","parse","_sourceFrameRate","_motionData","fps","_loopDurationSeconds","duration","_onFinishedMotion","doUpdateParameters","model","userTimeSeconds","fadeWeight","motionQueueEntry","_modelCurveIdEyeBlink","getIdManager","getId","_modelCurveIdLipSync","timeOffsetSeconds","getStartTime","lipSyncValue","Number","MAX_VALUE","eyeBlinkValue","MaxTargetSize","lipSyncFlags","eyeBlinkFlags","_eyeBlinkParameterIds","getSize","_lipSyncParameterIds","tmpFadeIn","_fadeInSeconds","getEasingSine","getFadeInStartTime","tmpFadeOut","_fadeOutSeconds","getEndTime","c","parameterIndex","_isLoop","curveCount","type","CubismMotionCurveTarget_Model","id","parameterMotionCurveCount","CubismMotionCurveTarget_Parameter","getParameterIndex","sourceValue","getParameterValueByIndex","v","fadeInTime","fadeOutTime","fin","fout","paramWeight","_weight","setParameterValueByIndex","getParameterValueById","setParameterValueById","CubismMotionCurveTarget_PartOpacity","setStartTime","_isLoopFadeIn","setFadeInStartTime","setIsFinished","_lastWeight","setIsLoop","loop","isLoop","setIsLoopFadeIn","loopFadeIn","isLoopFadeIn","getDuration","getLoopDuration","setParameterFadeInTime","parameterId","setParameterFadeOutTime","getParameterFadeInTime","getParameterFadeOutTime","setEffectIds","eyeBlinkParameterIds","lipSyncParameterIds","constructor","release","motionJson","json","getMotionDuration","isMotionLoop","getMotionCurveCount","getMotionFps","eventCount","getEventCount","isExistMotionFadeInTime","getMotionFadeInTime","isExistMotionFadeOutTime","getMotionFadeOutTime","updateSize","getMotionTotalSegmentCount","getMotionTotalPointCount","events","totalPointCount","getMotionCurveTarget","getMotionCurveId","isExistMotionCurveFadeInTime","getMotionCurveFadeInTime","isExistMotionCurveFadeOutTime","getMotionCurveFadeOutTime","segmentPosition","getMotionCurveSegmentCount","getMotionCurveSegment","CubismMotionSegmentType_Linear","CubismMotionSegmentType_Stepped","CubismMotionSegmentType_InverseStepped","userdatacount","fireTime","getEventTime","getEventValue","getFiredEvent","beforeCheckTimeSeconds","motionTimeSeconds","_firedEventValues","u","pushBack","s"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/motion/cubismmotion.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismmotionjson } from './cubismmotionjson';\r\nimport { Live2DCubismFramework as cubismmotioninternal } from './cubismmotioninternal';\r\nimport { Live2DCubismFramework as acubismmotion } from './acubismmotion';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\r\nimport { Live2DCubismFramework as cubismmath } from '../math/cubismmath';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport { CubismLogDebug, CSM_ASSERT } from '../utils/cubismdebug';\r\nimport csmString = csmstring.csmString;\r\nimport CubismMotionData = cubismmotioninternal.CubismMotionData;\r\nimport CubismMotionSegment = cubismmotioninternal.CubismMotionSegment;\r\nimport CubismMotionPoint = cubismmotioninternal.CubismMotionPoint;\r\nimport CubismMotionEvent = cubismmotioninternal.CubismMotionEvent;\r\nimport CubismMotionSegmentType = cubismmotioninternal.CubismMotionSegmentType;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismMotionCurve = cubismmotioninternal.CubismMotionCurve;\r\nimport CubismMotionCurveTarget = cubismmotioninternal.CubismMotionCurveTarget;\r\nimport csmVector = csmvector.csmVector;\r\nimport CubismMath = cubismmath.CubismMath;\r\nimport CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport ACubismMotion = acubismmotion.ACubismMotion;\r\nimport FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\r\nimport CubismMotionJson = cubismmotionjson.CubismMotionJson;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  const EffectNameEyeBlink = 'EyeBlink';\r\n  const EffectNameLipSync = 'LipSync';\r\n  const TargetNameModel = 'Model';\r\n  const TargetNameParameter = 'Parameter';\r\n  const TargetNamePartOpacity = 'PartOpacity';\r\n\r\n  function lerpPoints(\r\n    a: CubismMotionPoint,\r\n    b: CubismMotionPoint,\r\n    t: number\r\n  ): CubismMotionPoint {\r\n    const result: CubismMotionPoint = new CubismMotionPoint();\r\n\r\n    result.time = a.time + (b.time - a.time) * t;\r\n    result.value = a.value + (b.value - a.value) * t;\r\n\r\n    return result;\r\n  }\r\n\r\n  function linearEvaluate(points: CubismMotionPoint[], time: number): number {\r\n    // console.log('linearEvaluate',points)\r\n    // let t: number = (time - points[0].time) / (points[1].time - points[0].time);\r\n    let t: number;\r\n    if(points[0] && points[0].time != 0){\r\n      t = (time - points[0].time) / (points[1].time - points[0].time);\r\n    }else if(points[2] && points[2].time){\r\n      t = (time - points[1].time) / (points[2].time - points[1].time);\r\n    }else if(points.length>0){\r\n      t = (time - points[0].time) / (points[1].time - points[0].time);\r\n    }\r\n\r\n    if (t < 0.0) {\r\n      t = 0.0;\r\n    }\r\n\r\n    return points[0].value + (points[1].value - points[0].value) * t;\r\n  }\r\n\r\n  function bezierEvaluate(points: CubismMotionPoint[], time: number): number {\r\n    let t: number = (time - points[0].time) / (points[3].time - points[0].time);\r\n\r\n    if (t < 0.0) {\r\n      t = 0.0;\r\n    }\r\n\r\n    const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\r\n    const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\r\n    const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\r\n\r\n    const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\r\n    const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\r\n\r\n    return lerpPoints(p012, p123, t).value;\r\n  }\r\n\r\n  function steppedEvaluate(points: CubismMotionPoint[], time: number): number {\r\n    return points[0].value;\r\n  }\r\n\r\n  function inverseSteppedEvaluate(\r\n    points: CubismMotionPoint[],\r\n    time: number\r\n  ): number {\r\n    return points[1].value;\r\n  }\r\n\r\n  function evaluateCurve(\r\n    motionData: CubismMotionData,\r\n    index: number,\r\n    time: number\r\n  ): number {\r\n    // Find segment to evaluate.\r\n    const curve: CubismMotionCurve = motionData.curves.at(index);\r\n\r\n    let target = -1;\r\n    const totalSegmentCount: number =\r\n      curve.baseSegmentIndex + curve.segmentCount;\r\n    let pointPosition = 0;\r\n    for (let i: number = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\r\n      // Get first point of next segment.\r\n      // 获取下个点，如果是贝赛尔曲线 则直接加上3使其流畅，否则加1\r\n      pointPosition = motionData.segments.at(i).basePointIndex + (motionData.segments.at(i).segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier ? 3 : 1);\r\n\r\n      // 部分模型点位超出最大值\r\n      if(pointPosition>=motionData.points._size){\r\n        pointPosition = motionData.points._size - 3\r\n      }\r\n\r\n      // console.warn('time',time)\r\n\r\n      // Break if time lies within current segment.\r\n\r\n      if (motionData.points.at(pointPosition).time > time) {\r\n        target = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (target == -1) {\r\n      return motionData.points.at(pointPosition).value;\r\n    }\r\n\r\n    const segment: CubismMotionSegment = motionData.segments.at(target);\r\n\r\n    return segment.evaluate(\r\n      motionData.points.get(segment.basePointIndex),\r\n      time\r\n    );\r\n  }\r\n\r\n  /**\r\n   * モーションクラス\r\n   *\r\n   * モーションのクラス。\r\n   */\r\n  export class CubismMotion extends ACubismMotion {\r\n    /**\r\n     * 创建实例\r\n     *\r\n     * @param buffer motion3.json已读取的缓冲存储器\r\n     * @param size 缓冲区大小\r\n     * @param onFinishedMotionHandler 动作再生结束时调用的回调函数\r\n     * @return 作成されたインスタンス\r\n     */\r\n    public static create(\r\n      buffer: ArrayBuffer,\r\n      size: number,\r\n      onFinishedMotionHandler?: FinishedMotionCallback\r\n    ): CubismMotion {\r\n      const ret = new CubismMotion();\r\n\r\n      ret.parse(buffer, size);\r\n      ret._sourceFrameRate = ret._motionData.fps;\r\n      ret._loopDurationSeconds = ret._motionData.duration;\r\n      ret._onFinishedMotion = onFinishedMotionHandler;\r\n\r\n      // NOTE: Editorではループありのモーション書き出しは非対応\r\n      // ret->_loop = (ret->_motionData->Loop > 0);\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * 执行模型参数更新\r\n     * @param model             对象的模型\r\n     * @param userTimeSeconds   当前时间[秒]\r\n     * @param fadeWeight        动作的重量\r\n     * @param motionQueueEntry  CubismMotionQueueManager管理的动作\r\n     */\r\n    public doUpdateParameters(\r\n      model: CubismModel,\r\n      userTimeSeconds: number,\r\n      fadeWeight: number,\r\n      motionQueueEntry: CubismMotionQueueEntry\r\n    ): void {\r\n      if (this._modelCurveIdEyeBlink == null) {\r\n        this._modelCurveIdEyeBlink = CubismFramework.getIdManager().getId(\r\n          EffectNameEyeBlink\r\n        );\r\n      }\r\n\r\n      if (this._modelCurveIdLipSync == null) {\r\n        this._modelCurveIdLipSync = CubismFramework.getIdManager().getId(\r\n          EffectNameLipSync\r\n        );\r\n      }\r\n\r\n      let timeOffsetSeconds: number =\r\n        userTimeSeconds - motionQueueEntry.getStartTime();\r\n\r\n      if (timeOffsetSeconds < 0.0) {\r\n        timeOffsetSeconds = 0.0; // エラー回避\r\n      }\r\n\r\n      let lipSyncValue: number = Number.MAX_VALUE;\r\n      let eyeBlinkValue: number = Number.MAX_VALUE;\r\n\r\n      //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで\r\n      const MaxTargetSize = 64;\r\n      let lipSyncFlags = 0;\r\n      let eyeBlinkFlags = 0;\r\n\r\n      //瞬き、リップシンクのターゲット数が上限を超えている場合\r\n      if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {\r\n        CubismLogDebug(\r\n          'too many eye blink targets : {0}',\r\n          this._eyeBlinkParameterIds.getSize()\r\n        );\r\n      }\r\n      if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {\r\n        CubismLogDebug(\r\n          'too many lip sync targets : {0}',\r\n          this._lipSyncParameterIds.getSize()\r\n        );\r\n      }\r\n\r\n      const tmpFadeIn: number =\r\n        this._fadeInSeconds <= 0.0\r\n          ? 1.0\r\n          : CubismMath.getEasingSine(\r\n              (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                this._fadeInSeconds\r\n            );\r\n\r\n      const tmpFadeOut: number =\r\n        this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n          ? 1.0\r\n          : CubismMath.getEasingSine(\r\n              (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                this._fadeOutSeconds\r\n            );\r\n      let value: number;\r\n      let c: number, parameterIndex: number;\r\n\r\n      // 'Repeat' time as necessary.\r\n      let time: number = timeOffsetSeconds;\r\n\r\n      if (this._isLoop) {\r\n        while (time > this._motionData.duration) {\r\n          time -= this._motionData.duration;\r\n        }\r\n      }\r\n\r\n      const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n      // Evaluate model curves.\r\n      for (\r\n        c = 0;\r\n        c < this._motionData.curveCount &&\r\n        curves.at(c).type ==\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n        ++c\r\n      ) {\r\n        // Evaluate curve and call handler.\r\n        // console.warn('evaluateCurve1,Evaluate curve and call handler.')\r\n        value = evaluateCurve(this._motionData, c, time);\r\n\r\n        if (curves.at(c).id == this._modelCurveIdEyeBlink) {\r\n          eyeBlinkValue = value;\r\n        } else if (curves.at(c).id == this._modelCurveIdLipSync) {\r\n          lipSyncValue = value;\r\n        }\r\n      }\r\n\r\n      let parameterMotionCurveCount = 0;\r\n\r\n      for (\r\n        ;\r\n        c < this._motionData.curveCount &&\r\n        curves.at(c).type ==\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n        ++c\r\n      ) {\r\n        parameterMotionCurveCount++;\r\n\r\n        // Find parameter index.\r\n        parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n\r\n        // Skip curve evaluation if no value in sink.\r\n        if (parameterIndex == -1) {\r\n          continue;\r\n        }\r\n\r\n        const sourceValue: number = model.getParameterValueByIndex(\r\n          parameterIndex\r\n        );\r\n\r\n        // Evaluate curve and apply value.\r\n        // console.warn('evaluateCurve2,Evaluate curve and apply value.')\r\n        value = evaluateCurve(this._motionData, c, time);\r\n\r\n        if (eyeBlinkValue != Number.MAX_VALUE) {\r\n          for (\r\n            let i = 0;\r\n            i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize;\r\n            ++i\r\n          ) {\r\n            if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\r\n              value *= eyeBlinkValue;\r\n              eyeBlinkFlags |= 1 << i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (lipSyncValue != Number.MAX_VALUE) {\r\n          for (\r\n            let i = 0;\r\n            i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize;\r\n            ++i\r\n          ) {\r\n            if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\r\n              value += lipSyncValue;\r\n              lipSyncFlags |= 1 << i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        let v: number;\r\n\r\n        // 各参数的淡入淡出\r\n        if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\r\n          // 应用动作淡入淡出\r\n          v = sourceValue + (value - sourceValue) * fadeWeight;\r\n        } else {\r\n          // 对于参数设定为淡入淡出或淡出时，适用该参数\r\n          let fin: number;\r\n          let fout: number;\r\n\r\n          if (curves.at(c).fadeInTime < 0.0) {\r\n            fin = tmpFadeIn;\r\n          } else {\r\n            fin =\r\n              curves.at(c).fadeInTime == 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine(\r\n                    (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                      curves.at(c).fadeInTime\r\n                  );\r\n          }\r\n\r\n          if (curves.at(c).fadeOutTime < 0.0) {\r\n            fout = tmpFadeOut;\r\n          } else {\r\n            fout =\r\n              curves.at(c).fadeOutTime == 0.0 ||\r\n              motionQueueEntry.getEndTime() < 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine(\r\n                    (motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                      curves.at(c).fadeOutTime\r\n                  );\r\n          }\r\n\r\n          const paramWeight: number = this._weight * fin * fout;\r\n\r\n          // 应用每个参数的淡入淡出\r\n          v = sourceValue + (value - sourceValue) * paramWeight;\r\n        }\r\n\r\n        model.setParameterValueByIndex(parameterIndex, v, 1.0);\r\n      }\r\n\r\n      {\r\n        if (eyeBlinkValue != Number.MAX_VALUE) {\r\n          for (\r\n            let i = 0;\r\n            i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize;\r\n            ++i\r\n          ) {\r\n            const sourceValue: number = model.getParameterValueById(\r\n              this._eyeBlinkParameterIds.at(i)\r\n            );\r\n\r\n            // 在动作覆盖时不使用眨眼\r\n            if ((eyeBlinkFlags >> i) & 0x01) {\r\n              continue;\r\n            }\r\n\r\n            const v: number =\r\n              sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\r\n\r\n            model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\r\n          }\r\n        }\r\n\r\n        if (lipSyncValue != Number.MAX_VALUE) {\r\n          for (\r\n            let i = 0;\r\n            i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize;\r\n            ++i\r\n          ) {\r\n            const sourceValue: number = model.getParameterValueById(\r\n              this._lipSyncParameterIds.at(i)\r\n            );\r\n\r\n            // モーションでの上書きがあった時にはリップシンクは適用しない\r\n            if ((lipSyncFlags >> i) & 0x01) {\r\n              continue;\r\n            }\r\n\r\n            const v: number =\r\n              sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\r\n\r\n            model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\r\n          }\r\n        }\r\n      }\r\n\r\n      for (\r\n        ;\r\n        c < this._motionData.curveCount &&\r\n        curves.at(c).type ==\r\n          CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n        ++c\r\n      ) {\r\n        // Find parameter index.\r\n        parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n\r\n        // Skip curve evaluation if no value in sink.\r\n        if (parameterIndex == -1) {\r\n          continue;\r\n        }\r\n\r\n        // Evaluate curve and apply value.\r\n        // console.warn('evaluateCurve3,Evaluate curve and apply value.')\r\n        value = evaluateCurve(this._motionData, c, time);\r\n\r\n        model.setParameterValueByIndex(parameterIndex, value);\r\n      }\r\n\r\n      if (timeOffsetSeconds >= this._motionData.duration) {\r\n        if (this._isLoop) {\r\n          motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ\r\n          if (this._isLoopFadeIn) {\r\n            // 循环淡入时，请重新淡入淡入淡出\r\n            motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n          }\r\n        } else {\r\n          if (this._onFinishedMotion) {\r\n            this._onFinishedMotion(this);\r\n          }\r\n\r\n          motionQueueEntry.setIsFinished(true);\r\n        }\r\n      }\r\n      this._lastWeight = fadeWeight;\r\n    }\r\n\r\n    /**\r\n     * ループ情報の設定\r\n     * @param loop ループ情報\r\n     */\r\n    public setIsLoop(loop: boolean): void {\r\n      this._isLoop = loop;\r\n    }\r\n\r\n    /**\r\n     * ループ情報の取得\r\n     * @return true ループする\r\n     * @return false ループしない\r\n     */\r\n    public isLoop(): boolean {\r\n      return this._isLoop;\r\n    }\r\n\r\n    /**\r\n     * ループ時のフェードイン情報の設定\r\n     * @param loopFadeIn  ループ時のフェードイン情報\r\n     */\r\n    public setIsLoopFadeIn(loopFadeIn: boolean): void {\r\n      this._isLoopFadeIn = loopFadeIn;\r\n    }\r\n\r\n    /**\r\n     * ループ時のフェードイン情報の取得\r\n     *\r\n     * @return  true    する\r\n     * @return  false   しない\r\n     */\r\n    public isLoopFadeIn(): boolean {\r\n      return this._isLoopFadeIn;\r\n    }\r\n\r\n    /**\r\n     * モーションの長さを取得する。\r\n     *\r\n     * @return  モーションの長さ[秒]\r\n     */\r\n    public getDuration(): number {\r\n      return this._isLoop ? -1.0 : this._loopDurationSeconds;\r\n    }\r\n\r\n    /**\r\n     * モーションのループ時の長さを取得する。\r\n     *\r\n     * @return  モーションのループ時の長さ[秒]\r\n     */\r\n    public getLoopDuration(): number {\r\n      return this._loopDurationSeconds;\r\n    }\r\n\r\n    /**\r\n     * 设置参数的淡入时间。\r\n     *\r\n     * @param parameterId     パラメータID\r\n     * @param value           フェードインにかかる時間[秒]\r\n     */\r\n    public setParameterFadeInTime(\r\n      parameterId: CubismIdHandle,\r\n      value: number\r\n    ): void {\r\n      const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n        if (parameterId == curves.at(i).id) {\r\n          curves.at(i).fadeInTime = value;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 设置参数的淡出时间\r\n     * @param parameterId     パラメータID\r\n     * @param value           フェードアウトにかかる時間[秒]\r\n     */\r\n    public setParameterFadeOutTime(\r\n      parameterId: CubismIdHandle,\r\n      value: number\r\n    ): void {\r\n      const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n        if (parameterId == curves.at(i).id) {\r\n          curves.at(i).fadeOutTime = value;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 获取参数的淡入时间\r\n     * @param    parameterId     パラメータID\r\n     * @return   フェードインにかかる時間[秒]\r\n     */\r\n    public getParameterFadeInTime(parameterId: CubismIdHandle): number {\r\n      const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n        if (parameterId == curves.at(i).id) {\r\n          return curves.at(i).fadeInTime;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * 获取参数的淡出时间\r\n     *\r\n     * @param   parameterId     パラメータID\r\n     * @return   フェードアウトにかかる時間[秒]\r\n     */\r\n    public getParameterFadeOutTime(parameterId: CubismIdHandle): number {\r\n      const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\r\n\r\n      for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n        if (parameterId == curves.at(i).id) {\r\n          return curves.at(i).fadeOutTime;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * 自動エフェクトがかかっているパラメータIDリストの設定\r\n     * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\r\n     * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\r\n     */\r\n    public setEffectIds(\r\n      eyeBlinkParameterIds: csmVector<CubismIdHandle>,\r\n      lipSyncParameterIds: csmVector<CubismIdHandle>\r\n    ): void {\r\n      this._eyeBlinkParameterIds = eyeBlinkParameterIds;\r\n      this._lipSyncParameterIds = lipSyncParameterIds;\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      super();\r\n      this._sourceFrameRate = 30.0;\r\n      this._loopDurationSeconds = -1.0;\r\n      this._isLoop = false; // trueから false へデフォルトを変更\r\n      this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ\r\n      this._lastWeight = 0.0;\r\n      this._motionData = null;\r\n      this._modelCurveIdEyeBlink = null;\r\n      this._modelCurveIdLipSync = null;\r\n      this._eyeBlinkParameterIds = null;\r\n      this._lipSyncParameterIds = null;\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      this._motionData = void 0;\r\n      this._motionData = null;\r\n    }\r\n\r\n    /**\r\n     * motion3.json清洗。\r\n     *\r\n     * @param motionJson  motion3.json读取的缓冲存储器\r\n     * @param size        バッファのサイズ\r\n     */\r\n    public parse(motionJson: ArrayBuffer, size: number): void {\r\n      this._motionData = new CubismMotionData();\r\n\r\n      let json: CubismMotionJson = new CubismMotionJson(motionJson, size);\r\n\r\n      this._motionData.duration = json.getMotionDuration();\r\n      this._motionData.loop = json.isMotionLoop();\r\n      // 曲线计数\r\n      this._motionData.curveCount = json.getMotionCurveCount();\r\n      this._motionData.fps = json.getMotionFps();\r\n      // 事件计数\r\n      this._motionData.eventCount = json.getEventCount();\r\n\r\n      // console.log('this._motionData.curveCount',this._motionData.curveCount)\r\n      // console.log('this._motionData.eventCount',this._motionData.eventCount)\r\n\r\n      if (json.isExistMotionFadeInTime()) {\r\n        this._fadeInSeconds =\r\n          json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\r\n      } else {\r\n        this._fadeInSeconds = 1.0;\r\n      }\r\n\r\n      if (json.isExistMotionFadeOutTime()) {\r\n        this._fadeOutSeconds =\r\n          json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\r\n      } else {\r\n        this._fadeOutSeconds = 1.0;\r\n      }\r\n\r\n      this._motionData.curves.updateSize(\r\n        this._motionData.curveCount,\r\n        CubismMotionCurve,\r\n        true\r\n      );\r\n      this._motionData.segments.updateSize(\r\n        json.getMotionTotalSegmentCount(),\r\n        CubismMotionSegment,\r\n        true\r\n      );\r\n      this._motionData.points.updateSize(\r\n        json.getMotionTotalPointCount(),\r\n        CubismMotionPoint,\r\n        true\r\n      );\r\n      this._motionData.events.updateSize(\r\n        this._motionData.eventCount,\r\n        CubismMotionEvent,\r\n        true\r\n      );\r\n\r\n      let totalPointCount = 0;\r\n      let totalSegmentCount = 0;\r\n\r\n      // Curves\r\n      // console.log('this._motionData.curveCount',this._motionData.curveCount)\r\n      for (\r\n        let curveCount = 0;\r\n        curveCount < this._motionData.curveCount;\r\n        ++curveCount\r\n      ) {\r\n        if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\r\n          this._motionData.curves.at(curveCount).type =\r\n            CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n        } else if (\r\n          json.getMotionCurveTarget(curveCount) == TargetNameParameter\r\n        ) {\r\n          this._motionData.curves.at(curveCount).type =\r\n            CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n        } else if (\r\n          json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity\r\n        ) {\r\n          this._motionData.curves.at(curveCount).type =\r\n            CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n        }\r\n\r\n        this._motionData.curves.at(curveCount).id = json.getMotionCurveId(\r\n          curveCount\r\n        );\r\n\r\n        this._motionData.curves.at(\r\n          curveCount\r\n        ).baseSegmentIndex = totalSegmentCount;\r\n\r\n        this._motionData.curves.at(\r\n          curveCount\r\n        ).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount)\r\n          ? json.getMotionCurveFadeInTime(curveCount)\r\n          : -1.0;\r\n        this._motionData.curves.at(\r\n          curveCount\r\n        ).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount)\r\n          ? json.getMotionCurveFadeOutTime(curveCount)\r\n          : -1.0;\r\n\r\n        // Segments\r\n        for (\r\n          let segmentPosition = 0;\r\n          segmentPosition < json.getMotionCurveSegmentCount(curveCount);\r\n\r\n        ) {\r\n          if (segmentPosition == 0) {\r\n            this._motionData.segments.at(\r\n              totalSegmentCount\r\n            ).basePointIndex = totalPointCount;\r\n            if(this._motionData.points.at(totalPointCount)){\r\n              this._motionData.points.at(\r\n                totalPointCount\r\n              ).time = json.getMotionCurveSegment(curveCount, segmentPosition);\r\n              this._motionData.points.at(\r\n                totalPointCount\r\n              ).value = json.getMotionCurveSegment(\r\n                curveCount,\r\n                segmentPosition + 1\r\n              );\r\n            }\r\n\r\n            totalPointCount += 1;\r\n            segmentPosition += 2;\r\n          } else {\r\n            this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n              totalPointCount - 1;\r\n          }\r\n\r\n          const segment: number = json.getMotionCurveSegment(\r\n            curveCount,\r\n            segmentPosition\r\n          );\r\n          switch (segment) {\r\n            case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\r\n              this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                CubismMotionSegmentType.CubismMotionSegmentType_Linear;\r\n              this._motionData.segments.at(\r\n                totalSegmentCount\r\n              ).evaluate = linearEvaluate;\r\n\r\n              // 修改最后点\r\n              if(this._motionData.points.at(totalPointCount)){\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).time = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 1\r\n                );\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).value = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 2\r\n                );\r\n              }\r\n\r\n              totalPointCount += 1;\r\n              segmentPosition += 3;\r\n\r\n              break;\r\n            }\r\n            case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\r\n              this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\r\n              this._motionData.segments.at(\r\n                totalSegmentCount\r\n              ).evaluate = bezierEvaluate;\r\n              \r\n              // 修改最后点\r\n              if(this._motionData.points.at(totalPointCount)){\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).time = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 1\r\n                );\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).value = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 2\r\n                );\r\n              }\r\n              \r\n              // 修改最后点\r\n              if(this._motionData.points.at(totalPointCount + 1)){\r\n                this._motionData.points.at(\r\n                  totalPointCount + 1\r\n                ).time = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 3\r\n                );\r\n                this._motionData.points.at(\r\n                  totalPointCount + 1\r\n                ).value = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 4\r\n                );\r\n              }\r\n              \r\n              // 修改最后点\r\n              if(this._motionData.points.at(totalPointCount + 2)){\r\n                this._motionData.points.at(\r\n                  totalPointCount + 2\r\n                ).time = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 5\r\n                );\r\n                this._motionData.points.at(\r\n                  totalPointCount + 2\r\n                ).value = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 6\r\n                );\r\n              }\r\n              \r\n\r\n              totalPointCount += 3;\r\n              segmentPosition += 7;\r\n\r\n              break;\r\n            }\r\n\r\n            case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\r\n              this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\r\n              this._motionData.segments.at(\r\n                totalSegmentCount\r\n              ).evaluate = steppedEvaluate;\r\n\r\n              // 修改最后点\r\n              if(this._motionData.points.at(totalPointCount)){\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).time = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 1\r\n                );\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).value = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 2\r\n                );\r\n              }\r\n\r\n              totalPointCount += 1;\r\n              segmentPosition += 3;\r\n\r\n              break;\r\n            }\r\n\r\n            case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\r\n              this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\r\n              this._motionData.segments.at(\r\n                totalSegmentCount\r\n              ).evaluate = inverseSteppedEvaluate;\r\n\r\n              // 修改最后点\r\n              if(this._motionData.points.at(totalPointCount)){\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).time = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 1\r\n                );\r\n                this._motionData.points.at(\r\n                  totalPointCount\r\n                ).value = json.getMotionCurveSegment(\r\n                  curveCount,\r\n                  segmentPosition + 2\r\n                );\r\n              }\r\n\r\n              totalPointCount += 1;\r\n              segmentPosition += 3;\r\n\r\n              break;\r\n            }\r\n            default: {\r\n              CSM_ASSERT(0);\r\n              break;\r\n            }\r\n          }\r\n\r\n          ++this._motionData.curves.at(curveCount).segmentCount;\r\n          ++totalSegmentCount;\r\n        }\r\n      }\r\n      // console.log('json.getEventCount()',json.getEventCount())\r\n      for (\r\n        let userdatacount = 0;\r\n        userdatacount < json.getEventCount();\r\n        ++userdatacount\r\n      ) {\r\n        // console.log('userdatacount < json.getEventCount()',userdatacount,json.getEventCount())\r\n        this._motionData.events.at(userdatacount).fireTime = json.getEventTime(\r\n          userdatacount\r\n        );\r\n        this._motionData.events.at(userdatacount).value = json.getEventValue(\r\n          userdatacount\r\n        );\r\n      }\r\n\r\n      json.release();\r\n      json = void 0;\r\n      json = null;\r\n    }\r\n\r\n    /**\r\n     * モデルのパラメータ更新\r\n     *\r\n     * イベント発火のチェック。\r\n     * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\r\n     *\r\n     * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\r\n     * @param motionTimeSeconds        今回の再生時間[秒]\r\n     */\r\n    public getFiredEvent(\r\n      beforeCheckTimeSeconds: number,\r\n      motionTimeSeconds: number\r\n    ): csmVector<csmString> {\r\n      this._firedEventValues.updateSize(0);\r\n\r\n      // イベントの発火チェック\r\n      for (let u = 0; u < this._motionData.eventCount; ++u) {\r\n        if (\r\n          this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\r\n          this._motionData.events.at(u).fireTime <= motionTimeSeconds\r\n        ) {\r\n          this._firedEventValues.pushBack(\r\n            new csmString(this._motionData.events.at(u).value.s)\r\n          );\r\n        }\r\n      }\r\n\r\n      return this._firedEventValues;\r\n    }\r\n\r\n    public _sourceFrameRate: number; // ロードしたファイルのFPS。記述が無ければデフォルト値15fpsとなる\r\n    public _loopDurationSeconds: number; // mtnファイルで定義される一連のモーションの長さ\r\n    public _isLoop: boolean; // ループするか?\r\n    public _isLoopFadeIn: boolean; // ループ時にフェードインが有効かどうかのフラグ。初期値では有効。\r\n    public _lastWeight: number; // 最後に設定された重み\r\n\r\n    public _motionData: CubismMotionData; // 实际的动作数据主体\r\n\r\n\r\n    public _eyeBlinkParameterIds: csmVector<CubismIdHandle>; // 自動まばたきを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\r\n    public _lipSyncParameterIds: csmVector<CubismIdHandle>; // リップシンクを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\r\n\r\n    public _modelCurveIdEyeBlink: CubismIdHandle; // モデルが持つ自動まばたき用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n    public _modelCurveIdLipSync: CubismIdHandle; // モデルが持つリップシンク用パラメータIDのハンドル。  モデルとモーションを対応付ける。\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}