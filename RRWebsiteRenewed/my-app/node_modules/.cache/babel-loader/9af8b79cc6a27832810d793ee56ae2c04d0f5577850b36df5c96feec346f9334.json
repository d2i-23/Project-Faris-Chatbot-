{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * ベクター型（可変配列型）\n */\nexport class csmVector {\n  /**\n   * 引数付きコンストラクタ\n   * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\n   * @param zeroClear trueなら初期化時に確保した領域を0で埋める\n   */\n  constructor() {\n    let initialCapacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this._ptr = void 0;\n    // コンテナの先頭アドレス\n    this._size = void 0;\n    // コンテナの要素数\n    this._capacity = void 0;\n    if (initialCapacity < 1) {\n      this._ptr = [];\n      this._capacity = 0;\n      this._size = 0;\n    } else {\n      this._ptr = new Array(initialCapacity);\n      this._capacity = initialCapacity;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * インデックスで指定した要素を返す\n   */\n  at(index) {\n    return this._ptr[index];\n  }\n\n  /**\n   * 要素をセット\n   * @param index 要素をセットするインデックス\n   * @param value セットする要素\n   */\n  set(index, value) {\n    this._ptr[index] = value;\n  }\n\n  /**\n   * コンテナを取得する\n   */\n  get() {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const ret = new Array();\n    for (let i = offset; i < this._size; i++) {\n      ret.push(this._ptr[i]);\n    }\n    return ret;\n  }\n\n  /**\n   * pushBack処理、コンテナに新たな要素を追加する\n   * @param value PushBack処理で追加する値\n   */\n  pushBack(value) {\n    if (this._size >= this._capacity) {\n      this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);\n    }\n    this._ptr[this._size++] = value;\n  }\n\n  /**\n   * コンテナの全要素を解放する\n   */\n  clear() {\n    this._ptr.length = 0;\n    this._size = 0;\n  }\n\n  /**\n   * コンテナの要素数を返す\n   * @return コンテナの要素数\n   */\n  getSize() {\n    return this._size;\n  }\n\n  /**\n   * コンテナの全要素に対して代入処理を行う\n   * @param newSize 代入処理後のサイズ\n   * @param value 要素に代入する値\n   */\n  assign(newSize, value) {\n    const curSize = this._size;\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n    }\n\n    for (let i = 0; i < newSize; i++) {\n      this._ptr[i] = value;\n    }\n    this._size = newSize;\n  }\n\n  /**\n   * サイズ変更\n   */\n  resize(newSize) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.updateSize(newSize, value, true);\n  }\n\n  /**\n   * サイズ変更\n   */\n  updateSize(newSize) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let callPlacementNew = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const curSize = this._size;\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n\n      if (callPlacementNew) {\n        for (let i = this._size; i < newSize; i++) {\n          if (typeof value == 'function') {\n            // new\n            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\n          } // プリミティブ型なので値渡し\n          else {\n            this._ptr[i] = value;\n          }\n        }\n      } else {\n        for (let i = this._size; i < newSize; i++) {\n          this._ptr[i] = value;\n        }\n      }\n    } else {\n      // newSize <= this._size\n      //---\n      const sub = this._size - newSize;\n      this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\n    }\n\n    this._size = newSize;\n  }\n\n  /**\n   * コンテナにコンテナ要素を挿入する\n   * @param position 挿入する位置\n   * @param begin 挿入するコンテナの開始位置\n   * @param end 挿入するコンテナの終端位置\n   */\n  insert(position, begin, end) {\n    let dstSi = position._index;\n    const srcSi = begin._index;\n    const srcEi = end._index;\n    const addCount = srcEi - srcSi;\n    this.prepareCapacity(this._size + addCount);\n\n    // 挿入用の既存データをシフトして隙間を作る\n    const addSize = this._size - dstSi;\n    if (addSize > 0) {\n      for (let i = 0; i < addSize; i++) {\n        this._ptr.splice(dstSi + i, 0, null);\n      }\n    }\n    for (let i = srcSi; i < srcEi; i++, dstSi++) {\n      this._ptr[dstSi] = begin._vector._ptr[i];\n    }\n    this._size = this._size + addCount;\n  }\n\n  /**\n   * コンテナからインデックスで指定した要素を削除する\n   * @param index インデックス値\n   * @return true 削除実行\n   * @return false 削除範囲外\n   */\n  remove(index) {\n    if (index < 0 || this._size <= index) {\n      return false; // 削除範囲外\n    }\n\n    this._ptr.splice(index, 1);\n    --this._size;\n    return true;\n  }\n\n  /**\n   * コンテナから要素を削除して他の要素をシフトする\n   * @param ite 削除する要素\n   */\n  erase(ite) {\n    const index = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._ptr.splice(index, 1);\n    --this._size;\n    const ite2 = new iterator(this, index); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\n   */\n  prepareCapacity(newSize) {\n    if (newSize > this._capacity) {\n      if (this._capacity == 0) {\n        this._ptr = new Array(newSize);\n        this._capacity = newSize;\n      } else {\n        this._ptr.length = newSize;\n        this._capacity = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  begin() {\n    const ite = this._size == 0 ? this.end() : new iterator(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  end() {\n    const ite = new iterator(this, this._size);\n    return ite;\n  }\n  getOffset(offset) {\n    const newVector = new csmVector();\n    newVector._ptr = this.get(offset);\n    newVector._size = this.get(offset).length;\n    newVector._capacity = this.get(offset).length;\n    return newVector;\n  }\n\n  // コンテナ初期化のデフォルトサイズ\n}\n// コンテナのキャパシティ\ncsmVector.s_defaultSize = 10;\nexport class iterator {\n  /**\n   * コンストラクタ\n   */\n  constructor(v, index) {\n    this._index = void 0;\n    // コンテナのインデックス値\n    this._vector = void 0;\n    this._vector = v != undefined ? v : null;\n    this._index = index != undefined ? index : 0;\n  }\n\n  /**\n   * 代入\n   */\n  set(ite) {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * 前置き++演算\n   */\n  preIncrement() {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算\n   */\n  preDecrement() {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子\n   */\n  increment() {\n    const iteold = new iterator(this._vector, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子\n   */\n  decrement() {\n    const iteold = new iterator(this._vector, this._index--); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * ptr\n   */\n  ptr() {\n    return this._vector._ptr[this._index];\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  substitution(ite) {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * !=演算子のオーバーロード\n   */\n  notEqual(ite) {\n    return this._index != ite._index || this._vector != ite._vector;\n  }\n\n  // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmvector';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const csmVector = _Live2DCubismFramework.csmVector = $.csmVector;\n  const iterator = _Live2DCubismFramework.iterator = $.iterator;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["csmVector","constructor","initialCapacity","arguments","length","undefined","_ptr","_size","_capacity","Array","at","index","set","value","get","offset","ret","i","push","pushBack","prepareCapacity","s_defaultSize","clear","getSize","assign","newSize","curSize","resize","updateSize","callPlacementNew","JSON","parse","stringify","sub","splice","insert","position","begin","end","dstSi","_index","srcSi","srcEi","addCount","addSize","_vector","remove","erase","ite","ite2","iterator","getOffset","newVector","v","preIncrement","preDecrement","increment","iteold","decrement","ptr","substitution","notEqual","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/js/Framework/src/type/csmvector.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * ベクター型（可変配列型）\n */\nexport class csmVector<T> {\n  /**\n   * 引数付きコンストラクタ\n   * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\n   * @param zeroClear trueなら初期化時に確保した領域を0で埋める\n   */\n  constructor(initialCapacity = 0) {\n    if (initialCapacity < 1) {\n      this._ptr = [];\n      this._capacity = 0;\n      this._size = 0;\n    } else {\n      this._ptr = new Array(initialCapacity);\n      this._capacity = initialCapacity;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * インデックスで指定した要素を返す\n   */\n  public at(index: number): T {\n    return this._ptr[index];\n  }\n\n  /**\n   * 要素をセット\n   * @param index 要素をセットするインデックス\n   * @param value セットする要素\n   */\n  public set(index: number, value: T): void {\n    this._ptr[index] = value;\n  }\n\n  /**\n   * コンテナを取得する\n   */\n  public get(offset = 0): T[] {\n    const ret: T[] = new Array<T>();\n    for (let i = offset; i < this._size; i++) {\n      ret.push(this._ptr[i]);\n    }\n    return ret;\n  }\n\n  /**\n   * pushBack処理、コンテナに新たな要素を追加する\n   * @param value PushBack処理で追加する値\n   */\n  public pushBack(value: T): void {\n    if (this._size >= this._capacity) {\n      this.prepareCapacity(\n        this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2\n      );\n    }\n\n    this._ptr[this._size++] = value;\n  }\n\n  /**\n   * コンテナの全要素を解放する\n   */\n  public clear(): void {\n    this._ptr.length = 0;\n    this._size = 0;\n  }\n\n  /**\n   * コンテナの要素数を返す\n   * @return コンテナの要素数\n   */\n  public getSize(): number {\n    return this._size;\n  }\n\n  /**\n   * コンテナの全要素に対して代入処理を行う\n   * @param newSize 代入処理後のサイズ\n   * @param value 要素に代入する値\n   */\n  public assign(newSize: number, value: T): void {\n    const curSize = this._size;\n\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n    }\n\n    for (let i = 0; i < newSize; i++) {\n      this._ptr[i] = value;\n    }\n\n    this._size = newSize;\n  }\n\n  /**\n   * サイズ変更\n   */\n  public resize(newSize: number, value: T = null): void {\n    this.updateSize(newSize, value, true);\n  }\n\n  /**\n   * サイズ変更\n   */\n  public updateSize(\n    newSize: number,\n    value: any = null,\n    callPlacementNew = true\n  ): void {\n    const curSize: number = this._size;\n\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n\n      if (callPlacementNew) {\n        for (let i: number = this._size; i < newSize; i++) {\n          if (typeof value == 'function') {\n            // new\n            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\n          } // プリミティブ型なので値渡し\n          else {\n            this._ptr[i] = value;\n          }\n        }\n      } else {\n        for (let i: number = this._size; i < newSize; i++) {\n          this._ptr[i] = value;\n        }\n      }\n    } else {\n      // newSize <= this._size\n      //---\n      const sub = this._size - newSize;\n      this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\n    }\n    this._size = newSize;\n  }\n\n  /**\n   * コンテナにコンテナ要素を挿入する\n   * @param position 挿入する位置\n   * @param begin 挿入するコンテナの開始位置\n   * @param end 挿入するコンテナの終端位置\n   */\n  public insert(\n    position: iterator<T>,\n    begin: iterator<T>,\n    end: iterator<T>\n  ): void {\n    let dstSi: number = position._index;\n    const srcSi: number = begin._index;\n    const srcEi: number = end._index;\n\n    const addCount: number = srcEi - srcSi;\n\n    this.prepareCapacity(this._size + addCount);\n\n    // 挿入用の既存データをシフトして隙間を作る\n    const addSize = this._size - dstSi;\n    if (addSize > 0) {\n      for (let i = 0; i < addSize; i++) {\n        this._ptr.splice(dstSi + i, 0, null);\n      }\n    }\n\n    for (let i: number = srcSi; i < srcEi; i++, dstSi++) {\n      this._ptr[dstSi] = begin._vector._ptr[i];\n    }\n\n    this._size = this._size + addCount;\n  }\n\n  /**\n   * コンテナからインデックスで指定した要素を削除する\n   * @param index インデックス値\n   * @return true 削除実行\n   * @return false 削除範囲外\n   */\n  public remove(index: number): boolean {\n    if (index < 0 || this._size <= index) {\n      return false; // 削除範囲外\n    }\n\n    this._ptr.splice(index, 1);\n    --this._size;\n\n    return true;\n  }\n\n  /**\n   * コンテナから要素を削除して他の要素をシフトする\n   * @param ite 削除する要素\n   */\n  public erase(ite: iterator<T>): iterator<T> {\n    const index: number = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._ptr.splice(index, 1);\n    --this._size;\n\n    const ite2: iterator<T> = new iterator<T>(this, index); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\n   */\n  public prepareCapacity(newSize: number): void {\n    if (newSize > this._capacity) {\n      if (this._capacity == 0) {\n        this._ptr = new Array(newSize);\n        this._capacity = newSize;\n      } else {\n        this._ptr.length = newSize;\n        this._capacity = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  public begin(): iterator<T> {\n    const ite: iterator<T> =\n      this._size == 0 ? this.end() : new iterator<T>(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  public end(): iterator<T> {\n    const ite: iterator<T> = new iterator<T>(this, this._size);\n    return ite;\n  }\n\n  public getOffset(offset: number): csmVector<T> {\n    const newVector = new csmVector<T>();\n    newVector._ptr = this.get(offset);\n    newVector._size = this.get(offset).length;\n    newVector._capacity = this.get(offset).length;\n\n    return newVector;\n  }\n\n  _ptr: T[]; // コンテナの先頭アドレス\n  _size: number; // コンテナの要素数\n  _capacity: number; // コンテナのキャパシティ\n\n  static readonly s_defaultSize = 10; // コンテナ初期化のデフォルトサイズ\n}\n\nexport class iterator<T> {\n  /**\n   * コンストラクタ\n   */\n  public constructor(v?: csmVector<T>, index?: number) {\n    this._vector = v != undefined ? v : null;\n    this._index = index != undefined ? index : 0;\n  }\n\n  /**\n   * 代入\n   */\n  public set(ite: iterator<T>): iterator<T> {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * 前置き++演算\n   */\n  public preIncrement(): iterator<T> {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算\n   */\n  public preDecrement(): iterator<T> {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子\n   */\n  public increment(): iterator<T> {\n    const iteold = new iterator<T>(this._vector, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子\n   */\n  public decrement(): iterator<T> {\n    const iteold = new iterator<T>(this._vector, this._index--); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * ptr\n   */\n  public ptr(): T {\n    return this._vector._ptr[this._index];\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public substitution(ite: iterator<T>): iterator<T> {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * !=演算子のオーバーロード\n   */\n  public notEqual(ite: iterator<T>): boolean {\n    return this._index != ite._index || this._vector != ite._vector;\n  }\n\n  _index: number; // コンテナのインデックス値\n  _vector: csmVector<T>; // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmvector';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmVector = $.csmVector;\n  export type csmVector<T> = $.csmVector<T>;\n  export const iterator = $.iterator;\n  export type iterator<T> = $.iterator<T>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}