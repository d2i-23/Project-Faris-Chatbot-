{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from './cubismmath';\nconst FrameRate = 30;\nconst Epsilon = 0.01;\n\n/**\n * 顔の向きの制御機能\n *\n * 顔の向きの制御機能を提供するクラス。\n */\nexport class CubismTargetPoint {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._faceTargetX = void 0;\n    // 顔の向きのX目標値（この値に近づいていく）\n    this._faceTargetY = void 0;\n    // 顔の向きのY目標値（この値に近づいていく）\n    this._faceX = void 0;\n    // 顔の向きX（-1.0 ~ 1.0）\n    this._faceY = void 0;\n    // 顔の向きY（-1.0 ~ 1.0）\n    this._faceVX = void 0;\n    // 顔の向きの変化速度X\n    this._faceVY = void 0;\n    // 顔の向きの変化速度Y\n    this._lastTimeSeconds = void 0;\n    // 最後の実行時間[秒]\n    this._userTimeSeconds = void 0;\n    this._faceTargetX = 0.0;\n    this._faceTargetY = 0.0;\n    this._faceX = 0.0;\n    this._faceY = 0.0;\n    this._faceVX = 0.0;\n    this._faceVY = 0.0;\n    this._lastTimeSeconds = 0.0;\n    this._userTimeSeconds = 0.0;\n  }\n\n  /**\n   * 更新処理\n   */\n  update(deltaTimeSeconds) {\n    // デルタ時間を加算する\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\n    // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\n    const faceParamMaxV = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\n    const maxV = faceParamMaxV * 1.0 / FrameRate; // 1frameあたりに変化できる速度の上限\n\n    if (this._lastTimeSeconds == 0.0) {\n      this._lastTimeSeconds = this._userTimeSeconds;\n      return;\n    }\n    const deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\n    this._lastTimeSeconds = this._userTimeSeconds;\n\n    // 最高速度になるまでの時間を\n    const timeToMaxSpeed = 0.15;\n    const frameToMaxSpeed = timeToMaxSpeed * FrameRate; // sec * frame/sec\n    const maxA = deltaTimeWeight * maxV / frameToMaxSpeed; // 1frameあたりの加速度\n\n    // 目指す向きは、（dx, dy）方向のベクトルとなる\n    const dx = this._faceTargetX - this._faceX;\n    const dy = this._faceTargetY - this._faceY;\n    if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\n      return; // 変化なし\n    }\n\n    // 速度の最大よりも大きい場合は、速度を落とす\n    const d = CubismMath.sqrt(dx * dx + dy * dy);\n\n    // 進行方向の最大速度ベクトル\n    const vx = maxV * dx / d;\n    const vy = maxV * dy / d;\n\n    // 現在の速度から、新規速度への変化（加速度）を求める\n    let ax = vx - this._faceVX;\n    let ay = vy - this._faceVY;\n    const a = CubismMath.sqrt(ax * ax + ay * ay);\n\n    // 加速のとき\n    if (a < -maxA || a > maxA) {\n      ax *= maxA / a;\n      ay *= maxA / a;\n    }\n\n    // 加速度を元の速度に足して、新速度とする\n    this._faceVX += ax;\n    this._faceVY += ay;\n\n    // 目的の方向に近づいたとき、滑らかに減速するための処理\n    // 設定された加速度で止まる事の出来る距離と速度の関係から\n    // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\n    // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\n    {\n      // 加速度、速度、距離の関係式。\n      //            2  6           2               3\n      //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\n      // v = --------------------------------------\n      //                    2\n      //                 4 t  - 2\n      // (t=1)\n      // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\n      // \t考えているので、t＝１として消してよい（※未検証）\n\n      const maxV = 0.5 * (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) - maxA);\n      const curV = CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);\n      if (curV > maxV) {\n        // 現在の速度 > 最高速度のとき、最高速度まで減速\n        this._faceVX *= maxV / curV;\n        this._faceVY *= maxV / curV;\n      }\n    }\n    this._faceX += this._faceVX;\n    this._faceY += this._faceVY;\n  }\n\n  /**\n   * X軸の顔の向きの値を取得\n   *\n   * @return X軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  getX() {\n    return this._faceX;\n  }\n\n  /**\n   * Y軸の顔の向きの値を取得\n   *\n   * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  getY() {\n    return this._faceY;\n  }\n\n  /**\n   * 顔の向きの目標値を設定\n   *\n   * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\n   * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  set(x, y) {\n    this._faceTargetX = x;\n    this._faceTargetY = y;\n  }\n\n  // デルタ時間の積算値[秒]\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismtargetpoint';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismTargetPoint = _Live2DCubismFramework.CubismTargetPoint = $.CubismTargetPoint;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismMath","FrameRate","Epsilon","CubismTargetPoint","constructor","_faceTargetX","_faceTargetY","_faceX","_faceY","_faceVX","_faceVY","_lastTimeSeconds","_userTimeSeconds","update","deltaTimeSeconds","faceParamMaxV","maxV","deltaTimeWeight","timeToMaxSpeed","frameToMaxSpeed","maxA","dx","dy","abs","d","sqrt","vx","vy","ax","ay","a","curV","getX","getY","set","x","y","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["D:/Personal/PythonStuff/RR/RRWebsiteRenewed/my-app/src/Framework/src/math/cubismtargetpoint.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from './cubismmath';\n\nconst FrameRate = 30;\nconst Epsilon = 0.01;\n\n/**\n * 顔の向きの制御機能\n *\n * 顔の向きの制御機能を提供するクラス。\n */\nexport class CubismTargetPoint {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._faceTargetX = 0.0;\n    this._faceTargetY = 0.0;\n    this._faceX = 0.0;\n    this._faceY = 0.0;\n    this._faceVX = 0.0;\n    this._faceVY = 0.0;\n    this._lastTimeSeconds = 0.0;\n    this._userTimeSeconds = 0.0;\n  }\n\n  /**\n   * 更新処理\n   */\n  public update(deltaTimeSeconds: number): void {\n    // デルタ時間を加算する\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\n    // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\n    const faceParamMaxV: number = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\n    const maxV: number = (faceParamMaxV * 1.0) / FrameRate; // 1frameあたりに変化できる速度の上限\n\n    if (this._lastTimeSeconds == 0.0) {\n      this._lastTimeSeconds = this._userTimeSeconds;\n      return;\n    }\n\n    const deltaTimeWeight: number =\n      (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\n    this._lastTimeSeconds = this._userTimeSeconds;\n\n    // 最高速度になるまでの時間を\n    const timeToMaxSpeed = 0.15;\n    const frameToMaxSpeed: number = timeToMaxSpeed * FrameRate; // sec * frame/sec\n    const maxA: number = (deltaTimeWeight * maxV) / frameToMaxSpeed; // 1frameあたりの加速度\n\n    // 目指す向きは、（dx, dy）方向のベクトルとなる\n    const dx: number = this._faceTargetX - this._faceX;\n    const dy: number = this._faceTargetY - this._faceY;\n\n    if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\n      return; // 変化なし\n    }\n\n    // 速度の最大よりも大きい場合は、速度を落とす\n    const d: number = CubismMath.sqrt(dx * dx + dy * dy);\n\n    // 進行方向の最大速度ベクトル\n    const vx: number = (maxV * dx) / d;\n    const vy: number = (maxV * dy) / d;\n\n    // 現在の速度から、新規速度への変化（加速度）を求める\n    let ax: number = vx - this._faceVX;\n    let ay: number = vy - this._faceVY;\n\n    const a: number = CubismMath.sqrt(ax * ax + ay * ay);\n\n    // 加速のとき\n    if (a < -maxA || a > maxA) {\n      ax *= maxA / a;\n      ay *= maxA / a;\n    }\n\n    // 加速度を元の速度に足して、新速度とする\n    this._faceVX += ax;\n    this._faceVY += ay;\n\n    // 目的の方向に近づいたとき、滑らかに減速するための処理\n    // 設定された加速度で止まる事の出来る距離と速度の関係から\n    // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\n    // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\n    {\n      // 加速度、速度、距離の関係式。\n      //            2  6           2               3\n      //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\n      // v = --------------------------------------\n      //                    2\n      //                 4 t  - 2\n      // (t=1)\n      // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\n      // \t考えているので、t＝１として消してよい（※未検証）\n\n      const maxV: number =\n        0.5 *\n        (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\n          maxA);\n      const curV: number = CubismMath.sqrt(\n        this._faceVX * this._faceVX + this._faceVY * this._faceVY\n      );\n\n      if (curV > maxV) {\n        // 現在の速度 > 最高速度のとき、最高速度まで減速\n        this._faceVX *= maxV / curV;\n        this._faceVY *= maxV / curV;\n      }\n    }\n\n    this._faceX += this._faceVX;\n    this._faceY += this._faceVY;\n  }\n\n  /**\n   * X軸の顔の向きの値を取得\n   *\n   * @return X軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public getX(): number {\n    return this._faceX;\n  }\n\n  /**\n   * Y軸の顔の向きの値を取得\n   *\n   * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public getY(): number {\n    return this._faceY;\n  }\n\n  /**\n   * 顔の向きの目標値を設定\n   *\n   * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\n   * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public set(x: number, y: number): void {\n    this._faceTargetX = x;\n    this._faceTargetY = y;\n  }\n\n  private _faceTargetX: number; // 顔の向きのX目標値（この値に近づいていく）\n  private _faceTargetY: number; // 顔の向きのY目標値（この値に近づいていく）\n  private _faceX: number; // 顔の向きX（-1.0 ~ 1.0）\n  private _faceY: number; // 顔の向きY（-1.0 ~ 1.0）\n  private _faceVX: number; // 顔の向きの変化速度X\n  private _faceVY: number; // 顔の向きの変化速度Y\n  private _lastTimeSeconds: number; // 最後の実行時間[秒]\n  private _userTimeSeconds: number; // デルタ時間の積算値[秒]\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismtargetpoint';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismTargetPoint = $.CubismTargetPoint;\n  export type CubismTargetPoint = $.CubismTargetPoint;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}