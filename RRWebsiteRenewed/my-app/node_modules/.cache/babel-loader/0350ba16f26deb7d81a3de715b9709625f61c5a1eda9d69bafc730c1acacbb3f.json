{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as live2dcubismframework } from '../Framework/src/live2dcubismframework';\nimport { Live2DCubismFramework as cubismid } from '../Framework/src/id/cubismid';\nimport { Live2DCubismFramework as cubismusermodel } from '../Framework/src/model/cubismusermodel';\nimport { Live2DCubismFramework as icubismmodelsetting } from '../Framework/src/icubismmodelsetting';\nimport { Live2DCubismFramework as cubismmodelsettingjson } from '../Framework/src/cubismmodelsettingjson';\nimport { Live2DCubismFramework as cubismdefaultparameterid } from '../Framework/src/cubismdefaultparameterid';\nimport { Live2DCubismFramework as acubismmotion } from '../Framework/src/motion/acubismmotion';\nimport { Live2DCubismFramework as cubismeyeblink } from '../Framework/src/effect/cubismeyeblink';\nimport { Live2DCubismFramework as cubismbreath } from '../Framework/src/effect/cubismbreath';\nimport { Live2DCubismFramework as csmvector } from '../Framework/src/type/csmvector';\nimport { Live2DCubismFramework as csmmap } from '../Framework/src/type/csmmap';\nimport { Live2DCubismFramework as cubismmatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { Live2DCubismFramework as cubismmotion } from '../Framework/src/motion/cubismmotion';\nimport { Live2DCubismFramework as cubismmotionqueuemanager } from '../Framework/src/motion/cubismmotionqueuemanager';\nimport { Live2DCubismFramework as csmstring } from '../Framework/src/type/csmstring';\nimport { Live2DCubismFramework as csmrect } from '../Framework/src/type/csmrectf';\nimport { CubismLogInfo } from '../Framework/src/utils/cubismdebug';\nvar csmRect = csmrect.csmRect;\nvar csmString = csmstring.csmString;\nvar InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager.InvalidMotionQueueEntryHandleValue;\nvar CubismMotionQueueEntryHandle = cubismmotionqueuemanager.CubismMotionQueueEntryHandle;\nvar CubismMotion = cubismmotion.CubismMotion;\nvar CubismMatrix44 = cubismmatrix44.CubismMatrix44;\nvar csmMap = csmmap.csmMap;\nvar csmVector = csmvector.csmVector;\nvar CubismBreath = cubismbreath.CubismBreath;\nvar BreathParameterData = cubismbreath.BreathParameterData;\nvar CubismEyeBlink = cubismeyeblink.CubismEyeBlink;\nvar ACubismMotion = acubismmotion.ACubismMotion;\nvar FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\nvar CubismFramework = live2dcubismframework.CubismFramework;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismUserModel = cubismusermodel.CubismUserModel;\nvar ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\nvar CubismModelSettingJson = cubismmodelsettingjson.CubismModelSettingJson;\nvar CubismDefaultParameterId = cubismdefaultparameterid;\nimport { LAppPal } from './lapppal';\nimport { gl, canvas, frameBuffer, LAppDelegate } from './lappdelegate';\nimport * as LAppDefine from './lappdefine';\nimport 'whatwg-fetch';\nvar LoadStep = /*#__PURE__*/function (LoadStep) {\n  LoadStep[LoadStep[\"LoadAssets\"] = 0] = \"LoadAssets\";\n  LoadStep[LoadStep[\"LoadModel\"] = 1] = \"LoadModel\";\n  LoadStep[LoadStep[\"WaitLoadModel\"] = 2] = \"WaitLoadModel\";\n  LoadStep[LoadStep[\"LoadExpression\"] = 3] = \"LoadExpression\";\n  LoadStep[LoadStep[\"WaitLoadExpression\"] = 4] = \"WaitLoadExpression\";\n  LoadStep[LoadStep[\"LoadPhysics\"] = 5] = \"LoadPhysics\";\n  LoadStep[LoadStep[\"WaitLoadPhysics\"] = 6] = \"WaitLoadPhysics\";\n  LoadStep[LoadStep[\"LoadPose\"] = 7] = \"LoadPose\";\n  LoadStep[LoadStep[\"WaitLoadPose\"] = 8] = \"WaitLoadPose\";\n  LoadStep[LoadStep[\"SetupEyeBlink\"] = 9] = \"SetupEyeBlink\";\n  LoadStep[LoadStep[\"SetupBreath\"] = 10] = \"SetupBreath\";\n  LoadStep[LoadStep[\"LoadUserData\"] = 11] = \"LoadUserData\";\n  LoadStep[LoadStep[\"WaitLoadUserData\"] = 12] = \"WaitLoadUserData\";\n  LoadStep[LoadStep[\"SetupEyeBlinkIds\"] = 13] = \"SetupEyeBlinkIds\";\n  LoadStep[LoadStep[\"SetupLipSyncIds\"] = 14] = \"SetupLipSyncIds\";\n  LoadStep[LoadStep[\"SetupLayout\"] = 15] = \"SetupLayout\";\n  LoadStep[LoadStep[\"LoadMotion\"] = 16] = \"LoadMotion\";\n  LoadStep[LoadStep[\"WaitLoadMotion\"] = 17] = \"WaitLoadMotion\";\n  LoadStep[LoadStep[\"CompleteInitialize\"] = 18] = \"CompleteInitialize\";\n  LoadStep[LoadStep[\"CompleteSetupModel\"] = 19] = \"CompleteSetupModel\";\n  LoadStep[LoadStep[\"LoadTexture\"] = 20] = \"LoadTexture\";\n  LoadStep[LoadStep[\"WaitLoadTexture\"] = 21] = \"WaitLoadTexture\";\n  LoadStep[LoadStep[\"CompleteSetup\"] = 22] = \"CompleteSetup\";\n  return LoadStep;\n}(LoadStep || {});\n/**\r\n * ユーザーが実際に使用するモデルの実装クラス<br>\r\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\r\n */\nexport class LAppModel extends CubismUserModel {\n  /**\r\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\r\n   * @param dir\r\n   * @param fileName\r\n   */\n  loadAssets(dir, fileName) {\n    console.log('资源路径', dir);\n    this._modelHomeDir = dir;\n    fetch(`${this._modelHomeDir}/${fileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n      const setting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);\n\n      // ステートを更新\n      this._state = LoadStep.LoadModel;\n\n      // 結果を保存\n      this.setupModel(setting);\n    });\n  }\n\n  /**\r\n   * model3.jsonからモデルを生成する。\r\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\r\n   *\r\n   * @param setting ICubismModelSettingのインスタンス\r\n   */\n  setupModel(setting) {\n    this._updating = true;\n    this._initialized = false;\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n      fetch(`${this._modelHomeDir}/${modelFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        this.loadModel(arrayBuffer);\n        this._state = LoadStep.LoadExpression;\n\n        // callback\n        loadCubismExpression();\n      });\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = () => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count = this._modelSetting.getExpressionCount();\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName = this._modelSetting.getExpressionFileName(i);\n          fetch(`${this._modelHomeDir}/${expressionFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n            const motion = this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);\n            if (this._expressions.getValue(expressionName) != null) {\n              ACubismMotion.delete(this._expressions.getValue(expressionName));\n              this._expressions.setValue(expressionName, null);\n            }\n            this._expressions.setValue(expressionName, motion);\n            this._expressionCount++;\n            if (this._expressionCount >= count) {\n              this._state = LoadStep.LoadPhysics;\n\n              // callback\n              loadCubismPhysics();\n            }\n          });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = () => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n        fetch(`${this._modelHomeDir}/${physicsFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.LoadPose;\n\n          // callback\n          loadCubismPose();\n        });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = () => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n        fetch(`${this._modelHomeDir}/${poseFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.SetupEyeBlink;\n\n          // callback\n          setupEyeBlink();\n        });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = () => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = () => {\n      this._breath = CubismBreath.create();\n      const breathParameters = new csmVector();\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.0, 0.5, 3.2345, 0.5));\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = () => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n        fetch(`${this._modelHomeDir}/${userDataFile}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.SetupEyeBlinkIds;\n\n          // callback\n          setupEyeBlinkIds();\n        });\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = () => {\n      const eyeBlinkIdCount = this._modelSetting.getEyeBlinkParameterCount();\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(this._modelSetting.getEyeBlinkParameterId(i));\n      }\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = () => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = () => {\n      const layout = new csmMap();\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = () => {\n      document.getElementById('live2d-hidden').style.display = 'block';\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group = [];\n      const motionGroupCount = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      // 装入动作\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n        this._updating = false;\n        this._initialized = true;\n        this.createRenderer();\n        this.setupTextures();\n        this.getRenderer().startUp(gl);\n      }\n    };\n  }\n\n  /**\r\n   * テクスチャユニットにテクスチャをロードする\r\n   */\n  setupTextures() {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount = this._modelSetting.getTextureCount();\n      for (let modelTextureNumber = 0; modelTextureNumber < textureCount; modelTextureNumber++) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        // 在WebGL的纹理单元中加载纹理\n        let texturePath = this._modelSetting.getTextureFileName(modelTextureNumber);\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        // 加载完成时调用的回调函数\n        const onLoad = textureInfo => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n          this._textureCount++;\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\r\n   * レンダラを再構築する\r\n   */\n  reloadRenderer() {\n    this.deleteRenderer();\n    this.createRenderer();\n    this.setupTextures();\n  }\n\n  /**\r\n   * 更新\r\n   */\n  update() {\n    if (this._state != LoadStep.CompleteSetup) return;\n    const deltaTimeSeconds = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\n      // 在没有动作的运行的情况下，从待机动作中随机运行抽取，命运抽牌啦啦啦^ ^\n      let lucky = Math.floor(Math.random() * 1000 + 100);\n      if (lucky == 999) {\n        this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\n      } else if (lucky == 888) {\n        this.startRandomMotion(LAppDefine.MotionGroupDefault, LAppDefine.PriorityIdle);\n      }\n    } else {\n      motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds); // 更新动作\n    }\n\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      const value = 0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n    this._model.update();\n  }\n\n  /**\r\n   * 引数で指定したモーションの再生を開始する\r\n   * @param group モーショングループ名\r\n   * @param no グループ内の番号\r\n   * @param priority 優先度\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\r\n   */\n  startMotion(group, no, priority, onFinishedMotionHandler) {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion = this._motions.getValue(name);\n    let autoDelete = false;\n    if (motion == null) {\n      fetch(`${this._modelHomeDir}/${motionFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        motion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);\n        let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, no);\n        if (fadeTime >= 0.0) {\n          motion.setFadeInTime(fadeTime);\n        }\n        fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\n        if (fadeTime >= 0.0) {\n          motion.setFadeOutTime(fadeTime);\n        }\n        motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        autoDelete = true; // 終了時にメモリから削除\n      });\n    } else {\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\n    }\n    return this._motionManager.startMotionPriority(motion, autoDelete, priority);\n  }\n\n  /**\r\n   * ランダムに選ばれたモーションの再生を開始する。\r\n   * @param group モーショングループ名\r\n   * @param priority 優先度\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @param onFinishedMotionHandler 动作再生结束时调用的回呼函数\r\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\r\n   * @return 返回开始动作的识别号码。用于判定个别动作是否结束的isFinished（）参数。无法开始时[-1]\r\n   */\n  startRandomMotion(group, priority, onFinishedMotionHandler) {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    const no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\n  }\n\n  /**\r\n   * 引数で指定した表情モーションをセットする\r\n   *\r\n   * @param expressionId 表情モーションのID\r\n   */\n  setExpression(expressionId) {\n    const motion = this._expressions.getValue(expressionId);\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n    if (motion != null) {\n      this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\r\n   * ランダムに選ばれた表情モーションをセットする\r\n   */\n  setRandomExpression() {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n    const no = Math.floor(Math.random() * this._expressions.getSize());\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name = this._expressions._keyValues[i].first;\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\r\n   * イベントの発火を受け取る\r\n   */\n  motionEventFired(eventValue) {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\r\n   * 当たり判定テスト\r\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\r\n   * 根据指定ID的顶点列表计算矩形，判定坐标是否在矩形范围内。\r\n   *\r\n   * @param hitArenaName  当たり判定をテストする対象のID\r\n   * @param x             判定を行うX座標\r\n   * @param y             判定を行うY座標\r\n   */\n  hitTest(hitArenaName, x, y) {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n    const count = this._modelSetting.getHitAreasCount();\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n    return false;\n  }\n\n  /**\r\n   * モーションデータをグループ名から一括でロードする。\r\n   * モーションデータの名前は内部でModelSettingから取得する。\r\n   * 从组合名称中统一加载动作数据。\r\n   * 动作数据的名称在内部从ModelSetting取得。\r\n   *\r\n   * @param group モーションデータのグループ名\r\n   * group动作数据的组名称\r\n   */\n  preLoadMotionGroup(group) {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]load motion: ${motionFileName} => [${name}]`);\n      }\n      fetch(`${this._modelHomeDir}/${motionFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        const tmpMotion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name);\n        let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, i);\n        if (fadeTime >= 0.0) {\n          tmpMotion.setFadeInTime(fadeTime);\n        }\n        fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\n        if (fadeTime >= 0.0) {\n          tmpMotion.setFadeOutTime(fadeTime);\n        }\n        tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        if (this._motions.getValue(name) != null) {\n          ACubismMotion.delete(this._motions.getValue(name));\n        }\n        this._motions.setValue(name, tmpMotion);\n        this._motionCount++;\n        // console.log('this._motionCount',this._motionCount)\n        // console.log('this._allMotionCount',this._allMotionCount)\n        if (this._motionCount >= this._allMotionCount) {\n          this._state = LoadStep.LoadTexture;\n\n          // 全てのモーションを停止する\n          document.getElementById('live2d-hidden').style.display = 'none';\n          if (this._motionManager) {\n            this._motionManager.stopAllMotions();\n            this.createRenderer();\n            this.setupTextures();\n            this.getRenderer().startUp(gl);\n          }\n          this._updating = false;\n          this._initialized = true;\n\n          // this.createRenderer();\n          // this.setupTextures();\n          // this.getRenderer().startUp(gl);\n          document.getElementById('live2d').style.visibility = 'visible';\n        }\n      });\n    }\n  }\n\n  /**\r\n   * すべてのモーションデータを解放する。\r\n   */\n  releaseMotions() {\n    this._motions.clear();\n  }\n\n  /**\r\n   * 全ての表情データを解放する。\r\n   */\n  releaseExpressions() {\n    this._expressions.clear();\n  }\n\n  /**\r\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\r\n   */\n  doDraw() {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const viewport = [0, 0, canvas.width, canvas.height];\n    this.getRenderer().setRenderState(frameBuffer, viewport);\n    this.getRenderer().drawModel();\n  }\n\n  /**\r\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\r\n   */\n  draw(matrix) {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n      this.getRenderer().setMvpMatrix(matrix);\n      this.doDraw();\n    }\n  }\n\n  /**\r\n   * コンストラクタ\r\n   */\n  constructor() {\n    super();\n    this._modelSetting = void 0;\n    // モデルセッティング情報\n    this._modelHomeDir = void 0;\n    // モデルセッティングが置かれたディレクトリ\n    this._userTimeSeconds = void 0;\n    // デルタ時間の積算値[秒]\n    this._eyeBlinkIds = void 0;\n    // モデルに設定された瞬き機能用パラメータID\n    this._lipSyncIds = void 0;\n    // モデルに設定されたリップシンク機能用パラメータID\n    this._motions = void 0;\n    // 読み込まれているモーションのリスト\n    this._expressions = void 0;\n    // 読み込まれている表情のリスト\n    this._hitArea = void 0;\n    this._userArea = void 0;\n    this._idParamAngleX = void 0;\n    // パラメータID: ParamAngleX\n    this._idParamAngleY = void 0;\n    // パラメータID: ParamAngleY\n    this._idParamAngleZ = void 0;\n    // パラメータID: ParamAngleZ\n    this._idParamEyeBallX = void 0;\n    // パラメータID: ParamEyeBallX\n    this._idParamEyeBallY = void 0;\n    // パラメータID: ParamEyeBAllY\n    this._idParamBodyAngleX = void 0;\n    // パラメータID: ParamBodyAngleX\n    this._state = void 0;\n    // 現在のステータス管理用\n    this._expressionCount = void 0;\n    // 表情データカウント\n    this._textureCount = void 0;\n    // テクスチャカウント\n    this._motionCount = void 0;\n    // モーションデータカウント\n    this._allMotionCount = void 0;\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n    this._eyeBlinkIds = new csmVector();\n    this._lipSyncIds = new csmVector();\n    this._motions = new csmMap();\n    this._expressions = new csmMap();\n    this._hitArea = new csmVector();\n    this._userArea = new csmVector();\n    this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);\n    this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n  }\n\n  // モーション総数\n}","map":{"version":3,"names":["Live2DCubismFramework","live2dcubismframework","cubismid","cubismusermodel","icubismmodelsetting","cubismmodelsettingjson","cubismdefaultparameterid","acubismmotion","cubismeyeblink","cubismbreath","csmvector","csmmap","cubismmatrix44","cubismmotion","cubismmotionqueuemanager","csmstring","csmrect","CubismLogInfo","csmRect","csmString","InvalidMotionQueueEntryHandleValue","CubismMotionQueueEntryHandle","CubismMotion","CubismMatrix44","csmMap","csmVector","CubismBreath","BreathParameterData","CubismEyeBlink","ACubismMotion","FinishedMotionCallback","CubismFramework","CubismIdHandle","CubismUserModel","ICubismModelSetting","CubismModelSettingJson","CubismDefaultParameterId","LAppPal","gl","canvas","frameBuffer","LAppDelegate","LAppDefine","LoadStep","LAppModel","loadAssets","dir","fileName","console","log","_modelHomeDir","fetch","then","response","arrayBuffer","setting","byteLength","_state","LoadModel","setupModel","_updating","_initialized","_modelSetting","getModelFileName","modelFileName","loadModel","LoadExpression","loadCubismExpression","WaitLoadModel","printMessage","getExpressionCount","count","i","expressionName","getExpressionName","expressionFileName","getExpressionFileName","motion","loadExpression","_expressions","getValue","delete","setValue","_expressionCount","LoadPhysics","loadCubismPhysics","WaitLoadExpression","getPhysicsFileName","physicsFileName","loadPhysics","LoadPose","loadCubismPose","WaitLoadPhysics","getPoseFileName","poseFileName","loadPose","SetupEyeBlink","setupEyeBlink","WaitLoadPose","getEyeBlinkParameterCount","_eyeBlink","create","SetupBreath","setupBreath","_breath","breathParameters","pushBack","_idParamAngleX","_idParamAngleY","_idParamAngleZ","_idParamBodyAngleX","getIdManager","getId","ParamBreath","setParameters","LoadUserData","loadUserData","getUserDataFile","userDataFile","SetupEyeBlinkIds","setupEyeBlinkIds","WaitLoadUserData","eyeBlinkIdCount","_eyeBlinkIds","getEyeBlinkParameterId","SetupLipSyncIds","setupLipSyncIds","lipSyncIdCount","getLipSyncParameterCount","_lipSyncIds","getLipSyncParameterId","SetupLayout","setupLayout","layout","getLayoutMap","_modelMatrix","setupFromLayout","LoadMotion","loadCubismMotion","document","getElementById","style","display","WaitLoadMotion","_model","saveParameters","_allMotionCount","_motionCount","group","motionGroupCount","getMotionGroupCount","getMotionGroupName","getMotionCount","preLoadMotionGroup","LoadTexture","_motionManager","stopAllMotions","createRenderer","setupTextures","getRenderer","startUp","usePremultiply","textureCount","getTextureCount","modelTextureNumber","getTextureFileName","texturePath","onLoad","textureInfo","bindTexture","id","_textureCount","CompleteSetup","getInstance","getTextureManager","createTextureFromPngFile","setIsPremultipliedAlpha","WaitLoadTexture","reloadRenderer","deleteRenderer","update","deltaTimeSeconds","getDeltaTime","_userTimeSeconds","_dragManager","_dragX","getX","_dragY","getY","motionUpdated","loadParameters","isFinished","startRandomMotion","MotionGroupIdle","PriorityIdle","lucky","Math","floor","random","MotionGroupDefault","updateMotion","updateParameters","_expressionManager","addParameterValueById","_idParamEyeBallX","_idParamEyeBallY","_physics","evaluate","_lipsync","value","getSize","at","_pose","startMotion","no","priority","onFinishedMotionHandler","PriorityForce","setReservePriority","reserveMotion","_debugMode","motionFileName","getMotionFileName","name","_motions","autoDelete","loadMotion","fadeTime","getMotionFadeInTimeValue","setFadeInTime","getMotionFadeOutTimeValue","setFadeOutTime","setEffectIds","setFinishedMotionHandler","startMotionPriority","setExpression","expressionId","setRandomExpression","_keyValues","first","motionEventFired","eventValue","s","hitTest","hitArenaName","x","y","_opacity","getHitAreasCount","getHitAreaName","drawId","getHitAreaId","isHit","tmpMotion","visibility","releaseMotions","clear","releaseExpressions","doDraw","viewport","width","height","setRenderState","drawModel","draw","matrix","multiplyByMatrix","setMvpMatrix","constructor","_hitArea","_userArea","ParamAngleX","ParamAngleY","ParamAngleZ","ParamEyeBallX","ParamEyeBallY","ParamBodyAngleX","LoadAssets"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/dist/lappmodel.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as live2dcubismframework } from '../Framework/src/live2dcubismframework';\r\nimport { Live2DCubismFramework as cubismid } from '../Framework/src/id/cubismid';\r\nimport { Live2DCubismFramework as cubismusermodel } from '../Framework/src/model/cubismusermodel';\r\nimport { Live2DCubismFramework as icubismmodelsetting } from '../Framework/src/icubismmodelsetting';\r\nimport { Live2DCubismFramework as cubismmodelsettingjson } from '../Framework/src/cubismmodelsettingjson';\r\nimport { Live2DCubismFramework as cubismdefaultparameterid } from '../Framework/src/cubismdefaultparameterid';\r\nimport { Live2DCubismFramework as acubismmotion } from '../Framework/src/motion/acubismmotion';\r\nimport { Live2DCubismFramework as cubismeyeblink } from '../Framework/src/effect/cubismeyeblink';\r\nimport { Live2DCubismFramework as cubismbreath } from '../Framework/src/effect/cubismbreath';\r\nimport { Live2DCubismFramework as csmvector } from '../Framework/src/type/csmvector';\r\nimport { Live2DCubismFramework as csmmap } from '../Framework/src/type/csmmap';\r\nimport { Live2DCubismFramework as cubismmatrix44 } from '../Framework/src/math/cubismmatrix44';\r\nimport { Live2DCubismFramework as cubismmotion } from '../Framework/src/motion/cubismmotion';\r\nimport { Live2DCubismFramework as cubismmotionqueuemanager } from '../Framework/src/motion/cubismmotionqueuemanager';\r\nimport { Live2DCubismFramework as csmstring } from '../Framework/src/type/csmstring';\r\nimport { Live2DCubismFramework as csmrect } from '../Framework/src/type/csmrectf';\r\nimport { CubismLogInfo } from '../Framework/src/utils/cubismdebug';\r\nimport csmRect = csmrect.csmRect;\r\nimport csmString = csmstring.csmString;\r\nimport InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager.InvalidMotionQueueEntryHandleValue;\r\nimport CubismMotionQueueEntryHandle = cubismmotionqueuemanager.CubismMotionQueueEntryHandle;\r\nimport CubismMotion = cubismmotion.CubismMotion;\r\nimport CubismMatrix44 = cubismmatrix44.CubismMatrix44;\r\nimport csmMap = csmmap.csmMap;\r\nimport csmVector = csmvector.csmVector;\r\nimport CubismBreath = cubismbreath.CubismBreath;\r\nimport BreathParameterData = cubismbreath.BreathParameterData;\r\nimport CubismEyeBlink = cubismeyeblink.CubismEyeBlink;\r\nimport ACubismMotion = acubismmotion.ACubismMotion;\r\nimport FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\r\nimport CubismFramework = live2dcubismframework.CubismFramework;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismUserModel = cubismusermodel.CubismUserModel;\r\nimport ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\r\nimport CubismModelSettingJson = cubismmodelsettingjson.CubismModelSettingJson;\r\nimport CubismDefaultParameterId = cubismdefaultparameterid;\r\n\r\nimport { LAppPal } from './lapppal';\r\nimport { gl, canvas, frameBuffer, LAppDelegate } from './lappdelegate';\r\nimport { TextureInfo } from './lapptexturemanager';\r\nimport * as LAppDefine from './lappdefine';\r\nimport 'whatwg-fetch';\r\n\r\nenum LoadStep {\r\n  LoadAssets,\r\n  LoadModel,\r\n  WaitLoadModel,\r\n  LoadExpression,\r\n  WaitLoadExpression,\r\n  LoadPhysics,\r\n  WaitLoadPhysics,\r\n  LoadPose,\r\n  WaitLoadPose,\r\n  SetupEyeBlink,\r\n  SetupBreath,\r\n  LoadUserData,\r\n  WaitLoadUserData,\r\n  SetupEyeBlinkIds,\r\n  SetupLipSyncIds,\r\n  SetupLayout,\r\n  LoadMotion,\r\n  WaitLoadMotion,\r\n  CompleteInitialize,\r\n  CompleteSetupModel,\r\n  LoadTexture,\r\n  WaitLoadTexture,\r\n  CompleteSetup\r\n}\r\n\r\n/**\r\n * ユーザーが実際に使用するモデルの実装クラス<br>\r\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\r\n */\r\nexport class LAppModel extends CubismUserModel {\r\n  /**\r\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\r\n   * @param dir\r\n   * @param fileName\r\n   */\r\n  public loadAssets(dir: string, fileName: string): void {\r\n    console.log('资源路径',dir)\r\n    this._modelHomeDir = dir;\r\n    fetch(`${this._modelHomeDir}/${fileName}`)\r\n      .then(response => response.arrayBuffer())\r\n      .then(arrayBuffer => {\r\n        const setting: ICubismModelSetting = new CubismModelSettingJson(\r\n          arrayBuffer,\r\n          arrayBuffer.byteLength\r\n        );\r\n\r\n        // ステートを更新\r\n        this._state = LoadStep.LoadModel;\r\n\r\n        // 結果を保存\r\n        this.setupModel(setting);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * model3.jsonからモデルを生成する。\r\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\r\n   *\r\n   * @param setting ICubismModelSettingのインスタンス\r\n   */\r\n  private setupModel(setting: ICubismModelSetting): void {\r\n    this._updating = true;\r\n    this._initialized = false;\r\n\r\n    this._modelSetting = setting;\r\n\r\n    // CubismModel\r\n    if (this._modelSetting.getModelFileName() != '') {\r\n      const modelFileName = this._modelSetting.getModelFileName();\r\n\r\n      fetch(`${this._modelHomeDir}/${modelFileName}`)\r\n        .then(response => response.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          this.loadModel(arrayBuffer);\r\n          this._state = LoadStep.LoadExpression;\r\n\r\n          // callback\r\n          loadCubismExpression();\r\n        });\r\n\r\n      this._state = LoadStep.WaitLoadModel;\r\n    } else {\r\n      LAppPal.printMessage('Model data does not exist.');\r\n    }\r\n\r\n    // Expression\r\n    const loadCubismExpression = (): void => {\r\n      if (this._modelSetting.getExpressionCount() > 0) {\r\n        const count: number = this._modelSetting.getExpressionCount();\r\n\r\n        for (let i = 0; i < count; i++) {\r\n          const expressionName = this._modelSetting.getExpressionName(i);\r\n          const expressionFileName = this._modelSetting.getExpressionFileName(\r\n            i\r\n          );\r\n\r\n          fetch(`${this._modelHomeDir}/${expressionFileName}`)\r\n            .then(response => response.arrayBuffer())\r\n            .then(arrayBuffer => {\r\n              const motion: ACubismMotion = this.loadExpression(\r\n                arrayBuffer,\r\n                arrayBuffer.byteLength,\r\n                expressionName\r\n              );\r\n\r\n              if (this._expressions.getValue(expressionName) != null) {\r\n                ACubismMotion.delete(\r\n                  this._expressions.getValue(expressionName)\r\n                );\r\n                this._expressions.setValue(expressionName, null);\r\n              }\r\n\r\n              this._expressions.setValue(expressionName, motion);\r\n\r\n              this._expressionCount++;\r\n\r\n              if (this._expressionCount >= count) {\r\n                this._state = LoadStep.LoadPhysics;\r\n\r\n                // callback\r\n                loadCubismPhysics();\r\n              }\r\n            });\r\n        }\r\n        this._state = LoadStep.WaitLoadExpression;\r\n      } else {\r\n        this._state = LoadStep.LoadPhysics;\r\n\r\n        // callback\r\n        loadCubismPhysics();\r\n      }\r\n    };\r\n\r\n    // Physics\r\n    const loadCubismPhysics = (): void => {\r\n      if (this._modelSetting.getPhysicsFileName() != '') {\r\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\r\n\r\n        fetch(`${this._modelHomeDir}/${physicsFileName}`)\r\n          .then(response => response.arrayBuffer())\r\n          .then(arrayBuffer => {\r\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\r\n\r\n            this._state = LoadStep.LoadPose;\r\n\r\n            // callback\r\n            loadCubismPose();\r\n          });\r\n        this._state = LoadStep.WaitLoadPhysics;\r\n      } else {\r\n        this._state = LoadStep.LoadPose;\r\n\r\n        // callback\r\n        loadCubismPose();\r\n      }\r\n    };\r\n\r\n    // Pose\r\n    const loadCubismPose = (): void => {\r\n      if (this._modelSetting.getPoseFileName() != '') {\r\n        const poseFileName = this._modelSetting.getPoseFileName();\r\n\r\n        fetch(`${this._modelHomeDir}/${poseFileName}`)\r\n          .then(response => response.arrayBuffer())\r\n          .then(arrayBuffer => {\r\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength);\r\n\r\n            this._state = LoadStep.SetupEyeBlink;\r\n\r\n            // callback\r\n            setupEyeBlink();\r\n          });\r\n        this._state = LoadStep.WaitLoadPose;\r\n      } else {\r\n        this._state = LoadStep.SetupEyeBlink;\r\n\r\n        // callback\r\n        setupEyeBlink();\r\n      }\r\n    };\r\n\r\n    // EyeBlink\r\n    const setupEyeBlink = (): void => {\r\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\r\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\r\n        this._state = LoadStep.SetupBreath;\r\n      }\r\n\r\n      // callback\r\n      setupBreath();\r\n    };\r\n\r\n    // Breath\r\n    const setupBreath = (): void => {\r\n      this._breath = CubismBreath.create();\r\n\r\n      const breathParameters: csmVector<BreathParameterData> = new csmVector();\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5)\r\n      );\r\n      breathParameters.pushBack(\r\n        new BreathParameterData(\r\n          CubismFramework.getIdManager().getId(\r\n            CubismDefaultParameterId.ParamBreath\r\n          ),\r\n          0.0,\r\n          0.5,\r\n          3.2345,\r\n          0.5\r\n        )\r\n      );\r\n\r\n      this._breath.setParameters(breathParameters);\r\n      this._state = LoadStep.LoadUserData;\r\n\r\n      // callback\r\n      loadUserData();\r\n    };\r\n\r\n    // UserData\r\n    const loadUserData = (): void => {\r\n      if (this._modelSetting.getUserDataFile() != '') {\r\n        const userDataFile = this._modelSetting.getUserDataFile();\r\n\r\n        fetch(`${this._modelHomeDir}/${userDataFile}`)\r\n          .then(response => response.arrayBuffer())\r\n          .then(arrayBuffer => {\r\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\r\n\r\n            this._state = LoadStep.SetupEyeBlinkIds;\r\n\r\n            // callback\r\n            setupEyeBlinkIds();\r\n          });\r\n\r\n        this._state = LoadStep.WaitLoadUserData;\r\n      } else {\r\n        this._state = LoadStep.SetupEyeBlinkIds;\r\n\r\n        // callback\r\n        setupEyeBlinkIds();\r\n      }\r\n    };\r\n\r\n    // EyeBlinkIds\r\n    const setupEyeBlinkIds = (): void => {\r\n      const eyeBlinkIdCount: number = this._modelSetting.getEyeBlinkParameterCount();\r\n\r\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\r\n        this._eyeBlinkIds.pushBack(\r\n          this._modelSetting.getEyeBlinkParameterId(i)\r\n        );\r\n      }\r\n\r\n      this._state = LoadStep.SetupLipSyncIds;\r\n\r\n      // callback\r\n      setupLipSyncIds();\r\n    };\r\n\r\n    // LipSyncIds\r\n    const setupLipSyncIds = (): void => {\r\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\r\n\r\n      for (let i = 0; i < lipSyncIdCount; ++i) {\r\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\r\n      }\r\n      this._state = LoadStep.SetupLayout;\r\n\r\n      // callback\r\n      setupLayout();\r\n    };\r\n\r\n    // Layout\r\n    const setupLayout = (): void => {\r\n      const layout: csmMap<string, number> = new csmMap<string, number>();\r\n      this._modelSetting.getLayoutMap(layout);\r\n      this._modelMatrix.setupFromLayout(layout);\r\n      this._state = LoadStep.LoadMotion;\r\n\r\n      // callback\r\n      loadCubismMotion();\r\n    };\r\n\r\n    // Motion\r\n    const loadCubismMotion = (): void => {\r\n      document.getElementById('live2d-hidden').style.display='block'\r\n      this._state = LoadStep.WaitLoadMotion;\r\n      this._model.saveParameters();\r\n      this._allMotionCount = 0;\r\n      this._motionCount = 0;\r\n      const group: string[] = [];\r\n\r\n      const motionGroupCount: number = this._modelSetting.getMotionGroupCount();\r\n\r\n      // モーションの総数を求める\r\n      for (let i = 0; i < motionGroupCount; i++) {\r\n        group[i] = this._modelSetting.getMotionGroupName(i);\r\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\r\n      }\r\n\r\n      // モーションの読み込み\r\n      // 装入动作\r\n      for (let i = 0; i < motionGroupCount; i++) {\r\n        this.preLoadMotionGroup(group[i]);\r\n      }\r\n\r\n      // モーションがない場合\r\n      if (motionGroupCount == 0) {\r\n        this._state = LoadStep.LoadTexture;\r\n\r\n        // 全てのモーションを停止する\r\n        this._motionManager.stopAllMotions();\r\n\r\n        this._updating = false;\r\n        this._initialized = true;\r\n\r\n        this.createRenderer();\r\n        this.setupTextures();\r\n        this.getRenderer().startUp(gl);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * テクスチャユニットにテクスチャをロードする\r\n   */\r\n  private setupTextures(): void {\r\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\r\n    const usePremultiply = true;\r\n\r\n    if (this._state == LoadStep.LoadTexture) {\r\n      // テクスチャ読み込み用\r\n      const textureCount: number = this._modelSetting.getTextureCount();\r\n\r\n      for (\r\n        let modelTextureNumber = 0;\r\n        modelTextureNumber < textureCount;\r\n        modelTextureNumber++\r\n      ) {\r\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\r\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\r\n          continue;\r\n        }\r\n\r\n        // WebGLのテクスチャユニットにテクスチャをロードする\r\n        // 在WebGL的纹理单元中加载纹理\r\n        let texturePath = this._modelSetting.getTextureFileName(\r\n          modelTextureNumber\r\n        );\r\n        texturePath = this._modelHomeDir + texturePath;\r\n\r\n        // ロード完了時に呼び出すコールバック関数\r\n        // 加载完成时调用的回调函数\r\n        const onLoad = (textureInfo: TextureInfo): void => {\r\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\r\n\r\n          this._textureCount++;\r\n\r\n          if (this._textureCount >= textureCount) {\r\n            // ロード完了\r\n            this._state = LoadStep.CompleteSetup;\r\n          }\r\n        };\r\n\r\n        // 読み込み\r\n        LAppDelegate.getInstance()\r\n          .getTextureManager()\r\n          .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\r\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\r\n      }\r\n\r\n      this._state = LoadStep.WaitLoadTexture;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * レンダラを再構築する\r\n   */\r\n  public reloadRenderer(): void {\r\n    this.deleteRenderer();\r\n    this.createRenderer();\r\n    this.setupTextures();\r\n  }\r\n\r\n  /**\r\n   * 更新\r\n   */\r\n  public update(): void {\r\n    if (this._state != LoadStep.CompleteSetup) return;\r\n\r\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime();\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n    this._dragManager.update(deltaTimeSeconds);\r\n    this._dragX = this._dragManager.getX();\r\n    this._dragY = this._dragManager.getY();\r\n\r\n    // モーションによるパラメータ更新の有無\r\n    let motionUpdated = false;\r\n\r\n    //--------------------------------------------------------------------------\r\n    this._model.loadParameters(); // 前回セーブされた状態をロード\r\n    if (this._motionManager.isFinished()) {\r\n      this.startRandomMotion(\r\n        LAppDefine.MotionGroupIdle,\r\n        LAppDefine.PriorityIdle\r\n      );\r\n      // 在没有动作的运行的情况下，从待机动作中随机运行抽取，命运抽牌啦啦啦^ ^\r\n      let lucky = Math.floor(Math.random() * 1000 + 100);\r\n      if (lucky == 999) {\r\n        this.startRandomMotion(\r\n          LAppDefine.MotionGroupIdle,\r\n          LAppDefine.PriorityIdle\r\n        );\r\n      } else if (lucky == 888) {\r\n        this.startRandomMotion(\r\n          LAppDefine.MotionGroupDefault,\r\n          LAppDefine.PriorityIdle\r\n        );\r\n      }\r\n    } else {\r\n      motionUpdated = this._motionManager.updateMotion(\r\n        this._model,\r\n        deltaTimeSeconds\r\n      ); // 更新动作\r\n    }\r\n    this._model.saveParameters(); // 状態を保存\r\n    //--------------------------------------------------------------------------\r\n\r\n    // まばたき\r\n    if (!motionUpdated) {\r\n      if (this._eyeBlink != null) {\r\n        // メインモーションの更新がないとき\r\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\r\n      }\r\n    }\r\n\r\n    if (this._expressionManager != null) {\r\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\r\n    }\r\n\r\n    // ドラッグによる変化\r\n    // ドラッグによる顔の向きの調整\r\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\r\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\r\n    this._model.addParameterValueById(\r\n      this._idParamAngleZ,\r\n      this._dragX * this._dragY * -30\r\n    );\r\n\r\n    // ドラッグによる体の向きの調整\r\n    this._model.addParameterValueById(\r\n      this._idParamBodyAngleX,\r\n      this._dragX * 10\r\n    ); // -10から10の値を加える\r\n\r\n    // ドラッグによる目の向きの調整\r\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\r\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\r\n\r\n    // 呼吸など\r\n    if (this._breath != null) {\r\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\r\n    }\r\n\r\n    // 物理演算の設定\r\n    if (this._physics != null) {\r\n      this._physics.evaluate(this._model, deltaTimeSeconds);\r\n    }\r\n\r\n    // リップシンクの設定\r\n    if (this._lipsync) {\r\n      const value = 0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\r\n\r\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\r\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\r\n      }\r\n    }\r\n\r\n    // ポーズの設定\r\n    if (this._pose != null) {\r\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\r\n    }\r\n\r\n    this._model.update();\r\n  }\r\n\r\n  /**\r\n   * 引数で指定したモーションの再生を開始する\r\n   * @param group モーショングループ名\r\n   * @param no グループ内の番号\r\n   * @param priority 優先度\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\r\n   */\r\n  public startMotion(\r\n    group: string,\r\n    no: number,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (priority == LAppDefine.PriorityForce) {\r\n      this._motionManager.setReservePriority(priority);\r\n    } else if (!this._motionManager.reserveMotion(priority)) {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(\"[APP]can't start motion.\");\r\n      }\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n\r\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\r\n\r\n    // ex) idle_0\r\n    const name = `${group}_${no}`;\r\n    let motion: CubismMotion = this._motions.getValue(name) as CubismMotion;\r\n    let autoDelete = false;\r\n\r\n    if (motion == null) {\r\n      fetch(`${this._modelHomeDir}/${motionFileName}`)\r\n        .then(response => response.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          motion = this.loadMotion(\r\n            arrayBuffer,\r\n            arrayBuffer.byteLength,\r\n            null,\r\n            onFinishedMotionHandler\r\n          );\r\n          let fadeTime: number = this._modelSetting.getMotionFadeInTimeValue(\r\n            group,\r\n            no\r\n          );\r\n\r\n          if (fadeTime >= 0.0) {\r\n            motion.setFadeInTime(fadeTime);\r\n          }\r\n\r\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\r\n          if (fadeTime >= 0.0) {\r\n            motion.setFadeOutTime(fadeTime);\r\n          }\r\n\r\n          motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\r\n          autoDelete = true; // 終了時にメモリから削除\r\n        });\r\n    } else {\r\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\r\n    }\r\n\r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\r\n    }\r\n    return this._motionManager.startMotionPriority(\r\n      motion,\r\n      autoDelete,\r\n      priority\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ランダムに選ばれたモーションの再生を開始する。\r\n   * @param group モーショングループ名\r\n   * @param priority 優先度\r\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n   * @param onFinishedMotionHandler 动作再生结束时调用的回呼函数\r\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\r\n   * @return 返回开始动作的识别号码。用于判定个别动作是否结束的isFinished（）参数。无法开始时[-1]\r\n   */\r\n  public startRandomMotion(\r\n    group: string,\r\n    priority: number,\r\n    onFinishedMotionHandler?: FinishedMotionCallback\r\n  ): CubismMotionQueueEntryHandle {\r\n    if (this._modelSetting.getMotionCount(group) == 0) {\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n\r\n    const no: number = Math.floor(\r\n      Math.random() * this._modelSetting.getMotionCount(group)\r\n    );\r\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\r\n  }\r\n\r\n  /**\r\n   * 引数で指定した表情モーションをセットする\r\n   *\r\n   * @param expressionId 表情モーションのID\r\n   */\r\n  public setExpression(expressionId: string): void {\r\n    const motion: ACubismMotion = this._expressions.getValue(expressionId);\r\n\r\n    if (this._debugMode) {\r\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\r\n    }\r\n\r\n    if (motion != null) {\r\n      this._expressionManager.startMotionPriority(\r\n        motion,\r\n        false,\r\n        LAppDefine.PriorityForce\r\n      );\r\n    } else {\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ランダムに選ばれた表情モーションをセットする\r\n   */\r\n  public setRandomExpression(): void {\r\n    if (this._expressions.getSize() == 0) {\r\n      return;\r\n    }\r\n\r\n    const no: number = Math.floor(Math.random() * this._expressions.getSize());\r\n\r\n    for (let i = 0; i < this._expressions.getSize(); i++) {\r\n      if (i == no) {\r\n        const name: string = this._expressions._keyValues[i].first;\r\n        this.setExpression(name);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * イベントの発火を受け取る\r\n   */\r\n  public motionEventFired(eventValue: csmString): void {\r\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\r\n  }\r\n\r\n  /**\r\n   * 当たり判定テスト\r\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\r\n   * 根据指定ID的顶点列表计算矩形，判定坐标是否在矩形范围内。\r\n   *\r\n   * @param hitArenaName  当たり判定をテストする対象のID\r\n   * @param x             判定を行うX座標\r\n   * @param y             判定を行うY座標\r\n   */\r\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\r\n    // 透明時は当たり判定無し。\r\n    if (this._opacity < 1) {\r\n      return false;\r\n    }\r\n\r\n    const count: number = this._modelSetting.getHitAreasCount();\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\r\n        const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\r\n        return this.isHit(drawId, x, y);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * モーションデータをグループ名から一括でロードする。\r\n   * モーションデータの名前は内部でModelSettingから取得する。\r\n   * 从组合名称中统一加载动作数据。\r\n   * 动作数据的名称在内部从ModelSetting取得。\r\n   *\r\n   * @param group モーションデータのグループ名\r\n   * group动作数据的组名称\r\n   */\r\n  public preLoadMotionGroup(group: string): void {\r\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\r\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\r\n      // ex) idle_0\r\n      const name = `${group}_${i}`;\r\n      if (this._debugMode) {\r\n        LAppPal.printMessage(\r\n          `[APP]load motion: ${motionFileName} => [${name}]`\r\n        );\r\n      }\r\n\r\n      fetch(`${this._modelHomeDir}/${motionFileName}`)\r\n        .then(response => response.arrayBuffer())\r\n        .then(arrayBuffer => {\r\n          const tmpMotion: CubismMotion = this.loadMotion(\r\n            arrayBuffer,\r\n            arrayBuffer.byteLength,\r\n            name\r\n          );\r\n\r\n          let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, i);\r\n          if (fadeTime >= 0.0) {\r\n            tmpMotion.setFadeInTime(fadeTime);\r\n          }\r\n\r\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\r\n          if (fadeTime >= 0.0) {\r\n            tmpMotion.setFadeOutTime(fadeTime);\r\n          }\r\n          tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\r\n\r\n          if (this._motions.getValue(name) != null) {\r\n            ACubismMotion.delete(this._motions.getValue(name));\r\n          }\r\n\r\n          this._motions.setValue(name, tmpMotion);\r\n\r\n          this._motionCount++;\r\n          // console.log('this._motionCount',this._motionCount)\r\n          // console.log('this._allMotionCount',this._allMotionCount)\r\n          if (this._motionCount >= this._allMotionCount) {\r\n            this._state = LoadStep.LoadTexture;\r\n\r\n            // 全てのモーションを停止する\r\n            document.getElementById('live2d-hidden').style.display='none'\r\n            if(this._motionManager){\r\n              this._motionManager.stopAllMotions();\r\n              this.createRenderer();\r\n              this.setupTextures();\r\n              this.getRenderer().startUp(gl);\r\n            }\r\n\r\n            this._updating = false;\r\n            this._initialized = true;\r\n\r\n            // this.createRenderer();\r\n            // this.setupTextures();\r\n            // this.getRenderer().startUp(gl);\r\n            document.getElementById('live2d').style.visibility='visible'\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * すべてのモーションデータを解放する。\r\n   */\r\n  public releaseMotions(): void {\r\n    this._motions.clear();\r\n  }\r\n\r\n  /**\r\n   * 全ての表情データを解放する。\r\n   */\r\n  public releaseExpressions(): void {\r\n    this._expressions.clear();\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\r\n   */\r\n  public doDraw(): void {\r\n    if (this._model == null) return;\r\n\r\n    // キャンバスサイズを渡す\r\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\r\n\r\n    this.getRenderer().setRenderState(frameBuffer, viewport);\r\n    this.getRenderer().drawModel();\r\n  }\r\n\r\n  /**\r\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\r\n   */\r\n  public draw(matrix: CubismMatrix44): void {\r\n    if (this._model == null) {\r\n      return;\r\n    }\r\n\r\n    // 各読み込み終了後\r\n    if (this._state == LoadStep.CompleteSetup) {\r\n      matrix.multiplyByMatrix(this._modelMatrix);\r\n\r\n      this.getRenderer().setMvpMatrix(matrix);\r\n\r\n      this.doDraw();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンストラクタ\r\n   */\r\n  public constructor() {\r\n    super();\r\n\r\n    this._modelSetting = null;\r\n    this._modelHomeDir = null;\r\n    this._userTimeSeconds = 0.0;\r\n\r\n    this._eyeBlinkIds = new csmVector<CubismIdHandle>();\r\n    this._lipSyncIds = new csmVector<CubismIdHandle>();\r\n\r\n    this._motions = new csmMap<string, ACubismMotion>();\r\n    this._expressions = new csmMap<string, ACubismMotion>();\r\n\r\n    this._hitArea = new csmVector<csmRect>();\r\n    this._userArea = new csmVector<csmRect>();\r\n\r\n    this._idParamAngleX = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamAngleX\r\n    );\r\n    this._idParamAngleY = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamAngleY\r\n    );\r\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamAngleZ\r\n    );\r\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamEyeBallX\r\n    );\r\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamEyeBallY\r\n    );\r\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(\r\n      CubismDefaultParameterId.ParamBodyAngleX\r\n    );\r\n\r\n    this._state = LoadStep.LoadAssets;\r\n    this._expressionCount = 0;\r\n    this._textureCount = 0;\r\n    this._motionCount = 0;\r\n    this._allMotionCount = 0;\r\n  }\r\n\r\n  _modelSetting: ICubismModelSetting; // モデルセッティング情報\r\n  _modelHomeDir: string; // モデルセッティングが置かれたディレクトリ\r\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n  _eyeBlinkIds: csmVector<CubismIdHandle>; // モデルに設定された瞬き機能用パラメータID\r\n  _lipSyncIds: csmVector<CubismIdHandle>; // モデルに設定されたリップシンク機能用パラメータID\r\n\r\n  _motions: csmMap<string, ACubismMotion>; // 読み込まれているモーションのリスト\r\n  _expressions: csmMap<string, ACubismMotion>; // 読み込まれている表情のリスト\r\n\r\n  _hitArea: csmVector<csmRect>;\r\n  _userArea: csmVector<csmRect>;\r\n\r\n  _idParamAngleX: CubismIdHandle; // パラメータID: ParamAngleX\r\n  _idParamAngleY: CubismIdHandle; // パラメータID: ParamAngleY\r\n  _idParamAngleZ: CubismIdHandle; // パラメータID: ParamAngleZ\r\n  _idParamEyeBallX: CubismIdHandle; // パラメータID: ParamEyeBallX\r\n  _idParamEyeBallY: CubismIdHandle; // パラメータID: ParamEyeBAllY\r\n  _idParamBodyAngleX: CubismIdHandle; // パラメータID: ParamBodyAngleX\r\n\r\n  _state: number; // 現在のステータス管理用\r\n  _expressionCount: number; // 表情データカウント\r\n  _textureCount: number; // テクスチャカウント\r\n  _motionCount: number; // モーションデータカウント\r\n  _allMotionCount: number; // モーション総数\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}