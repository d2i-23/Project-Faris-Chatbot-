{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismframework } from './live2dcubismframework';\nimport { Live2DCubismFramework as icubismmodelsetting } from './icubismmodelsetting';\nimport { Live2DCubismFramework as cubismid } from './id/cubismid';\nimport { Live2DCubismFramework as cubismjson } from './utils/cubismjson';\nimport { Live2DCubismFramework as csmmap } from './type/csmmap';\nimport { Live2DCubismFramework as csmvector } from './type/csmvector';\nvar csmVector = csmvector.csmVector;\nvar csmMap = csmmap.csmMap;\nvar iterator = csmmap.iterator;\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismJson = cubismjson.CubismJson;\nvar Value = cubismjson.Value;\nvar ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  /**\r\n   * Model3Jsonのキー文字列\r\n   */\n\n  // JSON Keys\n  const Version = 'Version';\n  const FileReferences = 'FileReferences';\n  const Groups = 'Groups';\n  const Layout = 'Layout';\n  const HitAreas = 'HitAreas';\n  const Moc = 'Moc';\n  const Textures = 'Textures';\n  const Physics = 'Physics';\n  const Pose = 'Pose';\n  const Expressions = 'Expressions';\n  const Motions = 'Motions';\n  const UserData = 'UserData';\n  const Name = 'Name';\n  const FilePath = 'File';\n  const Id = 'Id';\n  const Ids = 'Ids';\n  const Target = 'Target';\n\n  // Motions\n  const Idle = 'Idle';\n  const TapBody = 'TapBody';\n  const PinchIn = 'PinchIn';\n  const PinchOut = 'PinchOut';\n  const Shake = 'Shake';\n  const FlickHead = 'FlickHead';\n  const Parameter = 'Parameter';\n  const SoundPath = 'Sound';\n  const FadeInTime = 'FadeInTime';\n  const FadeOutTime = 'FadeOutTime';\n\n  // Layout\n  const CenterX = 'CenterX';\n  const CenterY = 'CenterY';\n  const X = 'X';\n  const Y = 'Y';\n  const Width = 'Width';\n  const Height = 'Height';\n  const LipSync = 'LipSync';\n  const EyeBlink = 'EyeBlink';\n  const InitParameter = 'init_param';\n  const InitPartsVisible = 'init_parts_visible';\n  const Val = 'val';\n  let FrequestNode = /*#__PURE__*/function (FrequestNode) {\n    FrequestNode[FrequestNode[\"FrequestNode_Groups\"] = 0] = \"FrequestNode_Groups\";\n    FrequestNode[FrequestNode[\"FrequestNode_Moc\"] = 1] = \"FrequestNode_Moc\";\n    FrequestNode[FrequestNode[\"FrequestNode_Motions\"] = 2] = \"FrequestNode_Motions\";\n    FrequestNode[FrequestNode[\"FrequestNode_Expressions\"] = 3] = \"FrequestNode_Expressions\";\n    FrequestNode[FrequestNode[\"FrequestNode_Textures\"] = 4] = \"FrequestNode_Textures\";\n    FrequestNode[FrequestNode[\"FrequestNode_Physics\"] = 5] = \"FrequestNode_Physics\";\n    FrequestNode[FrequestNode[\"FrequestNode_Pose\"] = 6] = \"FrequestNode_Pose\";\n    FrequestNode[FrequestNode[\"FrequestNode_HitAreas\"] = 7] = \"FrequestNode_HitAreas\";\n    return FrequestNode;\n  }({});\n  /**\r\n   * Model3Jsonパーサー\r\n   *\r\n   * model3.jsonファイルをパースして値を取得する\r\n   */\n  class CubismModelSettingJson extends ICubismModelSetting {\n    /**\r\n     * 引数付きコンストラクタ\r\n     *\r\n     * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\r\n     * @param size      Model3Jsonのデータサイズ\r\n     */\n    constructor(buffer, size) {\n      super();\n      this._json = void 0;\n      this._jsonValue = void 0;\n      this._json = CubismJson.create(buffer, size);\n      if (this._json) {\n        this._jsonValue = new csmVector();\n\n        // 順番はenum FrequestNodeと一致させる\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(Groups));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Moc));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Motions));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Expressions));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Textures));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Physics));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(FileReferences).getValueByString(Pose));\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(HitAreas));\n      }\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      CubismJson.delete(this._json);\n      this._jsonValue = null;\n    }\n\n    /**\r\n     * CubismJsonオブジェクトを取得する\r\n     *\r\n     * @return CubismJson\r\n     */\n    GetJson() {\n      return this._json;\n    }\n\n    /**\r\n     * Mocファイルの名前を取得する\r\n     * @return Mocファイルの名前\r\n     */\n    getModelFileName() {\n      if (!this.isExistModelFile()) {\n        return '';\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\n    }\n\n    /**\r\n     * モデルが使用するテクスチャの数を取得する\r\n     * テクスチャの数\r\n     */\n    getTextureCount() {\n      if (!this.isExistTextureFiles()) {\n        return 0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\n    }\n\n    /**\r\n     * テクスチャが配置されたディレクトリの名前を取得する\r\n     * @return テクスチャが配置されたディレクトリの名前\r\n     */\n    getTextureDirectory() {\n      return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getRawString();\n    }\n\n    /**\r\n     * モデルが使用するテクスチャの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return テクスチャの名前\r\n     */\n    getTextureFileName(index) {\n      return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getValueByIndex(index).getRawString();\n    }\n\n    /**\r\n     * モデルに設定された当たり判定の数を取得する\r\n     * @return モデルに設定された当たり判定の数\r\n     */\n    getHitAreasCount() {\n      if (!this.isExistHitAreas()) {\n        return 0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\n    }\n\n    /**\r\n     * 当たり判定に設定されたIDを取得する\r\n     *\r\n     * @param index 配列のindex\r\n     * @return 当たり判定に設定されたID\r\n     */\n    getHitAreaId(index) {\n      return CubismFramework.getIdManager().getId(this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getValueByIndex(index).getValueByString(Id).getRawString());\n    }\n\n    /**\r\n     * 当たり判定に設定された名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 当たり判定に設定された名前\r\n     */\n    getHitAreaName(index) {\n      return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getValueByIndex(index).getValueByString(Name).getRawString();\n    }\n\n    /**\r\n     * 物理演算設定ファイルの名前を取得する\r\n     * @return 物理演算設定ファイルの名前\r\n     */\n    getPhysicsFileName() {\n      if (!this.isExistPhysicsFile()) {\n        return '';\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\n    }\n\n    /**\r\n     * パーツ切り替え設定ファイルの名前を取得する\r\n     * @return パーツ切り替え設定ファイルの名前\r\n     */\n    getPoseFileName() {\n      if (!this.isExistPoseFile()) {\n        return '';\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\n    }\n\n    /**\r\n     * 表情設定ファイルの数を取得する\r\n     * @return 表情設定ファイルの数\r\n     */\n    getExpressionCount() {\n      if (!this.isExistExpressionFile()) {\n        return 0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\n    }\n\n    /**\r\n     * 表情設定ファイルを識別する名前（別名）を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 表情の名前\r\n     */\n    getExpressionName(index) {\n      return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getValueByIndex(index).getValueByString(Name).getRawString();\n    }\n\n    /**\r\n     * 表情設定ファイルの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 表情設定ファイルの名前\r\n     */\n    getExpressionFileName(index) {\n      return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getValueByIndex(index).getValueByString(FilePath).getRawString();\n    }\n\n    /**\r\n     * モーショングループの数を取得する\r\n     * @return モーショングループの数\r\n     */\n    getMotionGroupCount() {\n      if (!this.isExistMotionGroups()) {\n        return 0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getKeys().getSize();\n    }\n\n    /**\r\n     * モーショングループの名前を取得する\r\n     * 获取动作组的名称\r\n     * @param index 配列のインデックス値\r\n     * @return モーショングループの名前\r\n     * @param index 排列的索引值\r\n     * @return 动作组的名称\r\n     */\n    getMotionGroupName(index) {\n      if (!this.isExistMotionGroups()) {\n        return null;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getKeys().at(index);\n    }\n\n    /**\r\n     * モーショングループに含まれるモーションの数を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @return モーショングループの数\r\n     */\n    getMotionCount(groupName) {\n      if (!this.isExistMotionGroupName(groupName)) {\n        return 0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getSize();\n    }\n\n    /**\r\n     * グループ名とインデックス値からモーションファイル名を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index     配列のインデックス値\r\n     * @return モーションファイルの名前\r\n     */\n    getMotionFileName(groupName, index) {\n      if (!this.isExistMotionGroupName(groupName)) {\n        return '';\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FilePath).getRawString();\n    }\n\n    /**\r\n     * モーションに対応するサウンドファイルの名前を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return サウンドファイルの名前\r\n     */\n    getMotionSoundFileName(groupName, index) {\n      if (!this.isExistMotionSoundFile(groupName, index)) {\n        return '';\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(SoundPath).getRawString();\n    }\n\n    /**\r\n     * モーション開始時のフェードイン処理時間を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return フェードイン処理時間[秒]\r\n     */\n    getMotionFadeInTimeValue(groupName, index) {\n      if (!this.isExistMotionFadeIn(groupName, index)) {\n        return -1.0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeInTime).toFloat();\n    }\n\n    /**\r\n     * モーション終了時のフェードアウト処理時間を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return フェードアウト処理時間[秒]\r\n     */\n    getMotionFadeOutTimeValue(groupName, index) {\n      if (!this.isExistMotionFadeOut(groupName, index)) {\n        return -1.0;\n      }\n      return this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeOutTime).toFloat();\n    }\n\n    /**\r\n     * ユーザーデータのファイル名を取得する\r\n     * @return ユーザーデータのファイル名\r\n     */\n    getUserDataFile() {\n      if (!this.isExistUserDataFile()) {\n        return '';\n      }\n      return this._json.getRoot().getValueByString(FileReferences).getValueByString(UserData).getRawString();\n    }\n\n    /**\r\n     * レイアウト情報を取得する\r\n     * @param outLayoutMap csmMapクラスのインスタンス\r\n     * @return true レイアウト情報が存在する\r\n     * @return false レイアウト情報が存在しない\r\n     */\n    getLayoutMap(outLayoutMap) {\n      // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\n      const map = this._json.getRoot().getValueByString(Layout).getMap();\n      if (map == null) {\n        return false;\n      }\n      let ret = false;\n      for (const ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {\n        outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\n        ret = true;\n      }\n      return ret;\n    }\n\n    /**\r\n     * 目パチに関連付けられたパラメータの数を取得する\r\n     * @return 目パチに関連付けられたパラメータの数\r\n     */\n    getEyeBlinkParameterCount() {\n      if (!this.isExistEyeBlinkParameters()) {\n        return 0;\n      }\n      let num = 0;\n      for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n        const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n        if (refI.isNull() || refI.isError()) {\n          continue;\n        }\n        if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n          num = refI.getValueByString(Ids).getVector().getSize();\n          break;\n        }\n      }\n      return num;\n    }\n\n    /**\r\n     * 目パチに関連付けられたパラメータのIDを取得する\r\n     * @param index 配列のインデックス値\r\n     * @return パラメータID\r\n     */\n    getEyeBlinkParameterId(index) {\n      if (!this.isExistEyeBlinkParameters()) {\n        return null;\n      }\n      for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n        const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n        if (refI.isNull() || refI.isError()) {\n          continue;\n        }\n        if (refI.getValueByString(Name).getRawString() == EyeBlink) {\n          return CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());\n        }\n      }\n      return null;\n    }\n\n    /**\r\n     * リップシンクに関連付けられたパラメータの数を取得する\r\n     * @return リップシンクに関連付けられたパラメータの数\r\n     */\n    getLipSyncParameterCount() {\n      if (!this.isExistLipSyncParameters()) {\n        return 0;\n      }\n      let num = 0;\n      for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n        const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n        if (refI.isNull() || refI.isError()) {\n          continue;\n        }\n        if (refI.getValueByString(Name).getRawString() == LipSync) {\n          num = refI.getValueByString(Ids).getVector().getSize();\n          break;\n        }\n      }\n      return num;\n    }\n\n    /**\r\n     * リップシンクに関連付けられたパラメータの数を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return パラメータID\r\n     */\n    getLipSyncParameterId(index) {\n      if (!this.isExistLipSyncParameters()) {\n        return null;\n      }\n      for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\n        const refI = this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i);\n        if (refI.isNull() || refI.isError()) {\n          continue;\n        }\n        if (refI.getValueByString(Name).getRawString() == LipSync) {\n          return CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());\n        }\n      }\n      return null;\n    }\n\n    /**\r\n     * モデルファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistModelFile() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * テクスチャファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistTextureFiles() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 当たり判定のキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistHitAreas() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 物理演算ファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistPhysicsFile() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * ポーズ設定ファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistPoseFile() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 表情設定ファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistExpressionFile() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * モーショングループのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistMotionGroups() {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 引数で指定したモーショングループのキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistMotionGroupName(groupName) {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @param index 配列のインデックス値\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistMotionSoundFile(groupName, index) {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(SoundPath);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @param index 配列のインデックス値\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistMotionFadeIn(groupName, index) {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeInTime);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @param index 配列のインデックス値\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistMotionFadeOut(groupName, index) {\n      const node = this._jsonValue.at(FrequestNode.FrequestNode_Motions).getValueByString(groupName).getValueByIndex(index).getValueByString(FadeOutTime);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * UserDataのファイル名が存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistUserDataFile() {\n      const node = this._json.getRoot().getValueByString(FileReferences).getValueByString(UserData);\n      return !node.isNull() && !node.isError();\n    }\n\n    /**\r\n     * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistEyeBlinkParameters() {\n      if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() || this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\n        return false;\n      }\n      for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\n        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i).getValueByString(Name).getRawString() == EyeBlink) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\r\n     * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\n    isExistLipSyncParameters() {\n      if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() || this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\n        return false;\n      }\n      for (let i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\n        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).getValueByIndex(i).getValueByString(Name).getRawString() == LipSync) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  _Live2DCubismFramework.CubismModelSettingJson = CubismModelSettingJson;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismframework","icubismmodelsetting","cubismid","cubismjson","csmmap","csmvector","csmVector","csmMap","iterator","CubismFramework","CubismIdHandle","CubismJson","Value","ICubismModelSetting","_Live2DCubismFramework","Version","FileReferences","Groups","Layout","HitAreas","Moc","Textures","Physics","Pose","Expressions","Motions","UserData","Name","FilePath","Id","Ids","Target","Idle","TapBody","PinchIn","PinchOut","Shake","FlickHead","Parameter","SoundPath","FadeInTime","FadeOutTime","CenterX","CenterY","X","Y","Width","Height","LipSync","EyeBlink","InitParameter","InitPartsVisible","Val","FrequestNode","CubismModelSettingJson","constructor","buffer","size","_json","_jsonValue","create","pushBack","getRoot","getValueByString","release","delete","GetJson","getModelFileName","isExistModelFile","at","FrequestNode_Moc","getRawString","getTextureCount","isExistTextureFiles","FrequestNode_Textures","getSize","getTextureDirectory","getTextureFileName","index","getValueByIndex","getHitAreasCount","isExistHitAreas","FrequestNode_HitAreas","getHitAreaId","getIdManager","getId","getHitAreaName","getPhysicsFileName","isExistPhysicsFile","FrequestNode_Physics","getPoseFileName","isExistPoseFile","FrequestNode_Pose","getExpressionCount","isExistExpressionFile","FrequestNode_Expressions","getExpressionName","getExpressionFileName","getMotionGroupCount","isExistMotionGroups","FrequestNode_Motions","getKeys","getMotionGroupName","getMotionCount","groupName","isExistMotionGroupName","getMotionFileName","getMotionSoundFileName","isExistMotionSoundFile","getMotionFadeInTimeValue","isExistMotionFadeIn","toFloat","getMotionFadeOutTimeValue","isExistMotionFadeOut","getUserDataFile","isExistUserDataFile","getLayoutMap","outLayoutMap","map","getMap","ret","ite","begin","notEqual","end","preIncrement","setValue","ptr","first","second","getEyeBlinkParameterCount","isExistEyeBlinkParameters","num","i","FrequestNode_Groups","refI","isNull","isError","getVector","getEyeBlinkParameterId","getLipSyncParameterCount","isExistLipSyncParameters","getLipSyncParameterId","node"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/cubismmodelsettingjson.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismframework } from './live2dcubismframework';\r\nimport { Live2DCubismFramework as icubismmodelsetting } from './icubismmodelsetting';\r\nimport { Live2DCubismFramework as cubismid } from './id/cubismid';\r\nimport { Live2DCubismFramework as cubismjson } from './utils/cubismjson';\r\nimport { Live2DCubismFramework as csmmap } from './type/csmmap';\r\nimport { Live2DCubismFramework as csmvector } from './type/csmvector';\r\nimport csmVector = csmvector.csmVector;\r\nimport csmMap = csmmap.csmMap;\r\nimport iterator = csmmap.iterator;\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismJson = cubismjson.CubismJson;\r\nimport Value = cubismjson.Value;\r\nimport ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * Model3Jsonのキー文字列\r\n   */\r\n\r\n  // JSON Keys\r\n  const Version = 'Version';\r\n  const FileReferences = 'FileReferences';\r\n  const Groups = 'Groups';\r\n  const Layout = 'Layout';\r\n  const HitAreas = 'HitAreas';\r\n\r\n  const Moc = 'Moc';\r\n  const Textures = 'Textures';\r\n  const Physics = 'Physics';\r\n  const Pose = 'Pose';\r\n  const Expressions = 'Expressions';\r\n  const Motions = 'Motions';\r\n\r\n  const UserData = 'UserData';\r\n  const Name = 'Name';\r\n  const FilePath = 'File';\r\n  const Id = 'Id';\r\n  const Ids = 'Ids';\r\n  const Target = 'Target';\r\n\r\n  // Motions\r\n  const Idle = 'Idle';\r\n  const TapBody = 'TapBody';\r\n  const PinchIn = 'PinchIn';\r\n  const PinchOut = 'PinchOut';\r\n  const Shake = 'Shake';\r\n  const FlickHead = 'FlickHead';\r\n  const Parameter = 'Parameter';\r\n\r\n  const SoundPath = 'Sound';\r\n  const FadeInTime = 'FadeInTime';\r\n  const FadeOutTime = 'FadeOutTime';\r\n\r\n  // Layout\r\n  const CenterX = 'CenterX';\r\n  const CenterY = 'CenterY';\r\n  const X = 'X';\r\n  const Y = 'Y';\r\n  const Width = 'Width';\r\n  const Height = 'Height';\r\n\r\n  const LipSync = 'LipSync';\r\n  const EyeBlink = 'EyeBlink';\r\n\r\n  const InitParameter = 'init_param';\r\n  const InitPartsVisible = 'init_parts_visible';\r\n  const Val = 'val';\r\n\r\n  enum FrequestNode {\r\n    FrequestNode_Groups, // getRoot().getValueByString(Groups)\r\n    FrequestNode_Moc, // getRoot().getValueByString(FileReferences).getValueByString(Moc)\r\n    FrequestNode_Motions, // getRoot().getValueByString(FileReferences).getValueByString(Motions)\r\n    FrequestNode_Expressions, // getRoot().getValueByString(FileReferences).getValueByString(Expressions)\r\n    FrequestNode_Textures, // getRoot().getValueByString(FileReferences).getValueByString(Textures)\r\n    FrequestNode_Physics, // getRoot().getValueByString(FileReferences).getValueByString(Physics)\r\n    FrequestNode_Pose, // getRoot().getValueByString(FileReferences).getValueByString(Pose)\r\n    FrequestNode_HitAreas // getRoot().getValueByString(HitAreas)\r\n  }\r\n\r\n  /**\r\n   * Model3Jsonパーサー\r\n   *\r\n   * model3.jsonファイルをパースして値を取得する\r\n   */\r\n  export class CubismModelSettingJson extends ICubismModelSetting {\r\n    /**\r\n     * 引数付きコンストラクタ\r\n     *\r\n     * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\r\n     * @param size      Model3Jsonのデータサイズ\r\n     */\r\n    public constructor(buffer: ArrayBuffer, size: number) {\r\n      super();\r\n      this._json = CubismJson.create(buffer, size);\r\n\r\n      if (this._json) {\r\n        this._jsonValue = new csmVector<Value>();\r\n\r\n        // 順番はenum FrequestNodeと一致させる\r\n        this._jsonValue.pushBack(this._json.getRoot().getValueByString(Groups));\r\n        this._jsonValue.pushBack(\r\n          this._json\r\n            .getRoot()\r\n            .getValueByString(FileReferences)\r\n            .getValueByString(Moc)\r\n        );\r\n        this._jsonValue.pushBack(\r\n          this._json\r\n            .getRoot()\r\n            .getValueByString(FileReferences)\r\n            .getValueByString(Motions)\r\n        );\r\n        this._jsonValue.pushBack(\r\n          this._json\r\n            .getRoot()\r\n            .getValueByString(FileReferences)\r\n            .getValueByString(Expressions)\r\n        );\r\n        this._jsonValue.pushBack(\r\n          this._json\r\n            .getRoot()\r\n            .getValueByString(FileReferences)\r\n            .getValueByString(Textures)\r\n        );\r\n        this._jsonValue.pushBack(\r\n          this._json\r\n            .getRoot()\r\n            .getValueByString(FileReferences)\r\n            .getValueByString(Physics)\r\n        );\r\n        this._jsonValue.pushBack(\r\n          this._json\r\n            .getRoot()\r\n            .getValueByString(FileReferences)\r\n            .getValueByString(Pose)\r\n        );\r\n        this._jsonValue.pushBack(\r\n          this._json.getRoot().getValueByString(HitAreas)\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      CubismJson.delete(this._json);\r\n\r\n      this._jsonValue = null;\r\n    }\r\n\r\n    /**\r\n     * CubismJsonオブジェクトを取得する\r\n     *\r\n     * @return CubismJson\r\n     */\r\n    public GetJson(): CubismJson {\r\n      return this._json;\r\n    }\r\n\r\n    /**\r\n     * Mocファイルの名前を取得する\r\n     * @return Mocファイルの名前\r\n     */\r\n    public getModelFileName(): string {\r\n      if (!this.isExistModelFile()) {\r\n        return '';\r\n      }\r\n      return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\r\n    }\r\n\r\n    /**\r\n     * モデルが使用するテクスチャの数を取得する\r\n     * テクスチャの数\r\n     */\r\n    public getTextureCount(): number {\r\n      if (!this.isExistTextureFiles()) {\r\n        return 0;\r\n      }\r\n\r\n      return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\r\n    }\r\n\r\n    /**\r\n     * テクスチャが配置されたディレクトリの名前を取得する\r\n     * @return テクスチャが配置されたディレクトリの名前\r\n     */\r\n    public getTextureDirectory(): string {\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Textures)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * モデルが使用するテクスチャの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return テクスチャの名前\r\n     */\r\n    public getTextureFileName(index: number): string {\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Textures)\r\n        .getValueByIndex(index)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * モデルに設定された当たり判定の数を取得する\r\n     * @return モデルに設定された当たり判定の数\r\n     */\r\n    public getHitAreasCount(): number {\r\n      if (!this.isExistHitAreas()) {\r\n        return 0;\r\n      }\r\n\r\n      return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\r\n    }\r\n\r\n    /**\r\n     * 当たり判定に設定されたIDを取得する\r\n     *\r\n     * @param index 配列のindex\r\n     * @return 当たり判定に設定されたID\r\n     */\r\n    public getHitAreaId(index: number): CubismIdHandle {\r\n      return CubismFramework.getIdManager().getId(\r\n        this._jsonValue\r\n          .at(FrequestNode.FrequestNode_HitAreas)\r\n          .getValueByIndex(index)\r\n          .getValueByString(Id)\r\n          .getRawString()\r\n      );\r\n    }\r\n\r\n    /**\r\n     * 当たり判定に設定された名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 当たり判定に設定された名前\r\n     */\r\n    public getHitAreaName(index: number): string {\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_HitAreas)\r\n        .getValueByIndex(index)\r\n        .getValueByString(Name)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * 物理演算設定ファイルの名前を取得する\r\n     * @return 物理演算設定ファイルの名前\r\n     */\r\n    public getPhysicsFileName(): string {\r\n      if (!this.isExistPhysicsFile()) {\r\n        return '';\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Physics)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * パーツ切り替え設定ファイルの名前を取得する\r\n     * @return パーツ切り替え設定ファイルの名前\r\n     */\r\n    public getPoseFileName(): string {\r\n      if (!this.isExistPoseFile()) {\r\n        return '';\r\n      }\r\n\r\n      return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\r\n    }\r\n\r\n    /**\r\n     * 表情設定ファイルの数を取得する\r\n     * @return 表情設定ファイルの数\r\n     */\r\n    public getExpressionCount(): number {\r\n      if (!this.isExistExpressionFile()) {\r\n        return 0;\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Expressions)\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * 表情設定ファイルを識別する名前（別名）を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 表情の名前\r\n     */\r\n    public getExpressionName(index: number): string {\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Expressions)\r\n        .getValueByIndex(index)\r\n        .getValueByString(Name)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * 表情設定ファイルの名前を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return 表情設定ファイルの名前\r\n     */\r\n    public getExpressionFileName(index: number): string {\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Expressions)\r\n        .getValueByIndex(index)\r\n        .getValueByString(FilePath)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * モーショングループの数を取得する\r\n     * @return モーショングループの数\r\n     */\r\n    public getMotionGroupCount(): number {\r\n      if (!this.isExistMotionGroups()) {\r\n        return 0;\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getKeys()\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * モーショングループの名前を取得する\r\n     * 获取动作组的名称\r\n     * @param index 配列のインデックス値\r\n     * @return モーショングループの名前\r\n     * @param index 排列的索引值\r\n     * @return 动作组的名称\r\n     */\r\n    public getMotionGroupName(index: number): string {\r\n      if (!this.isExistMotionGroups()) {\r\n        return null;\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getKeys()\r\n        .at(index);\r\n    }\r\n\r\n    /**\r\n     * モーショングループに含まれるモーションの数を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @return モーショングループの数\r\n     */\r\n    public getMotionCount(groupName: string): number {\r\n      if (!this.isExistMotionGroupName(groupName)) {\r\n        return 0;\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * グループ名とインデックス値からモーションファイル名を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index     配列のインデックス値\r\n     * @return モーションファイルの名前\r\n     */\r\n    public getMotionFileName(groupName: string, index: number): string {\r\n      if (!this.isExistMotionGroupName(groupName)) {\r\n        return '';\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(FilePath)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * モーションに対応するサウンドファイルの名前を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return サウンドファイルの名前\r\n     */\r\n    public getMotionSoundFileName(groupName: string, index: number): string {\r\n      if (!this.isExistMotionSoundFile(groupName, index)) {\r\n        return '';\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(SoundPath)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * モーション開始時のフェードイン処理時間を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return フェードイン処理時間[秒]\r\n     */\r\n    public getMotionFadeInTimeValue(groupName: string, index: number): number {\r\n      if (!this.isExistMotionFadeIn(groupName, index)) {\r\n        return -1.0;\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(FadeInTime)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーション終了時のフェードアウト処理時間を取得する\r\n     * @param groupName モーショングループの名前\r\n     * @param index 配列のインデックス値\r\n     * @return フェードアウト処理時間[秒]\r\n     */\r\n    public getMotionFadeOutTimeValue(groupName: string, index: number): number {\r\n      if (!this.isExistMotionFadeOut(groupName, index)) {\r\n        return -1.0;\r\n      }\r\n\r\n      return this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(FadeOutTime)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * ユーザーデータのファイル名を取得する\r\n     * @return ユーザーデータのファイル名\r\n     */\r\n    public getUserDataFile(): string {\r\n      if (!this.isExistUserDataFile()) {\r\n        return '';\r\n      }\r\n\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(FileReferences)\r\n        .getValueByString(UserData)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * レイアウト情報を取得する\r\n     * @param outLayoutMap csmMapクラスのインスタンス\r\n     * @return true レイアウト情報が存在する\r\n     * @return false レイアウト情報が存在しない\r\n     */\r\n    public getLayoutMap(outLayoutMap: csmMap<string, number>): boolean {\r\n      // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\r\n      const map: csmMap<string, Value> = this._json\r\n        .getRoot()\r\n        .getValueByString(Layout)\r\n        .getMap();\r\n\r\n      if (map == null) {\r\n        return false;\r\n      }\r\n\r\n      let ret = false;\r\n\r\n      for (\r\n        const ite: iterator<string, Value> = map.begin();\r\n        ite.notEqual(map.end());\r\n        ite.preIncrement()\r\n      ) {\r\n        outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\r\n        ret = true;\r\n      }\r\n\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * 目パチに関連付けられたパラメータの数を取得する\r\n     * @return 目パチに関連付けられたパラメータの数\r\n     */\r\n    public getEyeBlinkParameterCount(): number {\r\n      if (!this.isExistEyeBlinkParameters()) {\r\n        return 0;\r\n      }\r\n\r\n      let num = 0;\r\n      for (\r\n        let i = 0;\r\n        i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n        i++\r\n      ) {\r\n        const refI: Value = this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i);\r\n        if (refI.isNull() || refI.isError()) {\r\n          continue;\r\n        }\r\n\r\n        if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n          num = refI\r\n            .getValueByString(Ids)\r\n            .getVector()\r\n            .getSize();\r\n          break;\r\n        }\r\n      }\r\n\r\n      return num;\r\n    }\r\n\r\n    /**\r\n     * 目パチに関連付けられたパラメータのIDを取得する\r\n     * @param index 配列のインデックス値\r\n     * @return パラメータID\r\n     */\r\n    public getEyeBlinkParameterId(index: number): CubismIdHandle {\r\n      if (!this.isExistEyeBlinkParameters()) {\r\n        return null;\r\n      }\r\n\r\n      for (\r\n        let i = 0;\r\n        i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n        i++\r\n      ) {\r\n        const refI: Value = this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i);\r\n        if (refI.isNull() || refI.isError()) {\r\n          continue;\r\n        }\r\n\r\n        if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n          return CubismFramework.getIdManager().getId(\r\n            refI\r\n              .getValueByString(Ids)\r\n              .getValueByIndex(index)\r\n              .getRawString()\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * リップシンクに関連付けられたパラメータの数を取得する\r\n     * @return リップシンクに関連付けられたパラメータの数\r\n     */\r\n    public getLipSyncParameterCount(): number {\r\n      if (!this.isExistLipSyncParameters()) {\r\n        return 0;\r\n      }\r\n\r\n      let num = 0;\r\n      for (\r\n        let i = 0;\r\n        i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n        i++\r\n      ) {\r\n        const refI: Value = this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i);\r\n        if (refI.isNull() || refI.isError()) {\r\n          continue;\r\n        }\r\n\r\n        if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n          num = refI\r\n            .getValueByString(Ids)\r\n            .getVector()\r\n            .getSize();\r\n          break;\r\n        }\r\n      }\r\n\r\n      return num;\r\n    }\r\n\r\n    /**\r\n     * リップシンクに関連付けられたパラメータの数を取得する\r\n     * @param index 配列のインデックス値\r\n     * @return パラメータID\r\n     */\r\n    public getLipSyncParameterId(index: number): CubismIdHandle {\r\n      if (!this.isExistLipSyncParameters()) {\r\n        return null;\r\n      }\r\n\r\n      for (\r\n        let i = 0;\r\n        i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n        i++\r\n      ) {\r\n        const refI: Value = this._jsonValue\r\n          .at(FrequestNode.FrequestNode_Groups)\r\n          .getValueByIndex(i);\r\n        if (refI.isNull() || refI.isError()) {\r\n          continue;\r\n        }\r\n\r\n        if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n          return CubismFramework.getIdManager().getId(\r\n            refI\r\n              .getValueByString(Ids)\r\n              .getValueByIndex(index)\r\n              .getRawString()\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * モデルファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistModelFile(): boolean {\r\n      const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * テクスチャファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistTextureFiles(): boolean {\r\n      const node: Value = this._jsonValue.at(\r\n        FrequestNode.FrequestNode_Textures\r\n      );\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 当たり判定のキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistHitAreas(): boolean {\r\n      const node: Value = this._jsonValue.at(\r\n        FrequestNode.FrequestNode_HitAreas\r\n      );\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 物理演算ファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistPhysicsFile(): boolean {\r\n      const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * ポーズ設定ファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistPoseFile(): boolean {\r\n      const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 表情設定ファイルのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistExpressionFile(): boolean {\r\n      const node: Value = this._jsonValue.at(\r\n        FrequestNode.FrequestNode_Expressions\r\n      );\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * モーショングループのキーが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistMotionGroups(): boolean {\r\n      const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 引数で指定したモーショングループのキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistMotionGroupName(groupName: string): boolean {\r\n      const node: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @param index 配列のインデックス値\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistMotionSoundFile(groupName: string, index: number): boolean {\r\n      const node: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(SoundPath);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @param index 配列のインデックス値\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistMotionFadeIn(groupName: string, index: number): boolean {\r\n      const node: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(FadeInTime);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\r\n     * @param groupName  グループ名\r\n     * @param index 配列のインデックス値\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistMotionFadeOut(groupName: string, index: number): boolean {\r\n      const node: Value = this._jsonValue\r\n        .at(FrequestNode.FrequestNode_Motions)\r\n        .getValueByString(groupName)\r\n        .getValueByIndex(index)\r\n        .getValueByString(FadeOutTime);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * UserDataのファイル名が存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistUserDataFile(): boolean {\r\n      const node: Value = this._json\r\n        .getRoot()\r\n        .getValueByString(FileReferences)\r\n        .getValueByString(UserData);\r\n      return !node.isNull() && !node.isError();\r\n    }\r\n\r\n    /**\r\n     * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistEyeBlinkParameters(): boolean {\r\n      if (\r\n        this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n        this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      for (\r\n        let i = 0;\r\n        i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n        ++i\r\n      ) {\r\n        if (\r\n          this._jsonValue\r\n            .at(FrequestNode.FrequestNode_Groups)\r\n            .getValueByIndex(i)\r\n            .getValueByString(Name)\r\n            .getRawString() == EyeBlink\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\r\n     * @return true キーが存在する\r\n     * @return false キーが存在しない\r\n     */\r\n    private isExistLipSyncParameters(): boolean {\r\n      if (\r\n        this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n        this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\r\n      ) {\r\n        return false;\r\n      }\r\n      for (\r\n        let i = 0;\r\n        i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\r\n        ++i\r\n      ) {\r\n        if (\r\n          this._jsonValue\r\n            .at(FrequestNode.FrequestNode_Groups)\r\n            .getValueByIndex(i)\r\n            .getValueByString(Name)\r\n            .getRawString() == LipSync\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    private _json: CubismJson;\r\n    private _jsonValue: csmVector<Value>;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}