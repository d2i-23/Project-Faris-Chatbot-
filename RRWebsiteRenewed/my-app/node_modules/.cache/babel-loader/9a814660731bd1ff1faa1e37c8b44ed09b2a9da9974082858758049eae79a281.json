{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nvar csmString = csmstring.csmString;\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismJson = cubismjson.CubismJson;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  // JSON keys\n  const Meta = 'Meta';\n  const Duration = 'Duration';\n  const Loop = 'Loop';\n  const CurveCount = 'CurveCount';\n  const Fps = 'Fps';\n  const TotalSegmentCount = 'TotalSegmentCount';\n  const TotalPointCount = 'TotalPointCount';\n  const Curves = 'Curves';\n  const Target = 'Target';\n  const Id = 'Id';\n  const FadeInTime = 'FadeInTime';\n  const FadeOutTime = 'FadeOutTime';\n  const Segments = 'Segments';\n  const UserData = 'UserData';\n  const UserDataCount = 'UserDataCount';\n  const TotalUserDataSize = 'TotalUserDataSize';\n  const Time = 'Time';\n  const Value = 'Value';\n\n  /**\r\n   * motion3.jsonのコンテナ。\r\n   */\n  class CubismMotionJson {\n    /**\r\n     * コンストラクタ\r\n     * @param buffer motion3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\n    constructor(buffer, size) {\n      this._json = void 0;\n      this._json = CubismJson.create(buffer, size);\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      CubismJson.delete(this._json);\n    }\n\n    /**\r\n     * モーションの長さを取得する\r\n     * @return モーションの長さ[秒]\r\n     */\n    getMotionDuration() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(Duration).toFloat();\n    }\n\n    /**\r\n     * モーションのループ情報の取得\r\n     * @return true ループする\r\n     * @return false ループしない\r\n     */\n    isMotionLoop() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(Loop).toBoolean();\n    }\n\n    /**\r\n     * 获取动作曲线的个数\r\n     * @return 动作曲线的个数\r\n     */\n    getMotionCurveCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(CurveCount).toInt();\n    }\n\n    /**\r\n     * モーションのフレームレートの取得\r\n     * @return フレームレート[FPS]\r\n     */\n    getMotionFps() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(Fps).toFloat();\n    }\n\n    /**\r\n     * モーションのセグメントの総合計の取得\r\n     * @return モーションのセグメントの取得\r\n     */\n    getMotionTotalSegmentCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(TotalSegmentCount).toInt();\n    }\n\n    /**\r\n     * モーションのカーブの制御店の総合計の取得\r\n     * @return モーションのカーブの制御点の総合計\r\n     */\n    getMotionTotalPointCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(TotalPointCount).toInt();\n    }\n\n    /**\r\n     * モーションのフェードイン時間の存在\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\n    isExistMotionFadeInTime() {\n      return !this._json.getRoot().getValueByString(Meta).getValueByString(FadeInTime).isNull();\n    }\n\n    /**\r\n     * モーションのフェードアウト時間の存在\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\n    isExistMotionFadeOutTime() {\n      return !this._json.getRoot().getValueByString(Meta).getValueByString(FadeOutTime).isNull();\n    }\n\n    /**\r\n     * モーションのフェードイン時間の取得\r\n     * @return フェードイン時間[秒]\r\n     */\n    getMotionFadeInTime() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(FadeInTime).toFloat();\n    }\n\n    /**\r\n     * モーションのフェードアウト時間の取得\r\n     * @return フェードアウト時間[秒]\r\n     */\n    getMotionFadeOutTime() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(FadeOutTime).toFloat();\n    }\n\n    /**\r\n     * モーションのカーブの種類の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return カーブの種類\r\n     */\n    getMotionCurveTarget(curveIndex) {\n      return this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(Target).getRawString();\n    }\n\n    /**\r\n     * モーションのカーブのIDの取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return カーブのID\r\n     */\n    getMotionCurveId(curveIndex) {\n      return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(Id).getRawString());\n    }\n\n    /**\r\n     * モーションのカーブのフェードイン時間の存在\r\n     * @param curveIndex カーブのインデックス\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\n    isExistMotionCurveFadeInTime(curveIndex) {\n      return !this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(FadeInTime).isNull();\n    }\n\n    /**\r\n     * モーションのカーブのフェードアウト時間の存在\r\n     * @param curveIndex カーブのインデックス\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\n    isExistMotionCurveFadeOutTime(curveIndex) {\n      return !this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(FadeOutTime).isNull();\n    }\n\n    /**\r\n     * モーションのカーブのフェードイン時間の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return フェードイン時間[秒]\r\n     */\n    getMotionCurveFadeInTime(curveIndex) {\n      return this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(FadeInTime).toFloat();\n    }\n\n    /**\r\n     * モーションのカーブのフェードアウト時間の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return フェードアウト時間[秒]\r\n     */\n    getMotionCurveFadeOutTime(curveIndex) {\n      return this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(FadeOutTime).toFloat();\n    }\n\n    /**\r\n     * モーションのカーブのセグメントの個数を取得する\r\n     * @param curveIndex カーブのインデックス\r\n     * @return モーションのカーブのセグメントの個数\r\n     */\n    getMotionCurveSegmentCount(curveIndex) {\n      return this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(Segments).getVector().getSize();\n    }\n\n    /**\r\n     * モーションのカーブのセグメントの値の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @param segmentIndex セグメントのインデックス\r\n     * @return セグメントの値\r\n     */\n    getMotionCurveSegment(curveIndex, segmentIndex) {\n      return this._json.getRoot().getValueByString(Curves).getValueByIndex(curveIndex).getValueByString(Segments).getValueByIndex(segmentIndex).toFloat();\n    }\n\n    /**\r\n     * 获取事件个数\r\n     * @return イベントの個数\r\n     */\n    getEventCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(UserDataCount).toInt();\n    }\n\n    /**\r\n     *  イベントの総文字数の取得\r\n     * @return イベントの総文字数\r\n     */\n    getTotalEventValueSize() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(TotalUserDataSize).toInt();\n    }\n\n    /**\r\n     * イベントの時間の取得\r\n     * @param userDataIndex イベントのインデックス\r\n     * @return イベントの時間[秒]\r\n     */\n    getEventTime(userDataIndex) {\n      return this._json.getRoot().getValueByString(UserData).getValueByIndex(userDataIndex).getValueByString(Time).toInt();\n    }\n\n    /**\r\n     * イベントの取得\r\n     * @param userDataIndex イベントのインデックス\r\n     * @return イベントの文字列\r\n     */\n    getEventValue(userDataIndex) {\n      return new csmString(this._json.getRoot().getValueByString(UserData).getValueByIndex(userDataIndex).getValueByString(Value).getRawString());\n    }\n\n    // motion3.jsonのデータ\n  }\n  _Live2DCubismFramework.CubismMotionJson = CubismMotionJson;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismjson","cubismid","cubismframework","csmstring","csmString","CubismFramework","CubismIdHandle","CubismJson","_Live2DCubismFramework","Meta","Duration","Loop","CurveCount","Fps","TotalSegmentCount","TotalPointCount","Curves","Target","Id","FadeInTime","FadeOutTime","Segments","UserData","UserDataCount","TotalUserDataSize","Time","Value","CubismMotionJson","constructor","buffer","size","_json","create","release","delete","getMotionDuration","getRoot","getValueByString","toFloat","isMotionLoop","toBoolean","getMotionCurveCount","toInt","getMotionFps","getMotionTotalSegmentCount","getMotionTotalPointCount","isExistMotionFadeInTime","isNull","isExistMotionFadeOutTime","getMotionFadeInTime","getMotionFadeOutTime","getMotionCurveTarget","curveIndex","getValueByIndex","getRawString","getMotionCurveId","getIdManager","getId","isExistMotionCurveFadeInTime","isExistMotionCurveFadeOutTime","getMotionCurveFadeInTime","getMotionCurveFadeOutTime","getMotionCurveSegmentCount","getVector","getSize","getMotionCurveSegment","segmentIndex","getEventCount","getTotalEventValueSize","getEventTime","userDataIndex","getEventValue"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/motion/cubismmotionjson.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport csmString = csmstring.csmString;\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismJson = cubismjson.CubismJson;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  // JSON keys\r\n  const Meta = 'Meta';\r\n  const Duration = 'Duration';\r\n  const Loop = 'Loop';\r\n  const CurveCount = 'CurveCount';\r\n  const Fps = 'Fps';\r\n  const TotalSegmentCount = 'TotalSegmentCount';\r\n  const TotalPointCount = 'TotalPointCount';\r\n  const Curves = 'Curves';\r\n  const Target = 'Target';\r\n  const Id = 'Id';\r\n  const FadeInTime = 'FadeInTime';\r\n  const FadeOutTime = 'FadeOutTime';\r\n  const Segments = 'Segments';\r\n  const UserData = 'UserData';\r\n  const UserDataCount = 'UserDataCount';\r\n  const TotalUserDataSize = 'TotalUserDataSize';\r\n  const Time = 'Time';\r\n  const Value = 'Value';\r\n\r\n  /**\r\n   * motion3.jsonのコンテナ。\r\n   */\r\n  export class CubismMotionJson {\r\n    /**\r\n     * コンストラクタ\r\n     * @param buffer motion3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\r\n    public constructor(buffer: ArrayBuffer, size: number) {\r\n      this._json = CubismJson.create(buffer, size);\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      CubismJson.delete(this._json);\r\n    }\r\n\r\n    /**\r\n     * モーションの長さを取得する\r\n     * @return モーションの長さ[秒]\r\n     */\r\n    public getMotionDuration(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(Duration)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーションのループ情報の取得\r\n     * @return true ループする\r\n     * @return false ループしない\r\n     */\r\n    public isMotionLoop(): boolean {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(Loop)\r\n        .toBoolean();\r\n    }\r\n\r\n    /**\r\n     * 获取动作曲线的个数\r\n     * @return 动作曲线的个数\r\n     */\r\n    public getMotionCurveCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(CurveCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * モーションのフレームレートの取得\r\n     * @return フレームレート[FPS]\r\n     */\r\n    public getMotionFps(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(Fps)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーションのセグメントの総合計の取得\r\n     * @return モーションのセグメントの取得\r\n     */\r\n    public getMotionTotalSegmentCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(TotalSegmentCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブの制御店の総合計の取得\r\n     * @return モーションのカーブの制御点の総合計\r\n     */\r\n    public getMotionTotalPointCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(TotalPointCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * モーションのフェードイン時間の存在\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\r\n    public isExistMotionFadeInTime(): boolean {\r\n      return !this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(FadeInTime)\r\n        .isNull();\r\n    }\r\n\r\n    /**\r\n     * モーションのフェードアウト時間の存在\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\r\n    public isExistMotionFadeOutTime(): boolean {\r\n      return !this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(FadeOutTime)\r\n        .isNull();\r\n    }\r\n\r\n    /**\r\n     * モーションのフェードイン時間の取得\r\n     * @return フェードイン時間[秒]\r\n     */\r\n    public getMotionFadeInTime(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(FadeInTime)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーションのフェードアウト時間の取得\r\n     * @return フェードアウト時間[秒]\r\n     */\r\n    public getMotionFadeOutTime(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(FadeOutTime)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブの種類の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return カーブの種類\r\n     */\r\n    public getMotionCurveTarget(curveIndex: number): string {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(Target)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのIDの取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return カーブのID\r\n     */\r\n    public getMotionCurveId(curveIndex: number): CubismIdHandle {\r\n      return CubismFramework.getIdManager().getId(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(Curves)\r\n          .getValueByIndex(curveIndex)\r\n          .getValueByString(Id)\r\n          .getRawString()\r\n      );\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのフェードイン時間の存在\r\n     * @param curveIndex カーブのインデックス\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\r\n    public isExistMotionCurveFadeInTime(curveIndex: number): boolean {\r\n      return !this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(FadeInTime)\r\n        .isNull();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのフェードアウト時間の存在\r\n     * @param curveIndex カーブのインデックス\r\n     * @return true 存在する\r\n     * @return false 存在しない\r\n     */\r\n    public isExistMotionCurveFadeOutTime(curveIndex: number): boolean {\r\n      return !this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(FadeOutTime)\r\n        .isNull();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのフェードイン時間の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return フェードイン時間[秒]\r\n     */\r\n    public getMotionCurveFadeInTime(curveIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(FadeInTime)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのフェードアウト時間の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @return フェードアウト時間[秒]\r\n     */\r\n    public getMotionCurveFadeOutTime(curveIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(FadeOutTime)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのセグメントの個数を取得する\r\n     * @param curveIndex カーブのインデックス\r\n     * @return モーションのカーブのセグメントの個数\r\n     */\r\n    public getMotionCurveSegmentCount(curveIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(Segments)\r\n        .getVector()\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * モーションのカーブのセグメントの値の取得\r\n     * @param curveIndex カーブのインデックス\r\n     * @param segmentIndex セグメントのインデックス\r\n     * @return セグメントの値\r\n     */\r\n    public getMotionCurveSegment(\r\n      curveIndex: number,\r\n      segmentIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Curves)\r\n        .getValueByIndex(curveIndex)\r\n        .getValueByString(Segments)\r\n        .getValueByIndex(segmentIndex)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 获取事件个数\r\n     * @return イベントの個数\r\n     */\r\n    public getEventCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(UserDataCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     *  イベントの総文字数の取得\r\n     * @return イベントの総文字数\r\n     */\r\n    public getTotalEventValueSize(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(TotalUserDataSize)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * イベントの時間の取得\r\n     * @param userDataIndex イベントのインデックス\r\n     * @return イベントの時間[秒]\r\n     */\r\n    public getEventTime(userDataIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(UserData)\r\n        .getValueByIndex(userDataIndex)\r\n        .getValueByString(Time)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * イベントの取得\r\n     * @param userDataIndex イベントのインデックス\r\n     * @return イベントの文字列\r\n     */\r\n    public getEventValue(userDataIndex: number): csmString {\r\n      return new csmString(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(UserData)\r\n          .getValueByIndex(userDataIndex)\r\n          .getValueByString(Value)\r\n          .getRawString()\r\n      );\r\n    }\r\n\r\n    _json: CubismJson; // motion3.jsonのデータ\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}