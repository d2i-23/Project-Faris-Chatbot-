{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework, Option } from '../Framework/src/live2dcubismframework';\nimport * as LAppDefine from './lappdefine';\nimport { LAppLive2DManager } from './lapplive2dmanager';\nimport { LAppPal } from './lapppal';\nimport { LAppTextureManager } from './lapptexturemanager';\nimport { LAppView } from './lappview';\nexport let canvas = null;\nexport let s_instance = null;\nexport let gl = null;\nexport let frameBuffer = null;\n\n/**\n * アプリケーションクラス。\n * Cubism SDKの管理を行う。\n */\nexport class LAppDelegate {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   */\n  static getInstance() {\n    if (s_instance == null) {\n      s_instance = new LAppDelegate();\n    }\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   */\n  static releaseInstance() {\n    if (s_instance != null) {\n      s_instance.release();\n    }\n    s_instance = null;\n  }\n\n  /**\n   * APPに必要な物を初期化する。\n   */\n  initialize() {\n    // キャンバスの作成\n    /** \n    canvas = document.createElement('canvas');\n    if (LAppDefine.CanvasSize === 'auto') {\n      this._resizeCanvas();\n    } else {\n      canvas.width = LAppDefine.CanvasSize.width;\n      canvas.height = LAppDefine.CanvasSize.height;\n    }\n    */\n\n    canvas = document.getElementById(\"live2d\");\n    canvas.width = canvas.width;\n    canvas.height = canvas.height;\n    canvas.toDataURL(\"image/png\");\n    // glコンテキストを初期化\n    // @ts-ignore\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (!gl) {\n      alert('Cannot initialize WebGL. This browser does not support.');\n      document.body.innerHTML = 'This browser does not support the <code>&lt;canvas&gt;</code> element.';\n\n      // gl初期化失敗\n      return false;\n    }\n\n    // キャンバスを DOM に追加\n    //document.body.appendChild(canvas);\n\n    if (!frameBuffer) {\n      frameBuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    }\n\n    // 透過設定\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    const supportTouch = ('ontouchend' in canvas);\n    if (supportTouch) {\n      // タッチ関連コールバック関数登録\n      canvas.ontouchstart = onTouchBegan;\n      window.ontouchmove = onTouchMoved;\n      canvas.ontouchend = onTouchEnded;\n      canvas.ontouchcancel = onTouchCancel;\n    } else {\n      // マウス関連コールバック関数登録\n      canvas.onmousedown = onClickBegan;\n      window.onmousemove = onMouseMoved;\n      canvas.onmouseup = onClickEnded;\n    }\n\n    // AppViewの初期化\n    this._view.initialize();\n\n    // Cubism SDKの初期化\n    this.initializeCubism();\n    return true;\n  }\n  //! Test log here\n  audio(path, audioElement) {\n    LAppDelegate.getInstance()._view.ConfigureAudio(path, audioElement);\n  }\n  setExpression(id) {\n    LAppDelegate.getInstance()._view.setExpression(id);\n  }\n  /**\n   * Resize canvas and re-initialize view.\n   */\n  onResize() {\n    this._resizeCanvas();\n    this._view.initialize();\n    this._view.initializeSprite();\n\n    // キャンバスサイズを渡す\n    const viewport = [0, 0, canvas.width, canvas.height];\n    gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n  }\n\n  /**\n   * 解放する。\n   */\n  release() {\n    this._textureManager.release();\n    this._textureManager = null;\n    this._view.release();\n    this._view = null;\n\n    // リソースを解放\n    LAppLive2DManager.releaseInstance();\n\n    // Cubism SDKの解放\n    CubismFramework.dispose();\n  }\n\n  /**\n   * 実行処理。\n   */\n  run() {\n    // メインループ\n    const loop = () => {\n      // インスタンスの有無の確認\n      if (s_instance == null) {\n        return;\n      }\n\n      // 時間更新\n      LAppPal.updateTime();\n\n      // 画面の初期化\n      gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n      // 深度テストを有効化\n      gl.enable(gl.DEPTH_TEST);\n\n      // 近くにある物体は、遠くにある物体を覆い隠す\n      gl.depthFunc(gl.LEQUAL);\n\n      // カラーバッファや深度バッファをクリアする\n      //gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      gl.clearDepth(1.0);\n\n      // 透過設定\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n      // 描画更新\n      this._view.render();\n\n      // ループのために再帰呼び出し\n      requestAnimationFrame(loop);\n    };\n    loop();\n  }\n\n  /**\n   * シェーダーを登録する。\n   */\n  createShader() {\n    // バーテックスシェーダーのコンパイル\n    const vertexShaderId = gl.createShader(gl.VERTEX_SHADER);\n    if (vertexShaderId == null) {\n      LAppPal.printMessage('failed to create vertexShader');\n      return null;\n    }\n    const vertexShader = 'precision mediump float;' + 'attribute vec3 position;' + 'attribute vec2 uv;' + 'varying vec2 vuv;' + 'void main(void)' + '{' + '   gl_Position = vec4(position, 1.0);' + '   vuv = uv;' + '}';\n    gl.shaderSource(vertexShaderId, vertexShader);\n    gl.compileShader(vertexShaderId);\n\n    // フラグメントシェーダのコンパイル\n    const fragmentShaderId = gl.createShader(gl.FRAGMENT_SHADER);\n    if (fragmentShaderId == null) {\n      LAppPal.printMessage('failed to create fragmentShader');\n      return null;\n    }\n    const fragmentShader = 'precision mediump float;' + 'varying vec2 vuv;' + 'uniform sampler2D texture;' + 'void main(void)' + '{' + '   gl_FragColor = texture2D(texture, vuv);' + '}';\n    gl.shaderSource(fragmentShaderId, fragmentShader);\n    gl.compileShader(fragmentShaderId);\n\n    // プログラムオブジェクトの作成\n    const programId = gl.createProgram();\n    gl.attachShader(programId, vertexShaderId);\n    gl.attachShader(programId, fragmentShaderId);\n    gl.deleteShader(vertexShaderId);\n    gl.deleteShader(fragmentShaderId);\n\n    // リンク\n    gl.linkProgram(programId);\n    gl.useProgram(programId);\n    return programId;\n  }\n\n  /**\n   * View情報を取得する。\n   */\n  getView() {\n    return this._view;\n  }\n  getTextureManager() {\n    return this._textureManager;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._cubismOption = void 0;\n    // Cubism SDK Option\n    this._view = void 0;\n    // View情報\n    this._captured = void 0;\n    // クリックしているか\n    this._mouseX = void 0;\n    // マウスX座標\n    this._mouseY = void 0;\n    // マウスY座標\n    this._isEnd = void 0;\n    // APP終了しているか\n    this._textureManager = void 0;\n    this._captured = false;\n    this._mouseX = 0.0;\n    this._mouseY = 0.0;\n    this._isEnd = false;\n    this._cubismOption = new Option();\n    this._view = new LAppView();\n    this._textureManager = new LAppTextureManager();\n  }\n\n  /**\n   * Cubism SDKの初期化\n   */\n  initializeCubism() {\n    // setup cubism\n    this._cubismOption.logFunction = LAppPal.printMessage;\n    this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\n    CubismFramework.startUp(this._cubismOption);\n\n    // initialize cubism\n    CubismFramework.initialize();\n\n    // load model\n    LAppLive2DManager.getInstance();\n    LAppPal.updateTime();\n    this._view.initializeSprite();\n  }\n\n  /**\n   * Resize the canvas to fill the screen.\n   */\n  _resizeCanvas() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  }\n\n  // テクスチャマネージャー\n}\n\n/**\n * クリックしたときに呼ばれる。\n */\nfunction onClickBegan(e) {\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  LAppDelegate.getInstance()._captured = true;\n  const posX = e.pageX;\n  const posY = e.pageY;\n  LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\n}\n\n/**\n * マウスポインタが動いたら呼ばれる。\n */\nfunction onMouseMoved(e) {\n  /** \n  if (!LAppDelegate.getInstance()._captured) {\n    return;\n  }\n  */\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  const rect = e.target.getBoundingClientRect();\n  //const posX: number = e.clientX - rect.left;\n  //const posY: number = e.clientY - rect.top;\n\n  let posX = 0; //e.clientX;\n  let posY = 0; //e.clientY - window.innerHeight + canvas.height;\n\n  //posX = //0(posX > canvas.width) ? canvas.width: posX;\n  //posY = //0(posY < 0) ? 0: posY;\n\n  LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\n}\n\n/**\n * クリックが終了したら呼ばれる。\n */\nfunction onClickEnded(e) {\n  LAppDelegate.getInstance()._captured = false;\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  const rect = e.target.getBoundingClientRect();\n  const posX = e.clientX - rect.left;\n  const posY = e.clientY - rect.top;\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\n\n/**\n * タッチしたときに呼ばれる。\n */\nfunction onTouchBegan(e) {\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  LAppDelegate.getInstance()._captured = true;\n  const posX = e.changedTouches[0].pageX;\n  const posY = e.changedTouches[0].pageY;\n  LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\n}\n\n/**\n * スワイプすると呼ばれる。\n */\nfunction onTouchMoved(e) {\n  if (!LAppDelegate.getInstance()._captured) {\n    return;\n  }\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  const rect = e.target.getBoundingClientRect();\n  const posX = e.changedTouches[0].clientX - rect.left;\n  const posY = e.changedTouches[0].clientY - rect.top;\n  LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\n}\n\n/**\n * タッチが終了したら呼ばれる。\n */\nfunction onTouchEnded(e) {\n  LAppDelegate.getInstance()._captured = false;\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  const rect = e.target.getBoundingClientRect();\n  const posX = e.changedTouches[0].clientX - rect.left;\n  const posY = e.changedTouches[0].clientY - rect.top;\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\n\n/**\n * タッチがキャンセルされると呼ばれる。\n */\nfunction onTouchCancel(e) {\n  LAppDelegate.getInstance()._captured = false;\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  const rect = e.target.getBoundingClientRect();\n  const posX = e.changedTouches[0].clientX - rect.left;\n  const posY = e.changedTouches[0].clientY - rect.top;\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}","map":{"version":3,"names":["CubismFramework","Option","LAppDefine","LAppLive2DManager","LAppPal","LAppTextureManager","LAppView","canvas","s_instance","gl","frameBuffer","LAppDelegate","getInstance","releaseInstance","release","initialize","document","getElementById","width","height","toDataURL","getContext","alert","body","innerHTML","getParameter","FRAMEBUFFER_BINDING","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","supportTouch","ontouchstart","onTouchBegan","window","ontouchmove","onTouchMoved","ontouchend","onTouchEnded","ontouchcancel","onTouchCancel","onmousedown","onClickBegan","onmousemove","onMouseMoved","onmouseup","onClickEnded","_view","initializeCubism","audio","path","audioElement","ConfigureAudio","setExpression","id","onResize","_resizeCanvas","initializeSprite","viewport","_textureManager","dispose","run","loop","updateTime","clearColor","DEPTH_TEST","depthFunc","LEQUAL","clearDepth","render","requestAnimationFrame","createShader","vertexShaderId","VERTEX_SHADER","printMessage","vertexShader","shaderSource","compileShader","fragmentShaderId","FRAGMENT_SHADER","fragmentShader","programId","createProgram","attachShader","deleteShader","linkProgram","useProgram","getView","getTextureManager","constructor","_cubismOption","_captured","_mouseX","_mouseY","_isEnd","logFunction","loggingLevel","CubismLoggingLevel","startUp","innerWidth","innerHeight","e","posX","pageX","posY","pageY","onTouchesBegan","rect","target","getBoundingClientRect","onTouchesMoved","clientX","left","clientY","top","onTouchesEnded","changedTouches"],"sources":["D:/Personal/PythonStuff/RR/RRWebsiteRenewed/my-app/src/src/lappdelegate.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework, Option } from '../Framework/src/live2dcubismframework';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppLive2DManager } from './lapplive2dmanager';\nimport { LAppPal } from './lapppal';\nimport { LAppTextureManager } from './lapptexturemanager';\nimport { LAppView } from './lappview';\n\nexport let canvas: HTMLCanvasElement = null;\nexport let s_instance: LAppDelegate = null;\nexport let gl: WebGLRenderingContext = null;\nexport let frameBuffer: WebGLFramebuffer = null;\n\n/**\n * アプリケーションクラス。\n * Cubism SDKの管理を行う。\n */\nexport class LAppDelegate {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   */\n  public static getInstance(): LAppDelegate {\n    if (s_instance == null) {\n      s_instance = new LAppDelegate();\n    }\n\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   */\n  public static releaseInstance(): void {\n    if (s_instance != null) {\n      s_instance.release();\n    }\n\n    s_instance = null;\n  }\n\n  /**\n   * APPに必要な物を初期化する。\n   */\n  public initialize(): boolean {\n    // キャンバスの作成\n    /** \n    canvas = document.createElement('canvas');\n    if (LAppDefine.CanvasSize === 'auto') {\n      this._resizeCanvas();\n    } else {\n      canvas.width = LAppDefine.CanvasSize.width;\n      canvas.height = LAppDefine.CanvasSize.height;\n    }\n    */\n\n    canvas = <HTMLCanvasElement>document.getElementById(\"live2d\");\n    canvas.width = canvas.width;\n    canvas.height = canvas.height; \n    canvas.toDataURL(\"image/png\")\n    // glコンテキストを初期化\n    // @ts-ignore\n    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n\n    if (!gl) {\n      alert('Cannot initialize WebGL. This browser does not support.');\n\n      document.body.innerHTML =\n        'This browser does not support the <code>&lt;canvas&gt;</code> element.';\n\n      // gl初期化失敗\n      return false;\n    }\n\n    // キャンバスを DOM に追加\n    //document.body.appendChild(canvas);\n\n    if (!frameBuffer) {\n      frameBuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    }\n\n    // 透過設定\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    const supportTouch: boolean = 'ontouchend' in canvas;\n\n    if (supportTouch) {\n      // タッチ関連コールバック関数登録\n      canvas.ontouchstart = onTouchBegan;\n      window.ontouchmove = onTouchMoved;\n      canvas.ontouchend = onTouchEnded;\n      canvas.ontouchcancel = onTouchCancel;\n    } else {\n      // マウス関連コールバック関数登録\n      canvas.onmousedown = onClickBegan;\n      window.onmousemove = onMouseMoved;\n      canvas.onmouseup = onClickEnded;\n    }\n    \n\n\n    // AppViewの初期化\n    this._view.initialize();\n\n    // Cubism SDKの初期化\n    this.initializeCubism();\n\n    return true;\n  }\n  //! Test log here\n  public audio(path: string, audioElement: HTMLAudioElement): void{\n    LAppDelegate.getInstance()._view.ConfigureAudio(path, audioElement)\n  }\n\n  public setExpression(id: string): void{\n    LAppDelegate.getInstance()._view.setExpression(id)\n  }\n  /**\n   * Resize canvas and re-initialize view.\n   */\n  public onResize(): void {\n    this._resizeCanvas();\n    this._view.initialize();\n    this._view.initializeSprite();\n\n    // キャンバスサイズを渡す\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\n\n    gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {\n    this._textureManager.release();\n    this._textureManager = null;\n\n    this._view.release();\n    this._view = null;\n\n    // リソースを解放\n    LAppLive2DManager.releaseInstance();\n\n    // Cubism SDKの解放\n    CubismFramework.dispose();\n  }\n\n  /**\n   * 実行処理。\n   */\n  public run(): void {\n    // メインループ\n    const loop = (): void => {\n      // インスタンスの有無の確認\n      if (s_instance == null) {\n        return;\n      }\n\n      // 時間更新\n      LAppPal.updateTime();\n\n      // 画面の初期化\n      gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n      // 深度テストを有効化\n      gl.enable(gl.DEPTH_TEST);\n\n      // 近くにある物体は、遠くにある物体を覆い隠す\n      gl.depthFunc(gl.LEQUAL);\n\n      // カラーバッファや深度バッファをクリアする\n      //gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      gl.clearDepth(1.0);\n\n      // 透過設定\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n      // 描画更新\n      this._view.render();\n\n      // ループのために再帰呼び出し\n      requestAnimationFrame(loop);\n    };\n    loop();\n  }\n\n  /**\n   * シェーダーを登録する。\n   */\n  public createShader(): WebGLProgram {\n    // バーテックスシェーダーのコンパイル\n    const vertexShaderId = gl.createShader(gl.VERTEX_SHADER);\n\n    if (vertexShaderId == null) {\n      LAppPal.printMessage('failed to create vertexShader');\n      return null;\n    }\n\n    const vertexShader: string =\n      'precision mediump float;' +\n      'attribute vec3 position;' +\n      'attribute vec2 uv;' +\n      'varying vec2 vuv;' +\n      'void main(void)' +\n      '{' +\n      '   gl_Position = vec4(position, 1.0);' +\n      '   vuv = uv;' +\n      '}';\n\n    gl.shaderSource(vertexShaderId, vertexShader);\n    gl.compileShader(vertexShaderId);\n\n    // フラグメントシェーダのコンパイル\n    const fragmentShaderId = gl.createShader(gl.FRAGMENT_SHADER);\n\n    if (fragmentShaderId == null) {\n      LAppPal.printMessage('failed to create fragmentShader');\n      return null;\n    }\n\n    const fragmentShader: string =\n      'precision mediump float;' +\n      'varying vec2 vuv;' +\n      'uniform sampler2D texture;' +\n      'void main(void)' +\n      '{' +\n      '   gl_FragColor = texture2D(texture, vuv);' +\n      '}';\n\n    gl.shaderSource(fragmentShaderId, fragmentShader);\n    gl.compileShader(fragmentShaderId);\n\n    // プログラムオブジェクトの作成\n    const programId = gl.createProgram();\n    gl.attachShader(programId, vertexShaderId);\n    gl.attachShader(programId, fragmentShaderId);\n\n    gl.deleteShader(vertexShaderId);\n    gl.deleteShader(fragmentShaderId);\n\n    // リンク\n    gl.linkProgram(programId);\n\n    gl.useProgram(programId);\n\n    return programId;\n  }\n\n  /**\n   * View情報を取得する。\n   */\n  public getView(): LAppView {\n    return this._view;\n  }\n\n  public getTextureManager(): LAppTextureManager {\n    return this._textureManager;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._captured = false;\n    this._mouseX = 0.0;\n    this._mouseY = 0.0;\n    this._isEnd = false;\n\n    this._cubismOption = new Option();\n    this._view = new LAppView();\n    this._textureManager = new LAppTextureManager();\n  }\n\n  /**\n   * Cubism SDKの初期化\n   */\n  public initializeCubism(): void {\n    // setup cubism\n    this._cubismOption.logFunction = LAppPal.printMessage;\n    this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\n    CubismFramework.startUp(this._cubismOption);\n\n    // initialize cubism\n    CubismFramework.initialize();\n\n    // load model\n    LAppLive2DManager.getInstance();\n\n    LAppPal.updateTime();\n\n    this._view.initializeSprite();\n  }\n\n  /**\n   * Resize the canvas to fill the screen.\n   */\n  private _resizeCanvas(): void {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  }\n\n  _cubismOption: Option; // Cubism SDK Option\n  _view: LAppView; // View情報\n  _captured: boolean; // クリックしているか\n  _mouseX: number; // マウスX座標\n  _mouseY: number; // マウスY座標\n  _isEnd: boolean; // APP終了しているか\n  _textureManager: LAppTextureManager; // テクスチャマネージャー\n}\n\n/**\n * クリックしたときに呼ばれる。\n */\nfunction onClickBegan(e: MouseEvent): void {\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n  LAppDelegate.getInstance()._captured = true;\n\n  const posX: number = e.pageX;\n  const posY: number = e.pageY;\n\n  LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\n}\n\n/**\n * マウスポインタが動いたら呼ばれる。\n */\nfunction onMouseMoved(e: MouseEvent): void {\n  /** \n  if (!LAppDelegate.getInstance()._captured) {\n    return;\n  }\n  */\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n\n  const rect = (e.target as Element).getBoundingClientRect();\n  //const posX: number = e.clientX - rect.left;\n  //const posY: number = e.clientY - rect.top;\n\n  let posX: number = 0//e.clientX;\n  let posY: number = 0//e.clientY - window.innerHeight + canvas.height;\n\n  //posX = //0(posX > canvas.width) ? canvas.width: posX;\n  //posY = //0(posY < 0) ? 0: posY;\n\n  LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\n}\n\n/**\n * クリックが終了したら呼ばれる。\n */\nfunction onClickEnded(e: MouseEvent): void {\n  LAppDelegate.getInstance()._captured = false;\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n\n  const rect = (e.target as Element).getBoundingClientRect();\n  const posX: number = e.clientX - rect.left;\n  const posY: number = e.clientY - rect.top;\n\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\n\n/**\n * タッチしたときに呼ばれる。\n */\nfunction onTouchBegan(e: TouchEvent): void {\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n\n  LAppDelegate.getInstance()._captured = true;\n\n  const posX = e.changedTouches[0].pageX;\n  const posY = e.changedTouches[0].pageY;\n\n  LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\n}\n\n/**\n * スワイプすると呼ばれる。\n */\nfunction onTouchMoved(e: TouchEvent): void {\n  if (!LAppDelegate.getInstance()._captured) {\n    return;\n  }\n\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n\n  const rect = (e.target as Element).getBoundingClientRect();\n\n  const posX = e.changedTouches[0].clientX - rect.left;\n  const posY = e.changedTouches[0].clientY - rect.top;\n\n  LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\n}\n\n/**\n * タッチが終了したら呼ばれる。\n */\nfunction onTouchEnded(e: TouchEvent): void {\n  LAppDelegate.getInstance()._captured = false;\n\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n\n  const rect = (e.target as Element).getBoundingClientRect();\n\n  const posX = e.changedTouches[0].clientX - rect.left;\n  const posY = e.changedTouches[0].clientY - rect.top;\n\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\n\n/**\n * タッチがキャンセルされると呼ばれる。\n */\nfunction onTouchCancel(e: TouchEvent): void {\n  LAppDelegate.getInstance()._captured = false;\n\n  if (!LAppDelegate.getInstance()._view) {\n    LAppPal.printMessage('view notfound');\n    return;\n  }\n\n  const rect = (e.target as Element).getBoundingClientRect();\n\n  const posX = e.changedTouches[0].clientX - rect.left;\n  const posY = e.changedTouches[0].clientY - rect.top;\n\n  LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}