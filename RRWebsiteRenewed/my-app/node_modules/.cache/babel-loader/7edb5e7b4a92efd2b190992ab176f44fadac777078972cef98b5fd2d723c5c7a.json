{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector } from '@framework/type/csmvector';\nimport { gl } from './lappdelegate';\n\n/**\n * テクスチャ管理クラス\n * 画像読み込み、管理を行うクラス。\n */\nexport class LAppTextureManager {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._textures = void 0;\n    this._textures = new csmVector();\n  }\n\n  /**\n   * 解放する。\n   */\n  release() {\n    for (let ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\n      gl.deleteTexture(ite.ptr().id);\n    }\n    this._textures = null;\n  }\n\n  /**\n   * 画像読み込み\n   *\n   * @param fileName 読み込む画像ファイルパス名\n   * @param usePremultiply Premult処理を有効にするか\n   * @return 画像情報、読み込み失敗時はnullを返す\n   */\n  createTextureFromPngFile(fileName, usePremultiply, callback) {\n    // search loaded texture already\n    for (let ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\n      if (ite.ptr().fileName == fileName && ite.ptr().usePremultply == usePremultiply) {\n        // 2回目以降はキャッシュが使用される(待ち時間なし)\n        // WebKitでは同じImageのonloadを再度呼ぶには再インスタンスが必要\n        // 詳細：https://stackoverflow.com/a/5024181\n        ite.ptr().img = new Image();\n        ite.ptr().img.onload = () => callback(ite.ptr());\n        ite.ptr().img.src = fileName;\n        return;\n      }\n    }\n\n    // データのオンロードをトリガーにする\n    const img = new Image();\n    img.onload = () => {\n      // テクスチャオブジェクトの作成\n      const tex = gl.createTexture();\n\n      // テクスチャを選択\n      gl.bindTexture(gl.TEXTURE_2D, tex);\n\n      // テクスチャにピクセルを書き込む\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n      // Premult処理を行わせる\n      if (usePremultiply) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n      }\n\n      // テクスチャにピクセルを書き込む\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n\n      // ミップマップを生成\n      gl.generateMipmap(gl.TEXTURE_2D);\n\n      // テクスチャをバインド\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      const textureInfo = new TextureInfo();\n      if (textureInfo != null) {\n        textureInfo.fileName = fileName;\n        textureInfo.width = img.width;\n        textureInfo.height = img.height;\n        textureInfo.id = tex;\n        textureInfo.img = img;\n        textureInfo.usePremultply = usePremultiply;\n        this._textures.pushBack(textureInfo);\n      }\n      callback(textureInfo);\n    };\n    img.src = fileName;\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 配列に存在する画像全てを解放する。\n   */\n  releaseTextures() {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      this._textures.set(i, null);\n    }\n    this._textures.clear();\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定したテクスチャの画像を解放する。\n   * @param texture 解放するテクスチャ\n   */\n  releaseTextureByTexture(texture) {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).id != texture) {\n        continue;\n      }\n      this._textures.set(i, null);\n      this._textures.remove(i);\n      break;\n    }\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定した名前の画像を解放する。\n   * @param fileName 解放する画像ファイルパス名\n   */\n  releaseTextureByFilePath(fileName) {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).fileName == fileName) {\n        this._textures.set(i, null);\n        this._textures.remove(i);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * 画像情報構造体\n */\nexport class TextureInfo {\n  constructor() {\n    this.img = void 0;\n    // 画像\n    this.id = null;\n    // テクスチャ\n    this.width = 0;\n    // 横幅\n    this.height = 0;\n    // 高さ\n    this.usePremultply = void 0;\n    // Premult処理を有効にするか\n    this.fileName = void 0;\n  } // ファイル名\n}","map":{"version":3,"names":["csmVector","gl","LAppTextureManager","constructor","_textures","release","ite","begin","notEqual","end","preIncrement","deleteTexture","ptr","id","createTextureFromPngFile","fileName","usePremultiply","callback","usePremultply","img","Image","onload","src","tex","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","LINEAR","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","textureInfo","TextureInfo","width","height","pushBack","releaseTextures","i","getSize","set","clear","releaseTextureByTexture","texture","at","remove","releaseTextureByFilePath"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Samples/TypeScript/Demo/src/lapptexturemanager.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector, iterator } from '@framework/type/csmvector';\n\nimport { gl } from './lappdelegate';\n\n/**\n * テクスチャ管理クラス\n * 画像読み込み、管理を行うクラス。\n */\nexport class LAppTextureManager {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._textures = new csmVector<TextureInfo>();\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {\n    for (\n      let ite: iterator<TextureInfo> = this._textures.begin();\n      ite.notEqual(this._textures.end());\n      ite.preIncrement()\n    ) {\n      gl.deleteTexture(ite.ptr().id);\n    }\n    this._textures = null;\n  }\n\n  /**\n   * 画像読み込み\n   *\n   * @param fileName 読み込む画像ファイルパス名\n   * @param usePremultiply Premult処理を有効にするか\n   * @return 画像情報、読み込み失敗時はnullを返す\n   */\n  public createTextureFromPngFile(\n    fileName: string,\n    usePremultiply: boolean,\n    callback: (textureInfo: TextureInfo) => void\n  ): void {\n    // search loaded texture already\n    for (\n      let ite: iterator<TextureInfo> = this._textures.begin();\n      ite.notEqual(this._textures.end());\n      ite.preIncrement()\n    ) {\n      if (\n        ite.ptr().fileName == fileName &&\n        ite.ptr().usePremultply == usePremultiply\n      ) {\n        // 2回目以降はキャッシュが使用される(待ち時間なし)\n        // WebKitでは同じImageのonloadを再度呼ぶには再インスタンスが必要\n        // 詳細：https://stackoverflow.com/a/5024181\n        ite.ptr().img = new Image();\n        ite.ptr().img.onload = (): void => callback(ite.ptr());\n        ite.ptr().img.src = fileName;\n        return;\n      }\n    }\n\n    // データのオンロードをトリガーにする\n    const img = new Image();\n    img.onload = (): void => {\n      // テクスチャオブジェクトの作成\n      const tex: WebGLTexture = gl.createTexture();\n\n      // テクスチャを選択\n      gl.bindTexture(gl.TEXTURE_2D, tex);\n\n      // テクスチャにピクセルを書き込む\n      gl.texParameteri(\n        gl.TEXTURE_2D,\n        gl.TEXTURE_MIN_FILTER,\n        gl.LINEAR_MIPMAP_LINEAR\n      );\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n      // Premult処理を行わせる\n      if (usePremultiply) {\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n      }\n\n      // テクスチャにピクセルを書き込む\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n\n      // ミップマップを生成\n      gl.generateMipmap(gl.TEXTURE_2D);\n\n      // テクスチャをバインド\n      gl.bindTexture(gl.TEXTURE_2D, null);\n\n      const textureInfo: TextureInfo = new TextureInfo();\n      if (textureInfo != null) {\n        textureInfo.fileName = fileName;\n        textureInfo.width = img.width;\n        textureInfo.height = img.height;\n        textureInfo.id = tex;\n        textureInfo.img = img;\n        textureInfo.usePremultply = usePremultiply;\n        this._textures.pushBack(textureInfo);\n      }\n\n      callback(textureInfo);\n    };\n    img.src = fileName;\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 配列に存在する画像全てを解放する。\n   */\n  public releaseTextures(): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      this._textures.set(i, null);\n    }\n\n    this._textures.clear();\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定したテクスチャの画像を解放する。\n   * @param texture 解放するテクスチャ\n   */\n  public releaseTextureByTexture(texture: WebGLTexture): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).id != texture) {\n        continue;\n      }\n\n      this._textures.set(i, null);\n      this._textures.remove(i);\n      break;\n    }\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定した名前の画像を解放する。\n   * @param fileName 解放する画像ファイルパス名\n   */\n  public releaseTextureByFilePath(fileName: string): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).fileName == fileName) {\n        this._textures.set(i, null);\n        this._textures.remove(i);\n        break;\n      }\n    }\n  }\n\n  _textures: csmVector<TextureInfo>;\n}\n\n/**\n * 画像情報構造体\n */\nexport class TextureInfo {\n  img: HTMLImageElement; // 画像\n  id: WebGLTexture = null; // テクスチャ\n  width = 0; // 横幅\n  height = 0; // 高さ\n  usePremultply: boolean; // Premult処理を有効にするか\n  fileName: string; // ファイル名\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}