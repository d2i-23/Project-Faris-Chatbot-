{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\n/**\n * モデル描画を処理するレンダラ\n *\n * サブクラスに環境依存の描画命令を記述する。\n */\nexport class CubismRenderer {\n  /**\n   * レンダラのインスタンスを生成して取得する\n   *\n   * @return レンダラのインスタンス\n   */\n  static create() {\n    return null;\n  }\n\n  /**\n   * レンダラのインスタンスを解放する\n   */\n  static delete(renderer) {\n    renderer = null;\n  }\n\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   * @param model モデルのインスタンス\n   */\n  initialize(model) {\n    this._model = model;\n  }\n\n  /**\n   * モデルを描画する\n   */\n  drawModel() {\n    if (this.getModel() == null) return;\n    this.saveProfile();\n    this.doDrawModel();\n    this.restoreProfile();\n  }\n\n  /**\n   * Model-View-Projection 行列をセットする\n   * 配列は複製されるので、元の配列は外で破棄して良い\n   * @param matrix44 Model-View-Projection 行列\n   */\n  setMvpMatrix(matrix44) {\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n  }\n\n  /**\n   * Model-View-Projection 行列を取得する\n   * @return Model-View-Projection 行列\n   */\n  getMvpMatrix() {\n    return this._mvpMatrix4x4;\n  }\n\n  /**\n   * モデルの色をセットする\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\n   * @param red 赤チャンネルの値\n   * @param green 緑チャンネルの値\n   * @param blue 青チャンネルの値\n   * @param alpha αチャンネルの値\n   */\n  setModelColor(red, green, blue, alpha) {\n    if (red < 0.0) {\n      red = 0.0;\n    } else if (red > 1.0) {\n      red = 1.0;\n    }\n    if (green < 0.0) {\n      green = 0.0;\n    } else if (green > 1.0) {\n      green = 1.0;\n    }\n    if (blue < 0.0) {\n      blue = 0.0;\n    } else if (blue > 1.0) {\n      blue = 1.0;\n    }\n    if (alpha < 0.0) {\n      alpha = 0.0;\n    } else if (alpha > 1.0) {\n      alpha = 1.0;\n    }\n    this._modelColor.R = red;\n    this._modelColor.G = green;\n    this._modelColor.B = blue;\n    this._modelColor.A = alpha;\n  }\n\n  /**\n   * モデルの色を取得する\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\n   *\n   * @return RGBAのカラー情報\n   */\n  getModelColor() {\n    return JSON.parse(JSON.stringify(this._modelColor));\n  }\n\n  /**\n   * 乗算済みαの有効・無効をセットする\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  setIsPremultipliedAlpha(enable) {\n    this._isPremultipliedAlpha = enable;\n  }\n\n  /**\n   * 乗算済みαの有効・無効を取得する\n   * @return true 乗算済みのα有効\n   * @return false 乗算済みのα無効\n   */\n  isPremultipliedAlpha() {\n    return this._isPremultipliedAlpha;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効をセットする。\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  setIsCulling(culling) {\n    this._isCulling = culling;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効を取得する。\n   * @return true カリング有効\n   * @return false カリング無効\n   */\n  isCulling() {\n    return this._isCulling;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * パラメータ値の影響度はレンダラの実装に依存する\n   * @param n パラメータの値\n   */\n  setAnisotropy(n) {\n    this._anisotropy = n;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * @return 異方性フィルタリングのパラメータ\n   */\n  getAnisotropy() {\n    return this._anisotropy;\n  }\n\n  /**\n   * レンダリングするモデルを取得する\n   * @return レンダリングするモデル\n   */\n  getModel() {\n    return this._model;\n  }\n\n  /**\n   * マスク描画の方式を変更する。\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\n   * レンダリング品質は高いが描画処理負荷は増す\n   * @param high 高精細マスクに切り替えるか？\n   */\n  useHighPrecisionMask(high) {\n    this._useHighPrecisionMask = high;\n  }\n\n  /**\n   * マスクの描画方式を取得する\n   * @return true 高精細方式\n   * @return false デフォルト\n   */\n  isUsingHighPrecisionMask() {\n    return this._useHighPrecisionMask;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._mvpMatrix4x4 = void 0;\n    // Model-View-Projection 行列\n    this._modelColor = void 0;\n    // モデル自体のカラー（RGBA）\n    this._isCulling = void 0;\n    // カリングが有効ならtrue\n    this._isPremultipliedAlpha = void 0;\n    // 乗算済みαならtrue\n    this._anisotropy = void 0;\n    // テクスチャの異方性フィルタリングのパラメータ\n    this._model = void 0;\n    // レンダリング対象のモデル\n    this._useHighPrecisionMask = void 0;\n    this._isCulling = false;\n    this._isPremultipliedAlpha = false;\n    this._anisotropy = 0.0;\n    this._model = null;\n    this._modelColor = new CubismTextureColor();\n    this._useHighPrecisionMask = false;\n\n    // 単位行列に初期化\n    this._mvpMatrix4x4 = new CubismMatrix44();\n    this._mvpMatrix4x4.loadIdentity();\n  }\n\n  /**\n   * モデル描画の実装\n   */\n\n  /**\n   * 描画オブジェクト（アートメッシュ）を描画する\n   * ポリゴンメッシュとテクスチャ番号をセットで渡す。\n   * @param textureNo 描画するテクスチャ番号\n   * @param indexCount 描画オブジェクトのインデックス値\n   * @param vertexCount ポリゴンメッシュの頂点数\n   * @param indexArray ポリゴンメッシュ頂点のインデックス配列\n   * @param vertexArray ポリゴンメッシュの頂点配列\n   * @param uvArray uv配列\n   * @param opacity 不透明度\n   * @param colorBlendMode カラーブレンディングのタイプ\n   * @param invertedMask マスク使用時のマスクの反転使用\n   */\n\n  /**\n   * モデル描画直前のレンダラのステートを保持する\n   */\n\n  /**\n   * モデル描画直前のレンダラのステートを復帰する\n   */\n\n  /**\n   * レンダラが保持する静的なリソースを開放する\n   */\n\n  // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\n}\nCubismRenderer.staticRelease = void 0;\nexport let CubismBlendMode = /*#__PURE__*/function (CubismBlendMode) {\n  CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\n  CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\n  CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\n  return CubismBlendMode;\n}({}); // 乗算\n\n/**\n * テクスチャの色をRGBAで扱うためのクラス\n */\nexport class CubismTextureColor {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    let r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.0;\n    let g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;\n    let b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    let a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n    this.R = void 0;\n    // 赤チャンネル\n    this.G = void 0;\n    // 緑チャンネル\n    this.B = void 0;\n    // 青チャンネル\n    this.A = void 0;\n    this.R = r;\n    this.G = g;\n    this.B = b;\n    this.A = a;\n  }\n\n  // αチャンネル\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrenderer';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismBlendMode = _Live2DCubismFramework.CubismBlendMode = $.CubismBlendMode;\n  const CubismRenderer = _Live2DCubismFramework.CubismRenderer = $.CubismRenderer;\n  const CubismTextureColor = _Live2DCubismFramework.CubismTextureColor = $.CubismTextureColor;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismMatrix44","CubismRenderer","create","delete","renderer","initialize","model","_model","drawModel","getModel","saveProfile","doDrawModel","restoreProfile","setMvpMatrix","matrix44","_mvpMatrix4x4","setMatrix","getArray","getMvpMatrix","setModelColor","red","green","blue","alpha","_modelColor","R","G","B","A","getModelColor","JSON","parse","stringify","setIsPremultipliedAlpha","enable","_isPremultipliedAlpha","isPremultipliedAlpha","setIsCulling","culling","_isCulling","isCulling","setAnisotropy","n","_anisotropy","getAnisotropy","useHighPrecisionMask","high","_useHighPrecisionMask","isUsingHighPrecisionMask","constructor","CubismTextureColor","loadIdentity","staticRelease","CubismBlendMode","r","arguments","length","undefined","g","b","a","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/rendering/cubismrenderer.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport { CubismModel } from '../model/cubismmodel';\n\n/**\n * モデル描画を処理するレンダラ\n *\n * サブクラスに環境依存の描画命令を記述する。\n */\nexport abstract class CubismRenderer {\n  /**\n   * レンダラのインスタンスを生成して取得する\n   *\n   * @return レンダラのインスタンス\n   */\n  public static create(): CubismRenderer {\n    return null;\n  }\n\n  /**\n   * レンダラのインスタンスを解放する\n   */\n  public static delete(renderer: CubismRenderer): void {\n    renderer = null;\n  }\n\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   * @param model モデルのインスタンス\n   */\n  public initialize(model: CubismModel): void {\n    this._model = model;\n  }\n\n  /**\n   * モデルを描画する\n   */\n  public drawModel(): void {\n    if (this.getModel() == null) return;\n\n    this.saveProfile();\n\n    this.doDrawModel();\n\n    this.restoreProfile();\n  }\n\n  /**\n   * Model-View-Projection 行列をセットする\n   * 配列は複製されるので、元の配列は外で破棄して良い\n   * @param matrix44 Model-View-Projection 行列\n   */\n  public setMvpMatrix(matrix44: CubismMatrix44): void {\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n  }\n\n  /**\n   * Model-View-Projection 行列を取得する\n   * @return Model-View-Projection 行列\n   */\n  public getMvpMatrix(): CubismMatrix44 {\n    return this._mvpMatrix4x4;\n  }\n\n  /**\n   * モデルの色をセットする\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\n   * @param red 赤チャンネルの値\n   * @param green 緑チャンネルの値\n   * @param blue 青チャンネルの値\n   * @param alpha αチャンネルの値\n   */\n  public setModelColor(\n    red: number,\n    green: number,\n    blue: number,\n    alpha: number\n  ): void {\n    if (red < 0.0) {\n      red = 0.0;\n    } else if (red > 1.0) {\n      red = 1.0;\n    }\n\n    if (green < 0.0) {\n      green = 0.0;\n    } else if (green > 1.0) {\n      green = 1.0;\n    }\n\n    if (blue < 0.0) {\n      blue = 0.0;\n    } else if (blue > 1.0) {\n      blue = 1.0;\n    }\n\n    if (alpha < 0.0) {\n      alpha = 0.0;\n    } else if (alpha > 1.0) {\n      alpha = 1.0;\n    }\n\n    this._modelColor.R = red;\n    this._modelColor.G = green;\n    this._modelColor.B = blue;\n    this._modelColor.A = alpha;\n  }\n\n  /**\n   * モデルの色を取得する\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\n   *\n   * @return RGBAのカラー情報\n   */\n  public getModelColor(): CubismTextureColor {\n    return JSON.parse(JSON.stringify(this._modelColor));\n  }\n\n  /**\n   * 乗算済みαの有効・無効をセットする\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  public setIsPremultipliedAlpha(enable: boolean): void {\n    this._isPremultipliedAlpha = enable;\n  }\n\n  /**\n   * 乗算済みαの有効・無効を取得する\n   * @return true 乗算済みのα有効\n   * @return false 乗算済みのα無効\n   */\n  public isPremultipliedAlpha(): boolean {\n    return this._isPremultipliedAlpha;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効をセットする。\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  public setIsCulling(culling: boolean): void {\n    this._isCulling = culling;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効を取得する。\n   * @return true カリング有効\n   * @return false カリング無効\n   */\n  public isCulling(): boolean {\n    return this._isCulling;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * パラメータ値の影響度はレンダラの実装に依存する\n   * @param n パラメータの値\n   */\n  public setAnisotropy(n: number): void {\n    this._anisotropy = n;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * @return 異方性フィルタリングのパラメータ\n   */\n  public getAnisotropy(): number {\n    return this._anisotropy;\n  }\n\n  /**\n   * レンダリングするモデルを取得する\n   * @return レンダリングするモデル\n   */\n  public getModel(): CubismModel {\n    return this._model;\n  }\n\n  /**\n   * マスク描画の方式を変更する。\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\n   * レンダリング品質は高いが描画処理負荷は増す\n   * @param high 高精細マスクに切り替えるか？\n   */\n  public useHighPrecisionMask(high: boolean): void {\n    this._useHighPrecisionMask = high;\n  }\n\n  /**\n   * マスクの描画方式を取得する\n   * @return true 高精細方式\n   * @return false デフォルト\n   */\n  public isUsingHighPrecisionMask(): boolean {\n    return this._useHighPrecisionMask;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  protected constructor() {\n    this._isCulling = false;\n    this._isPremultipliedAlpha = false;\n    this._anisotropy = 0.0;\n    this._model = null;\n    this._modelColor = new CubismTextureColor();\n    this._useHighPrecisionMask = false;\n\n    // 単位行列に初期化\n    this._mvpMatrix4x4 = new CubismMatrix44();\n    this._mvpMatrix4x4.loadIdentity();\n  }\n\n  /**\n   * モデル描画の実装\n   */\n  public abstract doDrawModel(): void;\n\n  /**\n   * 描画オブジェクト（アートメッシュ）を描画する\n   * ポリゴンメッシュとテクスチャ番号をセットで渡す。\n   * @param textureNo 描画するテクスチャ番号\n   * @param indexCount 描画オブジェクトのインデックス値\n   * @param vertexCount ポリゴンメッシュの頂点数\n   * @param indexArray ポリゴンメッシュ頂点のインデックス配列\n   * @param vertexArray ポリゴンメッシュの頂点配列\n   * @param uvArray uv配列\n   * @param opacity 不透明度\n   * @param colorBlendMode カラーブレンディングのタイプ\n   * @param invertedMask マスク使用時のマスクの反転使用\n   */\n  public abstract drawMesh(\n    textureNo: number,\n    indexCount: number,\n    vertexCount: number,\n    indexArray: Uint16Array,\n    vertexArray: Float32Array,\n    uvArray: Float32Array,\n    multiplyColor: CubismTextureColor,\n    screenColor: CubismTextureColor,\n    opacity: number,\n    colorBlendMode: CubismBlendMode,\n    invertedMask: boolean\n  ): void;\n\n  /**\n   * モデル描画直前のレンダラのステートを保持する\n   */\n  protected abstract saveProfile(): void;\n\n  /**\n   * モデル描画直前のレンダラのステートを復帰する\n   */\n  protected abstract restoreProfile(): void;\n\n  /**\n   * レンダラが保持する静的なリソースを開放する\n   */\n  public static staticRelease: any;\n\n  protected _mvpMatrix4x4: CubismMatrix44; // Model-View-Projection 行列\n  protected _modelColor: CubismTextureColor; // モデル自体のカラー（RGBA）\n  protected _isCulling: boolean; // カリングが有効ならtrue\n  protected _isPremultipliedAlpha: boolean; // 乗算済みαならtrue\n  protected _anisotropy: any; // テクスチャの異方性フィルタリングのパラメータ\n  protected _model: CubismModel; // レンダリング対象のモデル\n  protected _useHighPrecisionMask: boolean; // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\n}\n\nexport enum CubismBlendMode {\n  CubismBlendMode_Normal = 0, // 通常\n  CubismBlendMode_Additive = 1, // 加算\n  CubismBlendMode_Multiplicative = 2, // 乗算\n}\n\n/**\n * テクスチャの色をRGBAで扱うためのクラス\n */\nexport class CubismTextureColor {\n  /**\n   * コンストラクタ\n   */\n  constructor(r = 1.0, g = 1.0, b = 1.0, a = 1.0) {\n    this.R = r;\n    this.G = g;\n    this.B = b;\n    this.A = a;\n  }\n\n  R: number; // 赤チャンネル\n  G: number; // 緑チャンネル\n  B: number; // 青チャンネル\n  A: number; // αチャンネル\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrenderer';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismBlendMode = $.CubismBlendMode;\n  export type CubismBlendMode = $.CubismBlendMode;\n  export const CubismRenderer = $.CubismRenderer;\n  export type CubismRenderer = $.CubismRenderer;\n  export const CubismTextureColor = $.CubismTextureColor;\n  export type CubismTextureColor = $.CubismTextureColor;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}