{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport modelData from '../Resources/Mao/Mao.model3.json';\nimport { Live2DCubismFramework as live2dcubismframework } from '../Framework/src/live2dcubismframework';\nimport { Live2DCubismFramework as cubismid } from '../Framework/src/id/cubismid';\nimport { Live2DCubismFramework as cubismusermodel } from '../Framework/src/model/cubismusermodel';\nimport { Live2DCubismFramework as icubismmodelsetting } from '../Framework/src/icubismmodelsetting';\nimport { Live2DCubismFramework as cubismmodelsettingjson } from '../Framework/src/cubismmodelsettingjson';\nimport { Live2DCubismFramework as cubismdefaultparameterid } from '../Framework/src/cubismdefaultparameterid';\nimport { Live2DCubismFramework as acubismmotion } from '../Framework/src/motion/acubismmotion';\nimport { Live2DCubismFramework as cubismeyeblink } from '../Framework/src/effect/cubismeyeblink';\nimport { Live2DCubismFramework as cubismbreath } from '../Framework/src/effect/cubismbreath';\nimport { Live2DCubismFramework as csmvector } from '../Framework/src/type/csmvector';\nimport { Live2DCubismFramework as csmmap } from '../Framework/src/type/csmmap';\nimport { Live2DCubismFramework as cubismmatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { Live2DCubismFramework as cubismmotion } from '../Framework/src/motion/cubismmotion';\nimport { Live2DCubismFramework as cubismmotionqueuemanager } from '../Framework/src/motion/cubismmotionqueuemanager';\nimport { Live2DCubismFramework as csmstring } from '../Framework/src/type/csmstring';\nimport { Live2DCubismFramework as csmrect } from '../Framework/src/type/csmrectf';\nimport { CubismLogInfo } from '../Framework/src/utils/cubismdebug';\nvar csmRect = csmrect.csmRect;\nvar csmString = csmstring.csmString;\nvar InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager.InvalidMotionQueueEntryHandleValue;\nvar CubismMotionQueueEntryHandle = cubismmotionqueuemanager.CubismMotionQueueEntryHandle;\nvar CubismMotion = cubismmotion.CubismMotion;\nvar CubismMatrix44 = cubismmatrix44.CubismMatrix44;\nvar csmMap = csmmap.csmMap;\nvar csmVector = csmvector.csmVector;\nvar CubismBreath = cubismbreath.CubismBreath;\nvar BreathParameterData = cubismbreath.BreathParameterData;\nvar CubismEyeBlink = cubismeyeblink.CubismEyeBlink;\nvar ACubismMotion = acubismmotion.ACubismMotion;\nvar FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\nvar CubismFramework = live2dcubismframework.CubismFramework;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismUserModel = cubismusermodel.CubismUserModel;\nvar ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\nvar CubismModelSettingJson = cubismmodelsettingjson.CubismModelSettingJson;\nvar CubismDefaultParameterId = cubismdefaultparameterid;\nimport { LAppPal } from './lapppal';\nimport { gl, canvas, frameBuffer, LAppDelegate } from './lappdelegate';\nimport * as LAppDefine from './lappdefine';\nimport 'whatwg-fetch';\nvar LoadStep = /*#__PURE__*/function (LoadStep) {\n  LoadStep[LoadStep[\"LoadAssets\"] = 0] = \"LoadAssets\";\n  LoadStep[LoadStep[\"LoadModel\"] = 1] = \"LoadModel\";\n  LoadStep[LoadStep[\"WaitLoadModel\"] = 2] = \"WaitLoadModel\";\n  LoadStep[LoadStep[\"LoadExpression\"] = 3] = \"LoadExpression\";\n  LoadStep[LoadStep[\"WaitLoadExpression\"] = 4] = \"WaitLoadExpression\";\n  LoadStep[LoadStep[\"LoadPhysics\"] = 5] = \"LoadPhysics\";\n  LoadStep[LoadStep[\"WaitLoadPhysics\"] = 6] = \"WaitLoadPhysics\";\n  LoadStep[LoadStep[\"LoadPose\"] = 7] = \"LoadPose\";\n  LoadStep[LoadStep[\"WaitLoadPose\"] = 8] = \"WaitLoadPose\";\n  LoadStep[LoadStep[\"SetupEyeBlink\"] = 9] = \"SetupEyeBlink\";\n  LoadStep[LoadStep[\"SetupBreath\"] = 10] = \"SetupBreath\";\n  LoadStep[LoadStep[\"LoadUserData\"] = 11] = \"LoadUserData\";\n  LoadStep[LoadStep[\"WaitLoadUserData\"] = 12] = \"WaitLoadUserData\";\n  LoadStep[LoadStep[\"SetupEyeBlinkIds\"] = 13] = \"SetupEyeBlinkIds\";\n  LoadStep[LoadStep[\"SetupLipSyncIds\"] = 14] = \"SetupLipSyncIds\";\n  LoadStep[LoadStep[\"SetupLayout\"] = 15] = \"SetupLayout\";\n  LoadStep[LoadStep[\"LoadMotion\"] = 16] = \"LoadMotion\";\n  LoadStep[LoadStep[\"WaitLoadMotion\"] = 17] = \"WaitLoadMotion\";\n  LoadStep[LoadStep[\"CompleteInitialize\"] = 18] = \"CompleteInitialize\";\n  LoadStep[LoadStep[\"CompleteSetupModel\"] = 19] = \"CompleteSetupModel\";\n  LoadStep[LoadStep[\"LoadTexture\"] = 20] = \"LoadTexture\";\n  LoadStep[LoadStep[\"WaitLoadTexture\"] = 21] = \"WaitLoadTexture\";\n  LoadStep[LoadStep[\"CompleteSetup\"] = 22] = \"CompleteSetup\";\n  return LoadStep;\n}(LoadStep || {});\n/**\n * ユーザーが実際に使用するモデルの実装クラス<br>\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\n */\nexport class LAppModel extends CubismUserModel {\n  /**\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\n   * @param dir\n   * @param fileName\n   */\n  loadAssets(dir, fileName) {\n    console.log('资源路径', dir);\n    this._modelHomeDir = dir;\n    console.log(fileName);\n    //`/Resources/Mao/Mao.model3.json`\n    /** \n      fetch(`${this._modelHomeDir}${fileName}`)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => {\n        const textDecoder = new TextDecoder('utf-8');\n        const fileContent = textDecoder.decode(arrayBuffer);\n        \n        // Log the file content to the console\n        console.log(fileContent);\n        \n        const setting: ICubismModelSetting = new CubismModelSettingJson(\n          arrayBuffer,\n          arrayBuffer.byteLength\n        );\n        //! Above is why the model won't load\n        // ステートを更新\n        this._state = LoadStep.LoadModel;\n         // 結果を保存\n        this.setupModel(setting);\n        \n      });\n      */\n\n    modelData.arrayBuffer();\n  }\n\n  /**\n   * model3.jsonからモデルを生成する。\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\n   *\n   * @param setting ICubismModelSettingのインスタンス\n   */\n  setupModel(setting) {\n    this._updating = true;\n    this._initialized = false;\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n      //`${this._modelHomeDir}${modelFileName}`\n\n      fetch(`${this._modelHomeDir}${modelFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        this.loadModel(arrayBuffer);\n        this._state = LoadStep.LoadExpression;\n\n        // callback\n        loadCubismExpression();\n      });\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = () => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count = this._modelSetting.getExpressionCount();\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName = this._modelSetting.getExpressionFileName(i);\n          fetch(`${this._modelHomeDir}${expressionFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n            const motion = this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);\n            if (this._expressions.getValue(expressionName) != null) {\n              ACubismMotion.delete(this._expressions.getValue(expressionName));\n              this._expressions.setValue(expressionName, null);\n            }\n            this._expressions.setValue(expressionName, motion);\n            this._expressionCount++;\n            if (this._expressionCount >= count) {\n              this._state = LoadStep.LoadPhysics;\n\n              // callback\n              loadCubismPhysics();\n            }\n          });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = () => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n        fetch(`${this._modelHomeDir}${physicsFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.LoadPose;\n\n          // callback\n          loadCubismPose();\n        });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = () => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n        fetch(`${this._modelHomeDir}${poseFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.SetupEyeBlink;\n\n          // callback\n          setupEyeBlink();\n        });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = () => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = () => {\n      this._breath = CubismBreath.create();\n      const breathParameters = new csmVector();\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.0, 0.5, 3.2345, 0.5));\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = () => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n        fetch(`${this._modelHomeDir}${userDataFile}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.SetupEyeBlinkIds;\n\n          // callback\n          setupEyeBlinkIds();\n        });\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = () => {\n      const eyeBlinkIdCount = this._modelSetting.getEyeBlinkParameterCount();\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(this._modelSetting.getEyeBlinkParameterId(i));\n      }\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = () => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = () => {\n      const layout = new csmMap();\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = () => {\n      document.getElementById('live2d-hidden').style.display = 'block';\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group = [];\n      const motionGroupCount = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      // 装入动作\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n        this._updating = false;\n        this._initialized = true;\n        this.createRenderer();\n        this.setupTextures();\n        this.getRenderer().startUp(gl);\n      }\n    };\n  }\n\n  /**\n   * テクスチャユニットにテクスチャをロードする\n   */\n  setupTextures() {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount = this._modelSetting.getTextureCount();\n      for (let modelTextureNumber = 0; modelTextureNumber < textureCount; modelTextureNumber++) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        // 在WebGL的纹理单元中加载纹理\n        let texturePath = this._modelSetting.getTextureFileName(modelTextureNumber);\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        // 加载完成时调用的回调函数\n        const onLoad = textureInfo => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n          this._textureCount++;\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\n   * レンダラを再構築する\n   */\n  reloadRenderer() {\n    this.deleteRenderer();\n    this.createRenderer();\n    this.setupTextures();\n  }\n\n  /**\n   * 更新\n   */\n  update() {\n    if (this._state != LoadStep.CompleteSetup) return;\n    const deltaTimeSeconds = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\n      // 在没有动作的运行的情况下，从待机动作中随机运行抽取，命运抽牌啦啦啦^ ^\n      let lucky = Math.floor(Math.random() * 1000 + 100);\n      if (lucky == 999) {\n        this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\n      } else if (lucky == 888) {\n        this.startRandomMotion(LAppDefine.MotionGroupDefault, LAppDefine.PriorityIdle);\n      }\n    } else {\n      motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds); // 更新动作\n    }\n\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      const value = 0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n    this._model.update();\n  }\n\n  /**\n   * 引数で指定したモーションの再生を開始する\n   * @param group モーショングループ名\n   * @param no グループ内の番号\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  startMotion(group, no, priority, onFinishedMotionHandler) {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion = this._motions.getValue(name);\n    let autoDelete = false;\n    if (motion == null) {\n      fetch(`${this._modelHomeDir}${motionFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        motion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);\n        let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, no);\n        if (fadeTime >= 0.0) {\n          motion.setFadeInTime(fadeTime);\n        }\n        fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\n        if (fadeTime >= 0.0) {\n          motion.setFadeOutTime(fadeTime);\n        }\n        motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        autoDelete = true; // 終了時にメモリから削除\n      });\n    } else {\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\n    }\n    return this._motionManager.startMotionPriority(motion, autoDelete, priority);\n  }\n\n  /**\n   * ランダムに選ばれたモーションの再生を開始する。\n   * @param group モーショングループ名\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @param onFinishedMotionHandler 动作再生结束时调用的回呼函数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   * @return 返回开始动作的识别号码。用于判定个别动作是否结束的isFinished（）参数。无法开始时[-1]\n   */\n  startRandomMotion(group, priority, onFinishedMotionHandler) {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    const no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\n  }\n\n  /**\n   * 引数で指定した表情モーションをセットする\n   *\n   * @param expressionId 表情モーションのID\n   */\n  setExpression(expressionId) {\n    const motion = this._expressions.getValue(expressionId);\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n    if (motion != null) {\n      this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\n   * ランダムに選ばれた表情モーションをセットする\n   */\n  setRandomExpression() {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n    const no = Math.floor(Math.random() * this._expressions.getSize());\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name = this._expressions._keyValues[i].first;\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * イベントの発火を受け取る\n   */\n  motionEventFired(eventValue) {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\n   * 当たり判定テスト\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\n   * 根据指定ID的顶点列表计算矩形，判定坐标是否在矩形范围内。\n   *\n   * @param hitArenaName  当たり判定をテストする対象のID\n   * @param x             判定を行うX座標\n   * @param y             判定を行うY座標\n   */\n  hitTest(hitArenaName, x, y) {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n    const count = this._modelSetting.getHitAreasCount();\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * モーションデータをグループ名から一括でロードする。\n   * モーションデータの名前は内部でModelSettingから取得する。\n   * 从组合名称中统一加载动作数据。\n   * 动作数据的名称在内部从ModelSetting取得。\n   *\n   * @param group モーションデータのグループ名\n   * group动作数据的组名称\n   */\n  preLoadMotionGroup(group) {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]load motion: ${motionFileName} => [${name}]`);\n      }\n      fetch(`${this._modelHomeDir}${motionFileName}`).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        const tmpMotion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name);\n        let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, i);\n        if (fadeTime >= 0.0) {\n          tmpMotion.setFadeInTime(fadeTime);\n        }\n        fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\n        if (fadeTime >= 0.0) {\n          tmpMotion.setFadeOutTime(fadeTime);\n        }\n        tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        if (this._motions.getValue(name) != null) {\n          ACubismMotion.delete(this._motions.getValue(name));\n        }\n        this._motions.setValue(name, tmpMotion);\n        this._motionCount++;\n        // console.log('this._motionCount',this._motionCount)\n        // console.log('this._allMotionCount',this._allMotionCount)\n        if (this._motionCount >= this._allMotionCount) {\n          this._state = LoadStep.LoadTexture;\n\n          // 全てのモーションを停止する\n          document.getElementById('live2d-hidden').style.display = 'none';\n          if (this._motionManager) {\n            this._motionManager.stopAllMotions();\n            this.createRenderer();\n            this.setupTextures();\n            this.getRenderer().startUp(gl);\n          }\n          this._updating = false;\n          this._initialized = true;\n\n          // this.createRenderer();\n          // this.setupTextures();\n          // this.getRenderer().startUp(gl);\n          document.getElementById('live2d').style.visibility = 'visible';\n        }\n      });\n    }\n  }\n\n  /**\n   * すべてのモーションデータを解放する。\n   */\n  releaseMotions() {\n    this._motions.clear();\n  }\n\n  /**\n   * 全ての表情データを解放する。\n   */\n  releaseExpressions() {\n    this._expressions.clear();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  doDraw() {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const viewport = [0, 0, canvas.width, canvas.height];\n    this.getRenderer().setRenderState(frameBuffer, viewport);\n    this.getRenderer().drawModel();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  draw(matrix) {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n      this.getRenderer().setMvpMatrix(matrix);\n      this.doDraw();\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    this._modelSetting = void 0;\n    // モデルセッティング情報\n    this._modelHomeDir = void 0;\n    // モデルセッティングが置かれたディレクトリ\n    this._userTimeSeconds = void 0;\n    // デルタ時間の積算値[秒]\n    this._eyeBlinkIds = void 0;\n    // モデルに設定された瞬き機能用パラメータID\n    this._lipSyncIds = void 0;\n    // モデルに設定されたリップシンク機能用パラメータID\n    this._motions = void 0;\n    // 読み込まれているモーションのリスト\n    this._expressions = void 0;\n    // 読み込まれている表情のリスト\n    this._hitArea = void 0;\n    this._userArea = void 0;\n    this._idParamAngleX = void 0;\n    // パラメータID: ParamAngleX\n    this._idParamAngleY = void 0;\n    // パラメータID: ParamAngleY\n    this._idParamAngleZ = void 0;\n    // パラメータID: ParamAngleZ\n    this._idParamEyeBallX = void 0;\n    // パラメータID: ParamEyeBallX\n    this._idParamEyeBallY = void 0;\n    // パラメータID: ParamEyeBAllY\n    this._idParamBodyAngleX = void 0;\n    // パラメータID: ParamBodyAngleX\n    this._state = void 0;\n    // 現在のステータス管理用\n    this._expressionCount = void 0;\n    // 表情データカウント\n    this._textureCount = void 0;\n    // テクスチャカウント\n    this._motionCount = void 0;\n    // モーションデータカウント\n    this._allMotionCount = void 0;\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n    this._eyeBlinkIds = new csmVector();\n    this._lipSyncIds = new csmVector();\n    this._motions = new csmMap();\n    this._expressions = new csmMap();\n    this._hitArea = new csmVector();\n    this._userArea = new csmVector();\n    this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);\n    this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n  }\n\n  // モーション総数\n}","map":{"version":3,"names":["modelData","Live2DCubismFramework","live2dcubismframework","cubismid","cubismusermodel","icubismmodelsetting","cubismmodelsettingjson","cubismdefaultparameterid","acubismmotion","cubismeyeblink","cubismbreath","csmvector","csmmap","cubismmatrix44","cubismmotion","cubismmotionqueuemanager","csmstring","csmrect","CubismLogInfo","csmRect","csmString","InvalidMotionQueueEntryHandleValue","CubismMotionQueueEntryHandle","CubismMotion","CubismMatrix44","csmMap","csmVector","CubismBreath","BreathParameterData","CubismEyeBlink","ACubismMotion","FinishedMotionCallback","CubismFramework","CubismIdHandle","CubismUserModel","ICubismModelSetting","CubismModelSettingJson","CubismDefaultParameterId","LAppPal","gl","canvas","frameBuffer","LAppDelegate","LAppDefine","LoadStep","LAppModel","loadAssets","dir","fileName","console","log","_modelHomeDir","arrayBuffer","setupModel","setting","_updating","_initialized","_modelSetting","getModelFileName","modelFileName","fetch","then","response","loadModel","_state","LoadExpression","loadCubismExpression","WaitLoadModel","printMessage","getExpressionCount","count","i","expressionName","getExpressionName","expressionFileName","getExpressionFileName","motion","loadExpression","byteLength","_expressions","getValue","delete","setValue","_expressionCount","LoadPhysics","loadCubismPhysics","WaitLoadExpression","getPhysicsFileName","physicsFileName","loadPhysics","LoadPose","loadCubismPose","WaitLoadPhysics","getPoseFileName","poseFileName","loadPose","SetupEyeBlink","setupEyeBlink","WaitLoadPose","getEyeBlinkParameterCount","_eyeBlink","create","SetupBreath","setupBreath","_breath","breathParameters","pushBack","_idParamAngleX","_idParamAngleY","_idParamAngleZ","_idParamBodyAngleX","getIdManager","getId","ParamBreath","setParameters","LoadUserData","loadUserData","getUserDataFile","userDataFile","SetupEyeBlinkIds","setupEyeBlinkIds","WaitLoadUserData","eyeBlinkIdCount","_eyeBlinkIds","getEyeBlinkParameterId","SetupLipSyncIds","setupLipSyncIds","lipSyncIdCount","getLipSyncParameterCount","_lipSyncIds","getLipSyncParameterId","SetupLayout","setupLayout","layout","getLayoutMap","_modelMatrix","setupFromLayout","LoadMotion","loadCubismMotion","document","getElementById","style","display","WaitLoadMotion","_model","saveParameters","_allMotionCount","_motionCount","group","motionGroupCount","getMotionGroupCount","getMotionGroupName","getMotionCount","preLoadMotionGroup","LoadTexture","_motionManager","stopAllMotions","createRenderer","setupTextures","getRenderer","startUp","usePremultiply","textureCount","getTextureCount","modelTextureNumber","getTextureFileName","texturePath","onLoad","textureInfo","bindTexture","id","_textureCount","CompleteSetup","getInstance","getTextureManager","createTextureFromPngFile","setIsPremultipliedAlpha","WaitLoadTexture","reloadRenderer","deleteRenderer","update","deltaTimeSeconds","getDeltaTime","_userTimeSeconds","_dragManager","_dragX","getX","_dragY","getY","motionUpdated","loadParameters","isFinished","startRandomMotion","MotionGroupIdle","PriorityIdle","lucky","Math","floor","random","MotionGroupDefault","updateMotion","updateParameters","_expressionManager","addParameterValueById","_idParamEyeBallX","_idParamEyeBallY","_physics","evaluate","_lipsync","value","getSize","at","_pose","startMotion","no","priority","onFinishedMotionHandler","PriorityForce","setReservePriority","reserveMotion","_debugMode","motionFileName","getMotionFileName","name","_motions","autoDelete","loadMotion","fadeTime","getMotionFadeInTimeValue","setFadeInTime","getMotionFadeOutTimeValue","setFadeOutTime","setEffectIds","setFinishedMotionHandler","startMotionPriority","setExpression","expressionId","setRandomExpression","_keyValues","first","motionEventFired","eventValue","s","hitTest","hitArenaName","x","y","_opacity","getHitAreasCount","getHitAreaName","drawId","getHitAreaId","isHit","tmpMotion","visibility","releaseMotions","clear","releaseExpressions","doDraw","viewport","width","height","setRenderState","drawModel","draw","matrix","multiplyByMatrix","setMvpMatrix","constructor","_hitArea","_userArea","ParamAngleX","ParamAngleY","ParamAngleZ","ParamEyeBallX","ParamEyeBallY","ParamBodyAngleX","LoadAssets"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/src/lappmodel.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport modelData from '../Resources/Mao/Mao.model3.json'\n\nimport { Live2DCubismFramework as live2dcubismframework } from '../Framework/src/live2dcubismframework';\nimport { Live2DCubismFramework as cubismid } from '../Framework/src/id/cubismid';\nimport { Live2DCubismFramework as cubismusermodel } from '../Framework/src/model/cubismusermodel';\nimport { Live2DCubismFramework as icubismmodelsetting } from '../Framework/src/icubismmodelsetting';\nimport { Live2DCubismFramework as cubismmodelsettingjson } from '../Framework/src/cubismmodelsettingjson';\nimport { Live2DCubismFramework as cubismdefaultparameterid } from '../Framework/src/cubismdefaultparameterid';\nimport { Live2DCubismFramework as acubismmotion } from '../Framework/src/motion/acubismmotion';\nimport { Live2DCubismFramework as cubismeyeblink } from '../Framework/src/effect/cubismeyeblink';\nimport { Live2DCubismFramework as cubismbreath } from '../Framework/src/effect/cubismbreath';\nimport { Live2DCubismFramework as csmvector } from '../Framework/src/type/csmvector';\nimport { Live2DCubismFramework as csmmap } from '../Framework/src/type/csmmap';\nimport { Live2DCubismFramework as cubismmatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { Live2DCubismFramework as cubismmotion } from '../Framework/src/motion/cubismmotion';\nimport { Live2DCubismFramework as cubismmotionqueuemanager } from '../Framework/src/motion/cubismmotionqueuemanager';\nimport { Live2DCubismFramework as csmstring } from '../Framework/src/type/csmstring';\nimport { Live2DCubismFramework as csmrect } from '../Framework/src/type/csmrectf';\nimport { CubismLogInfo } from '../Framework/src/utils/cubismdebug';\nimport csmRect = csmrect.csmRect;\nimport csmString = csmstring.csmString;\nimport InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager.InvalidMotionQueueEntryHandleValue;\nimport CubismMotionQueueEntryHandle = cubismmotionqueuemanager.CubismMotionQueueEntryHandle;\nimport CubismMotion = cubismmotion.CubismMotion;\nimport CubismMatrix44 = cubismmatrix44.CubismMatrix44;\nimport csmMap = csmmap.csmMap;\nimport csmVector = csmvector.csmVector;\nimport CubismBreath = cubismbreath.CubismBreath;\nimport BreathParameterData = cubismbreath.BreathParameterData;\nimport CubismEyeBlink = cubismeyeblink.CubismEyeBlink;\nimport ACubismMotion = acubismmotion.ACubismMotion;\nimport FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\nimport CubismFramework = live2dcubismframework.CubismFramework;\nimport CubismIdHandle = cubismid.CubismIdHandle;\nimport CubismUserModel = cubismusermodel.CubismUserModel;\nimport ICubismModelSetting = icubismmodelsetting.ICubismModelSetting;\nimport CubismModelSettingJson = cubismmodelsettingjson.CubismModelSettingJson;\nimport CubismDefaultParameterId = cubismdefaultparameterid;\n\nimport { LAppPal } from './lapppal';\nimport { gl, canvas, frameBuffer, LAppDelegate } from './lappdelegate';\nimport { TextureInfo } from './lapptexturemanager';\nimport * as LAppDefine from './lappdefine';\nimport 'whatwg-fetch';\n\nenum LoadStep {\n  LoadAssets,\n  LoadModel,\n  WaitLoadModel,\n  LoadExpression,\n  WaitLoadExpression,\n  LoadPhysics,\n  WaitLoadPhysics,\n  LoadPose,\n  WaitLoadPose,\n  SetupEyeBlink,\n  SetupBreath,\n  LoadUserData,\n  WaitLoadUserData,\n  SetupEyeBlinkIds,\n  SetupLipSyncIds,\n  SetupLayout,\n  LoadMotion,\n  WaitLoadMotion,\n  CompleteInitialize,\n  CompleteSetupModel,\n  LoadTexture,\n  WaitLoadTexture,\n  CompleteSetup\n}\n\n/**\n * ユーザーが実際に使用するモデルの実装クラス<br>\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\n */\nexport class LAppModel extends CubismUserModel {\n  /**\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\n   * @param dir\n   * @param fileName\n   */ \n  public loadAssets(dir: string, fileName: string): void {\n    console.log('资源路径',dir)\n    this._modelHomeDir = dir;\n    console.log(fileName)\n    //`/Resources/Mao/Mao.model3.json`\n    /** \n      fetch(`${this._modelHomeDir}${fileName}`)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => {\n        const textDecoder = new TextDecoder('utf-8');\n        const fileContent = textDecoder.decode(arrayBuffer);\n        \n        // Log the file content to the console\n        console.log(fileContent);\n        \n        const setting: ICubismModelSetting = new CubismModelSettingJson(\n          arrayBuffer,\n          arrayBuffer.byteLength\n        );\n        //! Above is why the model won't load\n        // ステートを更新\n        this._state = LoadStep.LoadModel;\n\n        // 結果を保存\n        this.setupModel(setting);\n        \n      });\n      */\n\n      modelData.arrayBuffer()\n  }\n\n  /**\n   * model3.jsonからモデルを生成する。\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\n   *\n   * @param setting ICubismModelSettingのインスタンス\n   */\n  private setupModel(setting: ICubismModelSetting): void {\n    this._updating = true;\n    this._initialized = false;\n\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n      //`${this._modelHomeDir}${modelFileName}`\n      \n      fetch(`${this._modelHomeDir}${modelFileName}`)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          this.loadModel(arrayBuffer);\n          this._state = LoadStep.LoadExpression;\n\n          // callback\n          loadCubismExpression();\n        });\n\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = (): void => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count: number = this._modelSetting.getExpressionCount();\n\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName = this._modelSetting.getExpressionFileName(\n            i\n          );\n\n          fetch(`${this._modelHomeDir}${expressionFileName}`)\n            .then(response => response.arrayBuffer())\n            .then(arrayBuffer => {\n              const motion: ACubismMotion = this.loadExpression(\n                arrayBuffer,\n                arrayBuffer.byteLength,\n                expressionName\n              );\n\n              if (this._expressions.getValue(expressionName) != null) {\n                ACubismMotion.delete(\n                  this._expressions.getValue(expressionName)\n                );\n                this._expressions.setValue(expressionName, null);\n              }\n\n              this._expressions.setValue(expressionName, motion);\n\n              this._expressionCount++;\n\n              if (this._expressionCount >= count) {\n                this._state = LoadStep.LoadPhysics;\n\n                // callback\n                loadCubismPhysics();\n              }\n            });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = (): void => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n\n        fetch(`${this._modelHomeDir}${physicsFileName}`)\n          .then(response => response.arrayBuffer())\n          .then(arrayBuffer => {\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.LoadPose;\n\n            // callback\n            loadCubismPose();\n          });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = (): void => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n\n        fetch(`${this._modelHomeDir}${poseFileName}`)\n          .then(response => response.arrayBuffer())\n          .then(arrayBuffer => {\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlink;\n\n            // callback\n            setupEyeBlink();\n          });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = (): void => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = (): void => {\n      this._breath = CubismBreath.create();\n\n      const breathParameters: csmVector<BreathParameterData> = new csmVector();\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(\n          CubismFramework.getIdManager().getId(\n            CubismDefaultParameterId.ParamBreath\n          ),\n          0.0,\n          0.5,\n          3.2345,\n          0.5\n        )\n      );\n\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = (): void => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n\n        fetch(`${this._modelHomeDir}${userDataFile}`)\n          .then(response => response.arrayBuffer())\n          .then(arrayBuffer => {\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlinkIds;\n\n            // callback\n            setupEyeBlinkIds();\n          });\n\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = (): void => {\n      const eyeBlinkIdCount: number = this._modelSetting.getEyeBlinkParameterCount();\n\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(\n          this._modelSetting.getEyeBlinkParameterId(i)\n        );\n      }\n\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = (): void => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = (): void => {\n      const layout: csmMap<string, number> = new csmMap<string, number>();\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = (): void => {\n      document.getElementById('live2d-hidden').style.display='block'\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group: string[] = [];\n\n      const motionGroupCount: number = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      // 装入动作\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n\n        this._updating = false;\n        this._initialized = true;\n\n        this.createRenderer();\n        this.setupTextures();\n        this.getRenderer().startUp(gl);\n      }\n    };\n  }\n\n  /**\n   * テクスチャユニットにテクスチャをロードする\n   */\n  private setupTextures(): void {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount: number = this._modelSetting.getTextureCount();\n\n      for (\n        let modelTextureNumber = 0;\n        modelTextureNumber < textureCount;\n        modelTextureNumber++\n      ) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        // 在WebGL的纹理单元中加载纹理\n        let texturePath = this._modelSetting.getTextureFileName(\n          modelTextureNumber\n        );\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        // 加载完成时调用的回调函数\n        const onLoad = (textureInfo: TextureInfo): void => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n\n          this._textureCount++;\n\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        LAppDelegate.getInstance()\n          .getTextureManager()\n          .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\n   * レンダラを再構築する\n   */\n  public reloadRenderer(): void {\n    this.deleteRenderer();\n    this.createRenderer();\n    this.setupTextures();\n  }\n\n  /**\n   * 更新\n   */\n  public update(): void {\n    if (this._state != LoadStep.CompleteSetup) return;\n\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      this.startRandomMotion(\n        LAppDefine.MotionGroupIdle,\n        LAppDefine.PriorityIdle\n      );\n      // 在没有动作的运行的情况下，从待机动作中随机运行抽取，命运抽牌啦啦啦^ ^\n      let lucky = Math.floor(Math.random() * 1000 + 100);\n      if (lucky == 999) {\n        this.startRandomMotion(\n          LAppDefine.MotionGroupIdle,\n          LAppDefine.PriorityIdle\n        );\n      } else if (lucky == 888) {\n        this.startRandomMotion(\n          LAppDefine.MotionGroupDefault,\n          LAppDefine.PriorityIdle\n        );\n      }\n    } else {\n      motionUpdated = this._motionManager.updateMotion(\n        this._model,\n        deltaTimeSeconds\n      ); // 更新动作\n    }\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(\n      this._idParamAngleZ,\n      this._dragX * this._dragY * -30\n    );\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(\n      this._idParamBodyAngleX,\n      this._dragX * 10\n    ); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      const value = 0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    this._model.update();\n  }\n\n  /**\n   * 引数で指定したモーションの再生を開始する\n   * @param group モーショングループ名\n   * @param no グループ内の番号\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startMotion(\n    group: string,\n    no: number,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion: CubismMotion = this._motions.getValue(name) as CubismMotion;\n    let autoDelete = false;\n\n    if (motion == null) {\n      fetch(`${this._modelHomeDir}${motionFileName}`)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          motion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            null,\n            onFinishedMotionHandler\n          );\n          let fadeTime: number = this._modelSetting.getMotionFadeInTimeValue(\n            group,\n            no\n          );\n\n          if (fadeTime >= 0.0) {\n            motion.setFadeInTime(fadeTime);\n          }\n\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\n          if (fadeTime >= 0.0) {\n            motion.setFadeOutTime(fadeTime);\n          }\n\n          motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n          autoDelete = true; // 終了時にメモリから削除\n        });\n    } else {\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\n    }\n    return this._motionManager.startMotionPriority(\n      motion,\n      autoDelete,\n      priority\n    );\n  }\n\n  /**\n   * ランダムに選ばれたモーションの再生を開始する。\n   * @param group モーショングループ名\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @param onFinishedMotionHandler 动作再生结束时调用的回呼函数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   * @return 返回开始动作的识别号码。用于判定个别动作是否结束的isFinished（）参数。无法开始时[-1]\n   */\n  public startRandomMotion(\n    group: string,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const no: number = Math.floor(\n      Math.random() * this._modelSetting.getMotionCount(group)\n    );\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\n  }\n\n  /**\n   * 引数で指定した表情モーションをセットする\n   *\n   * @param expressionId 表情モーションのID\n   */\n  public setExpression(expressionId: string): void {\n    const motion: ACubismMotion = this._expressions.getValue(expressionId);\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n\n    if (motion != null) {\n      this._expressionManager.startMotionPriority(\n        motion,\n        false,\n        LAppDefine.PriorityForce\n      );\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\n   * ランダムに選ばれた表情モーションをセットする\n   */\n  public setRandomExpression(): void {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n\n    const no: number = Math.floor(Math.random() * this._expressions.getSize());\n\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name: string = this._expressions._keyValues[i].first;\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * イベントの発火を受け取る\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\n   * 当たり判定テスト\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\n   * 根据指定ID的顶点列表计算矩形，判定坐标是否在矩形范围内。\n   *\n   * @param hitArenaName  当たり判定をテストする対象のID\n   * @param x             判定を行うX座標\n   * @param y             判定を行うY座標\n   */\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n\n    const count: number = this._modelSetting.getHitAreasCount();\n\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * モーションデータをグループ名から一括でロードする。\n   * モーションデータの名前は内部でModelSettingから取得する。\n   * 从组合名称中统一加载动作数据。\n   * 动作数据的名称在内部从ModelSetting取得。\n   *\n   * @param group モーションデータのグループ名\n   * group动作数据的组名称\n   */\n  public preLoadMotionGroup(group: string): void {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(\n          `[APP]load motion: ${motionFileName} => [${name}]`\n        );\n      }\n\n      fetch(`${this._modelHomeDir}${motionFileName}`)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          const tmpMotion: CubismMotion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            name\n          );\n\n          let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, i);\n          if (fadeTime >= 0.0) {\n            tmpMotion.setFadeInTime(fadeTime);\n          }\n\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\n          if (fadeTime >= 0.0) {\n            tmpMotion.setFadeOutTime(fadeTime);\n          }\n          tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n\n          if (this._motions.getValue(name) != null) {\n            ACubismMotion.delete(this._motions.getValue(name));\n          }\n\n          this._motions.setValue(name, tmpMotion);\n\n          this._motionCount++;\n          // console.log('this._motionCount',this._motionCount)\n          // console.log('this._allMotionCount',this._allMotionCount)\n          if (this._motionCount >= this._allMotionCount) {\n            this._state = LoadStep.LoadTexture;\n\n            // 全てのモーションを停止する\n            document.getElementById('live2d-hidden').style.display='none'\n            if(this._motionManager){\n              this._motionManager.stopAllMotions();\n              this.createRenderer();\n              this.setupTextures();\n              this.getRenderer().startUp(gl);\n            }\n\n            this._updating = false;\n            this._initialized = true;\n\n            // this.createRenderer();\n            // this.setupTextures();\n            // this.getRenderer().startUp(gl);\n            document.getElementById('live2d').style.visibility='visible'\n          }\n        });\n    }\n  }\n\n  /**\n   * すべてのモーションデータを解放する。\n   */\n  public releaseMotions(): void {\n    this._motions.clear();\n  }\n\n  /**\n   * 全ての表情データを解放する。\n   */\n  public releaseExpressions(): void {\n    this._expressions.clear();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public doDraw(): void {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\n\n    this.getRenderer().setRenderState(frameBuffer, viewport);\n    this.getRenderer().drawModel();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public draw(matrix: CubismMatrix44): void {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n\n      this.getRenderer().setMvpMatrix(matrix);\n\n      this.doDraw();\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n\n    this._eyeBlinkIds = new csmVector<CubismIdHandle>();\n    this._lipSyncIds = new csmVector<CubismIdHandle>();\n\n    this._motions = new csmMap<string, ACubismMotion>();\n    this._expressions = new csmMap<string, ACubismMotion>();\n\n    this._hitArea = new csmVector<csmRect>();\n    this._userArea = new csmVector<csmRect>();\n\n    this._idParamAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleX\n    );\n    this._idParamAngleY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleY\n    );\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleZ\n    );\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallX\n    );\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallY\n    );\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamBodyAngleX\n    );\n\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n  }\n\n  _modelSetting: ICubismModelSetting; // モデルセッティング情報\n  _modelHomeDir: string; // モデルセッティングが置かれたディレクトリ\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  _eyeBlinkIds: csmVector<CubismIdHandle>; // モデルに設定された瞬き機能用パラメータID\n  _lipSyncIds: csmVector<CubismIdHandle>; // モデルに設定されたリップシンク機能用パラメータID\n\n  _motions: csmMap<string, ACubismMotion>; // 読み込まれているモーションのリスト\n  _expressions: csmMap<string, ACubismMotion>; // 読み込まれている表情のリスト\n\n  _hitArea: csmVector<csmRect>;\n  _userArea: csmVector<csmRect>;\n\n  _idParamAngleX: CubismIdHandle; // パラメータID: ParamAngleX\n  _idParamAngleY: CubismIdHandle; // パラメータID: ParamAngleY\n  _idParamAngleZ: CubismIdHandle; // パラメータID: ParamAngleZ\n  _idParamEyeBallX: CubismIdHandle; // パラメータID: ParamEyeBallX\n  _idParamEyeBallY: CubismIdHandle; // パラメータID: ParamEyeBAllY\n  _idParamBodyAngleX: CubismIdHandle; // パラメータID: ParamBodyAngleX\n\n  _state: number; // 現在のステータス管理用\n  _expressionCount: number; // 表情データカウント\n  _textureCount: number; // テクスチャカウント\n  _motionCount: number; // モーションデータカウント\n  _allMotionCount: number; // モーション総数\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}