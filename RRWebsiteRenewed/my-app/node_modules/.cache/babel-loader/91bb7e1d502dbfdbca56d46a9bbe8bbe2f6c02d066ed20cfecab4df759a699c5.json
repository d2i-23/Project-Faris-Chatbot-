{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismvector2 } from '../math/cubismvector2';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nvar csmVector = csmvector.csmVector;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismVector2 = cubismvector2.CubismVector2;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  let CubismPhysicsTargetType = /*#__PURE__*/function (CubismPhysicsTargetType) {\n    CubismPhysicsTargetType[CubismPhysicsTargetType[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\n    return CubismPhysicsTargetType;\n  }({});\n  _Live2DCubismFramework.CubismPhysicsTargetType = CubismPhysicsTargetType;\n  let CubismPhysicsSource = /*#__PURE__*/function (CubismPhysicsSource) {\n    CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\n    CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\n    CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\n    return CubismPhysicsSource;\n  }({});\n  _Live2DCubismFramework.CubismPhysicsSource = CubismPhysicsSource;\n  class PhysicsJsonEffectiveForces {\n    constructor() {\n      this.gravity = void 0;\n      // 重力\n      this.wind = void 0;\n      this.gravity = new CubismVector2(0, 0);\n      this.wind = new CubismVector2(0, 0);\n    }\n\n    // 風\n  }\n  _Live2DCubismFramework.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;\n  class CubismPhysicsParameter {\n    constructor() {\n      this.id = void 0;\n      // パラメータ\n      this.targetType = void 0;\n    } // 適用先の種類\n  }\n  _Live2DCubismFramework.CubismPhysicsParameter = CubismPhysicsParameter;\n  class CubismPhysicsNormalization {\n    constructor() {\n      this.minimum = void 0;\n      // 最大値\n      this.maximum = void 0;\n      // 最小値\n      this.defalut = void 0;\n    } // デフォルト値\n  }\n  _Live2DCubismFramework.CubismPhysicsNormalization = CubismPhysicsNormalization;\n  class CubismPhysicsParticle {\n    constructor() {\n      this.initialPosition = void 0;\n      // 初期位置\n      this.mobility = void 0;\n      // 動きやすさ\n      this.delay = void 0;\n      // 遅れ\n      this.acceleration = void 0;\n      // 加速度\n      this.radius = void 0;\n      // 距離\n      this.position = void 0;\n      // 現在の位置\n      this.lastPosition = void 0;\n      // 最後の位置\n      this.lastGravity = void 0;\n      // 最後の重力\n      this.force = void 0;\n      // 現在かかっている力\n      this.velocity = void 0;\n      this.initialPosition = new CubismVector2(0, 0);\n      this.position = new CubismVector2(0, 0);\n      this.lastPosition = new CubismVector2(0, 0);\n      this.lastGravity = new CubismVector2(0, 0);\n      this.force = new CubismVector2(0, 0);\n      this.velocity = new CubismVector2(0, 0);\n    }\n\n    // 現在の速度\n  }\n  _Live2DCubismFramework.CubismPhysicsParticle = CubismPhysicsParticle;\n  class CubismPhysicsSubRig {\n    constructor() {\n      this.inputCount = void 0;\n      // 入力の個数\n      this.outputCount = void 0;\n      // 出力の個数\n      this.particleCount = void 0;\n      // 物理点の個数\n      this.baseInputIndex = void 0;\n      // 入力の最初のインデックス\n      this.baseOutputIndex = void 0;\n      // 出力の最初のインデックス\n      this.baseParticleIndex = void 0;\n      // 物理点の最初のインデックス\n      this.normalizationPosition = void 0;\n      // 正規化された位置\n      this.normalizationAngle = void 0;\n      this.normalizationPosition = new CubismPhysicsNormalization();\n      this.normalizationAngle = new CubismPhysicsNormalization();\n    }\n\n    // 正規化された角度\n  }\n  _Live2DCubismFramework.CubismPhysicsSubRig = CubismPhysicsSubRig;\n  /**\r\n   * 正規化されたパラメータの取得関数の宣言\r\n   * @param targetTranslation     // 演算結果の移動値\r\n   * @param targetAngle           // 演算結果の角度\r\n   * @param value                 // パラメータの値\r\n   * @param parameterMinimunValue // パラメータの最小値\r\n   * @param parameterMaximumValue // パラメータの最大値\r\n   * @param parameterDefaultValue // パラメータのデフォルト値\r\n   * @param normalizationPosition // 正規化された位置\r\n   * @param normalizationAngle    // 正規化された角度\r\n   * @param isInverted            // 値が反転されているか？\r\n   * @param weight                // 重み\r\n   */\n  /**\r\n   * 物理演算の値の取得関数の宣言\r\n   * @param translation 移動値\r\n   * @param particles 物理点のリスト\r\n   * @param isInverted 値が反映されているか\r\n   * @param parentGravity 重力\r\n   * @return 値\r\n   */\n  /**\r\n   * 物理演算のスケールの取得関数の宣言\r\n   * @param translationScale 移動値のスケール\r\n   * @param angleScale    角度のスケール\r\n   * @return スケール値\r\n   */\n  /**\r\n   * 物理演算の入力情報\r\n   */\n  class CubismPhysicsInput {\n    constructor() {\n      this.source = void 0;\n      // 入力元のパラメータ\n      this.sourceParameterIndex = void 0;\n      // 入力元のパラメータのインデックス\n      this.weight = void 0;\n      // 重み\n      this.type = void 0;\n      // 入力の種類\n      this.reflect = void 0;\n      // 値が反転されているかどうか\n      this.getNormalizedParameterValue = void 0;\n      this.source = new CubismPhysicsParameter();\n    }\n\n    // 正規化されたパラメータ値の取得関数\n  }\n  _Live2DCubismFramework.CubismPhysicsInput = CubismPhysicsInput;\n  class CubismPhysicsOutput {\n    constructor() {\n      this.destination = void 0;\n      // 出力先のパラメータ\n      this.destinationParameterIndex = void 0;\n      // 出力先のパラメータのインデックス\n      this.vertexIndex = void 0;\n      // 振り子のインデックス\n      this.translationScale = void 0;\n      // 移動値のスケール\n      this.angleScale = void 0;\n      // 角度のスケール\n      this.weight = void 0;\n      // 重み\n      this.type = void 0;\n      // 出力の種類\n      this.reflect = void 0;\n      // 値が反転されているかどうか\n      this.valueBelowMinimum = void 0;\n      // 最小値を下回った時の値\n      this.valueExceededMaximum = void 0;\n      // 最大値をこえた時の値\n      this.getValue = void 0;\n      // 物理演算の値の取得関数\n      this.getScale = void 0;\n      this.destination = new CubismPhysicsParameter();\n      this.translationScale = new CubismVector2(0, 0);\n    }\n\n    // 物理演算のスケール値の取得関数\n  }\n  _Live2DCubismFramework.CubismPhysicsOutput = CubismPhysicsOutput;\n  class CubismPhysicsRig {\n    constructor() {\n      this.subRigCount = void 0;\n      // 物理演算の物理点の個数\n      this.settings = void 0;\n      // 物理演算の物理点の管理のリスト\n      this.inputs = void 0;\n      // 物理演算の入力のリスト\n      this.outputs = void 0;\n      // 物理演算の出力のリスト\n      this.particles = void 0;\n      // 物理演算の物理点のリスト\n      this.gravity = void 0;\n      // 重力\n      this.wind = void 0;\n      this.settings = new csmVector();\n      this.inputs = new csmVector();\n      this.outputs = new csmVector();\n      this.particles = new csmVector();\n      this.gravity = new CubismVector2(0, 0);\n      this.wind = new CubismVector2(0, 0);\n    }\n\n    // 風\n  }\n  _Live2DCubismFramework.CubismPhysicsRig = CubismPhysicsRig;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismvector2","cubismid","csmvector","csmVector","CubismIdHandle","CubismVector2","_Live2DCubismFramework","CubismPhysicsTargetType","CubismPhysicsSource","PhysicsJsonEffectiveForces","constructor","gravity","wind","CubismPhysicsParameter","id","targetType","CubismPhysicsNormalization","minimum","maximum","defalut","CubismPhysicsParticle","initialPosition","mobility","delay","acceleration","radius","position","lastPosition","lastGravity","force","velocity","CubismPhysicsSubRig","inputCount","outputCount","particleCount","baseInputIndex","baseOutputIndex","baseParticleIndex","normalizationPosition","normalizationAngle","CubismPhysicsInput","source","sourceParameterIndex","weight","type","reflect","getNormalizedParameterValue","CubismPhysicsOutput","destination","destinationParameterIndex","vertexIndex","translationScale","angleScale","valueBelowMinimum","valueExceededMaximum","getValue","getScale","CubismPhysicsRig","subRigCount","settings","inputs","outputs","particles"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/physics/cubismphysicsinternal.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismvector2 } from '../math/cubismvector2';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport csmVector = csmvector.csmVector;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismVector2 = cubismvector2.CubismVector2;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * 物理演算の適用先の種類\r\n   */\r\n  export enum CubismPhysicsTargetType {\r\n    CubismPhysicsTargetType_Parameter // パラメータに対して適用\r\n  }\r\n\r\n  /**\r\n   * 物理演算の入力の種類\r\n   */\r\n  export enum CubismPhysicsSource {\r\n    CubismPhysicsSource_X, // X軸の位置から\r\n    CubismPhysicsSource_Y, // Y軸の位置から\r\n    CubismPhysicsSource_Angle // 角度から\r\n  }\r\n\r\n  /**\r\n   * @brief 物理演算で使用する外部の力\r\n   *\r\n   * 物理演算で使用する外部の力。\r\n   */\r\n  export class PhysicsJsonEffectiveForces {\r\n    constructor() {\r\n      this.gravity = new CubismVector2(0, 0);\r\n      this.wind = new CubismVector2(0, 0);\r\n    }\r\n    gravity: CubismVector2; // 重力\r\n    wind: CubismVector2; // 風\r\n  }\r\n\r\n  /**\r\n   * 物理演算のパラメータ情報\r\n   */\r\n  export class CubismPhysicsParameter {\r\n    id: CubismIdHandle; // パラメータ\r\n    targetType: CubismPhysicsTargetType; // 適用先の種類\r\n  }\r\n\r\n  /**\r\n   * 物理演算の正規化情報\r\n   */\r\n  export class CubismPhysicsNormalization {\r\n    minimum: number; // 最大値\r\n    maximum: number; // 最小値\r\n    defalut: number; // デフォルト値\r\n  }\r\n\r\n  /**\r\n   * 物理演算の演算委使用する物理点の情報\r\n   */\r\n  export class CubismPhysicsParticle {\r\n    constructor() {\r\n      this.initialPosition = new CubismVector2(0, 0);\r\n      this.position = new CubismVector2(0, 0);\r\n      this.lastPosition = new CubismVector2(0, 0);\r\n      this.lastGravity = new CubismVector2(0, 0);\r\n      this.force = new CubismVector2(0, 0);\r\n      this.velocity = new CubismVector2(0, 0);\r\n    }\r\n\r\n    initialPosition: CubismVector2; // 初期位置\r\n    mobility: number; // 動きやすさ\r\n    delay: number; // 遅れ\r\n    acceleration: number; // 加速度\r\n    radius: number; // 距離\r\n    position: CubismVector2; // 現在の位置\r\n    lastPosition: CubismVector2; // 最後の位置\r\n    lastGravity: CubismVector2; // 最後の重力\r\n    force: CubismVector2; // 現在かかっている力\r\n    velocity: CubismVector2; // 現在の速度\r\n  }\r\n\r\n  /**\r\n   * 物理演算の物理点の管理\r\n   */\r\n  export class CubismPhysicsSubRig {\r\n    constructor() {\r\n      this.normalizationPosition = new CubismPhysicsNormalization();\r\n      this.normalizationAngle = new CubismPhysicsNormalization();\r\n    }\r\n    inputCount: number; // 入力の個数\r\n    outputCount: number; // 出力の個数\r\n    particleCount: number; // 物理点の個数\r\n    baseInputIndex: number; // 入力の最初のインデックス\r\n    baseOutputIndex: number; // 出力の最初のインデックス\r\n    baseParticleIndex: number; // 物理点の最初のインデックス\r\n    normalizationPosition: CubismPhysicsNormalization; // 正規化された位置\r\n    normalizationAngle: CubismPhysicsNormalization; // 正規化された角度\r\n  }\r\n\r\n  /**\r\n   * 正規化されたパラメータの取得関数の宣言\r\n   * @param targetTranslation     // 演算結果の移動値\r\n   * @param targetAngle           // 演算結果の角度\r\n   * @param value                 // パラメータの値\r\n   * @param parameterMinimunValue // パラメータの最小値\r\n   * @param parameterMaximumValue // パラメータの最大値\r\n   * @param parameterDefaultValue // パラメータのデフォルト値\r\n   * @param normalizationPosition // 正規化された位置\r\n   * @param normalizationAngle    // 正規化された角度\r\n   * @param isInverted            // 値が反転されているか？\r\n   * @param weight                // 重み\r\n   */\r\n  export interface normalizedPhysicsParameterValueGetter {\r\n    (\r\n      targetTranslation: CubismVector2,\r\n      targetAngle: { angle: number },\r\n      value: number,\r\n      parameterMinimunValue: number,\r\n      parameterMaximumValue: number,\r\n      parameterDefaultValue: number,\r\n      normalizationPosition: CubismPhysicsNormalization,\r\n      normalizationAngle: CubismPhysicsNormalization,\r\n      isInverted: boolean,\r\n      weight: number\r\n    ): void;\r\n  }\r\n\r\n  /**\r\n   * 物理演算の値の取得関数の宣言\r\n   * @param translation 移動値\r\n   * @param particles 物理点のリスト\r\n   * @param isInverted 値が反映されているか\r\n   * @param parentGravity 重力\r\n   * @return 値\r\n   */\r\n  export interface physicsValueGetter {\r\n    (\r\n      translation: CubismVector2,\r\n      particles: CubismPhysicsParticle[],\r\n      particleIndex: number,\r\n      isInverted: boolean,\r\n      parentGravity: CubismVector2\r\n    ): number;\r\n  }\r\n\r\n  /**\r\n   * 物理演算のスケールの取得関数の宣言\r\n   * @param translationScale 移動値のスケール\r\n   * @param angleScale    角度のスケール\r\n   * @return スケール値\r\n   */\r\n  export interface physicsScaleGetter {\r\n    (translationScale: CubismVector2, angleScale: number): number;\r\n  }\r\n\r\n  /**\r\n   * 物理演算の入力情報\r\n   */\r\n  export class CubismPhysicsInput {\r\n    constructor() {\r\n      this.source = new CubismPhysicsParameter();\r\n    }\r\n    source: CubismPhysicsParameter; // 入力元のパラメータ\r\n    sourceParameterIndex: number; // 入力元のパラメータのインデックス\r\n    weight: number; // 重み\r\n    type: number; // 入力の種類\r\n    reflect: boolean; // 値が反転されているかどうか\r\n    getNormalizedParameterValue: normalizedPhysicsParameterValueGetter; // 正規化されたパラメータ値の取得関数\r\n  }\r\n\r\n  /**\r\n   * @brief 物理演算の出力情報\r\n   *\r\n   * 物理演算の出力情報。\r\n   */\r\n  export class CubismPhysicsOutput {\r\n    constructor() {\r\n      this.destination = new CubismPhysicsParameter();\r\n      this.translationScale = new CubismVector2(0, 0);\r\n    }\r\n\r\n    destination: CubismPhysicsParameter; // 出力先のパラメータ\r\n    destinationParameterIndex: number; // 出力先のパラメータのインデックス\r\n    vertexIndex: number; // 振り子のインデックス\r\n    translationScale: CubismVector2; // 移動値のスケール\r\n    angleScale: number; // 角度のスケール\r\n    weight: number; // 重み\r\n    type: CubismPhysicsSource; // 出力の種類\r\n    reflect: boolean; // 値が反転されているかどうか\r\n    valueBelowMinimum: number; // 最小値を下回った時の値\r\n    valueExceededMaximum: number; // 最大値をこえた時の値\r\n    getValue: physicsValueGetter; // 物理演算の値の取得関数\r\n    getScale: physicsScaleGetter; // 物理演算のスケール値の取得関数\r\n  }\r\n\r\n  /**\r\n   * @brief 物理演算のデータ\r\n   *\r\n   * 物理演算のデータ。\r\n   */\r\n  export class CubismPhysicsRig {\r\n    constructor() {\r\n      this.settings = new csmVector<CubismPhysicsSubRig>();\r\n      this.inputs = new csmVector<CubismPhysicsInput>();\r\n      this.outputs = new csmVector<CubismPhysicsOutput>();\r\n      this.particles = new csmVector<CubismPhysicsParticle>();\r\n      this.gravity = new CubismVector2(0, 0);\r\n      this.wind = new CubismVector2(0, 0);\r\n    }\r\n\r\n    subRigCount: number; // 物理演算の物理点の個数\r\n    settings: csmVector<CubismPhysicsSubRig>; // 物理演算の物理点の管理のリスト\r\n    inputs: csmVector<CubismPhysicsInput>; // 物理演算の入力のリスト\r\n    outputs: csmVector<CubismPhysicsOutput>; // 物理演算の出力のリスト\r\n    particles: csmVector<CubismPhysicsParticle>; // 物理演算の物理点のリスト\r\n    gravity: CubismVector2; // 重力\r\n    wind: CubismVector2; // 風\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}