{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class csmVector {\n    /**\r\n     * 引数付きコンストラクタ\r\n     * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\r\n     * @param zeroClear trueなら初期化時に確保した領域を0で埋める\r\n     */\n    constructor() {\n      let initialCapacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._ptr = void 0;\n      // コンテナの先頭アドレス\n      this._size = void 0;\n      // コンテナの要素数\n      this._capacity = void 0;\n      if (initialCapacity < 1) {\n        this._ptr = [];\n        this._capacity = 0;\n        this._size = 0;\n      } else {\n        this._ptr = new Array(initialCapacity);\n        this._capacity = initialCapacity;\n        this._size = 0;\n      }\n    }\n\n    /**\r\n     * インデックスで指定した要素を返す\r\n     */\n    at(index) {\n      return this._ptr[index];\n    }\n\n    /**\r\n     * 要素をセット\r\n     * @param index 要素をセットするインデックス\r\n     * @param value セットする要素\r\n     */\n    set(index, value) {\n      this._ptr[index] = value;\n    }\n\n    /**\r\n     * コンテナを取得する\r\n     */\n    get() {\n      let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      const ret = new Array();\n      for (let i = offset; i < this._size; i++) {\n        ret.push(this._ptr[i]);\n      }\n      return ret;\n    }\n\n    /**\r\n     * pushBack処理、コンテナに新たな要素を追加する\r\n     * @param value PushBack処理で追加する値\r\n     */\n    pushBack(value) {\n      if (this._size >= this._capacity) {\n        this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);\n      }\n      this._ptr[this._size++] = value;\n    }\n\n    /**\r\n     * コンテナの全要素を解放する\r\n     */\n    clear() {\n      this._ptr.length = 0;\n      this._size = 0;\n    }\n\n    /**\r\n     * コンテナの要素数を返す\r\n     * @return コンテナの要素数\r\n     */\n    getSize() {\n      return this._size;\n    }\n\n    /**\r\n     * コンテナの全要素に対して代入処理を行う\r\n     * @param newSize 代入処理後のサイズ\r\n     * @param value 要素に代入する値\r\n     */\n    assign(newSize, value) {\n      const curSize = this._size;\n      if (curSize < newSize) {\n        this.prepareCapacity(newSize); // capacity更新\n      }\n\n      for (let i = 0; i < newSize; i++) {\n        this._ptr[i] = value;\n      }\n      this._size = newSize;\n    }\n\n    /**\r\n     * サイズ変更\r\n     */\n    resize(newSize) {\n      let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.updateSize(newSize, value, true);\n    }\n\n    /**\r\n     * サイズ変更\r\n     */\n    updateSize(newSize) {\n      let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let callPlacementNew = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const curSize = this._size;\n      if (curSize < newSize) {\n        this.prepareCapacity(newSize); // capacity更新\n\n        if (callPlacementNew) {\n          for (let i = this._size; i < newSize; i++) {\n            if (typeof value == 'function') {\n              // new\n              this._ptr[i] = JSON.parse(JSON.stringify(new value()));\n            } // プリミティブ型なので値渡し\n            else {\n              this._ptr[i] = value;\n            }\n          }\n        } else {\n          for (let i = this._size; i < newSize; i++) {\n            this._ptr[i] = value;\n          }\n        }\n      } else {\n        // newSize <= this._size\n        //---\n        const sub = this._size - newSize;\n        this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\n      }\n\n      this._size = newSize;\n    }\n\n    /**\r\n     * コンテナにコンテナ要素を挿入する\r\n     * @param position 挿入する位置\r\n     * @param begin 挿入するコンテナの開始位置\r\n     * @param end 挿入するコンテナの終端位置\r\n     */\n    insert(position, begin, end) {\n      let dstSi = position._index;\n      const srcSi = begin._index;\n      const srcEi = end._index;\n      const addCount = srcEi - srcSi;\n      this.prepareCapacity(this._size + addCount);\n\n      // 挿入用の既存データをシフトして隙間を作る\n      const addSize = this._size - dstSi;\n      if (addSize > 0) {\n        for (let i = 0; i < addSize; i++) {\n          this._ptr.splice(dstSi + i, 0, null);\n        }\n      }\n      for (let i = srcSi; i < srcEi; i++, dstSi++) {\n        this._ptr[dstSi] = begin._vector._ptr[i];\n      }\n      this._size = this._size + addCount;\n    }\n\n    /**\r\n     * コンテナからインデックスで指定した要素を削除する\r\n     * @param index インデックス値\r\n     * @return true 削除実行\r\n     * @return false 削除範囲外\r\n     */\n    remove(index) {\n      if (index < 0 || this._size <= index) {\n        return false; // 削除範囲外\n      }\n\n      this._ptr.splice(index, 1);\n      --this._size;\n      return true;\n    }\n\n    /**\r\n     * コンテナから要素を削除して他の要素をシフトする\r\n     * @param ite 削除する要素\r\n     */\n    erase(ite) {\n      const index = ite._index;\n      if (index < 0 || this._size <= index) {\n        return ite; // 削除範囲外\n      }\n\n      // 削除\n      this._ptr.splice(index, 1);\n      --this._size;\n      const ite2 = new iterator(this, index); // 終了\n      return ite2;\n    }\n\n    /**\r\n     * コンテナのキャパシティを確保する\r\n     * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\r\n     */\n    prepareCapacity(newSize) {\n      if (newSize > this._capacity) {\n        if (this._capacity == 0) {\n          this._ptr = new Array(newSize);\n          this._capacity = newSize;\n        } else {\n          this._ptr.length = newSize;\n          this._capacity = newSize;\n        }\n      }\n    }\n\n    /**\r\n     * コンテナの先頭要素を返す\r\n     */\n    begin() {\n      const ite = this._size == 0 ? this.end() : new iterator(this, 0);\n      return ite;\n    }\n\n    /**\r\n     * コンテナの終端要素を返す\r\n     */\n    end() {\n      const ite = new iterator(this, this._size);\n      return ite;\n    }\n    getOffset(offset) {\n      const newVector = new csmVector();\n      newVector._ptr = this.get(offset);\n      newVector._size = this.get(offset).length;\n      newVector._capacity = this.get(offset).length;\n      return newVector;\n    }\n\n    // コンテナ初期化のデフォルトサイズ\n  }\n  // コンテナのキャパシティ\n  csmVector.s_defaultSize = 10;\n  _Live2DCubismFramework.csmVector = csmVector;\n  class iterator {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor(v, index) {\n      this._index = void 0;\n      // コンテナのインデックス値\n      this._vector = void 0;\n      this._vector = v != undefined ? v : null;\n      this._index = index != undefined ? index : 0;\n    }\n\n    /**\r\n     * 代入\r\n     */\n    set(ite) {\n      this._index = ite._index;\n      this._vector = ite._vector;\n      return this;\n    }\n\n    /**\r\n     * 前置き++演算\r\n     */\n    preIncrement() {\n      ++this._index;\n      return this;\n    }\n\n    /**\r\n     * 前置き--演算\r\n     */\n    preDecrement() {\n      --this._index;\n      return this;\n    }\n\n    /**\r\n     * 後置き++演算子\r\n     */\n    increment() {\n      const iteold = new iterator(this._vector, this._index++);\n      this._vector = iteold._vector;\n      this._index = iteold._index;\n      return this;\n    }\n\n    /**\r\n     * 後置き--演算子\r\n     */\n    decrement() {\n      const iteold = new iterator(this._vector, this._index--); // 古い値を保存\n      this._vector = iteold._vector;\n      this._index = iteold._index;\n      return this;\n    }\n\n    /**\r\n     * ptr\r\n     */\n    ptr() {\n      return this._vector._ptr[this._index];\n    }\n\n    /**\r\n     * =演算子のオーバーロード\r\n     */\n    substitution(ite) {\n      this._index = ite._index;\n      this._vector = ite._vector;\n      return this;\n    }\n\n    /**\r\n     * !=演算子のオーバーロード\r\n     */\n    notEqual(ite) {\n      return this._index != ite._index || this._vector != ite._vector;\n    }\n\n    // コンテナ\n  }\n  _Live2DCubismFramework.iterator = iterator;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","_Live2DCubismFramework","csmVector","constructor","initialCapacity","arguments","length","undefined","_ptr","_size","_capacity","Array","at","index","set","value","get","offset","ret","i","push","pushBack","prepareCapacity","s_defaultSize","clear","getSize","assign","newSize","curSize","resize","updateSize","callPlacementNew","JSON","parse","stringify","sub","splice","insert","position","begin","end","dstSi","_index","srcSi","srcEi","addCount","addSize","_vector","remove","erase","ite","ite2","iterator","getOffset","newVector","v","preIncrement","preDecrement","increment","iteold","decrement","ptr","substitution","notEqual"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/type/csmvector.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * ベクター型（可変配列型）\r\n   */\r\n  export class csmVector<T> {\r\n    /**\r\n     * 引数付きコンストラクタ\r\n     * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\r\n     * @param zeroClear trueなら初期化時に確保した領域を0で埋める\r\n     */\r\n    constructor(initialCapacity = 0) {\r\n      if (initialCapacity < 1) {\r\n        this._ptr = [];\r\n        this._capacity = 0;\r\n        this._size = 0;\r\n      } else {\r\n        this._ptr = new Array(initialCapacity);\r\n        this._capacity = initialCapacity;\r\n        this._size = 0;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * インデックスで指定した要素を返す\r\n     */\r\n    public at(index: number): T {\r\n      return this._ptr[index];\r\n    }\r\n\r\n    /**\r\n     * 要素をセット\r\n     * @param index 要素をセットするインデックス\r\n     * @param value セットする要素\r\n     */\r\n    public set(index: number, value: T): void {\r\n      this._ptr[index] = value;\r\n    }\r\n\r\n    /**\r\n     * コンテナを取得する\r\n     */\r\n    public get(offset = 0): T[] {\r\n      const ret: T[] = new Array<T>();\r\n      for (let i = offset; i < this._size; i++) {\r\n        ret.push(this._ptr[i]);\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * pushBack処理、コンテナに新たな要素を追加する\r\n     * @param value PushBack処理で追加する値\r\n     */\r\n    public pushBack(value: T): void {\r\n      if (this._size >= this._capacity) {\r\n        this.prepareCapacity(\r\n          this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2\r\n        );\r\n      }\r\n\r\n      this._ptr[this._size++] = value;\r\n    }\r\n\r\n    /**\r\n     * コンテナの全要素を解放する\r\n     */\r\n    public clear(): void {\r\n      this._ptr.length = 0;\r\n      this._size = 0;\r\n    }\r\n\r\n    /**\r\n     * コンテナの要素数を返す\r\n     * @return コンテナの要素数\r\n     */\r\n    public getSize(): number {\r\n      return this._size;\r\n    }\r\n\r\n    /**\r\n     * コンテナの全要素に対して代入処理を行う\r\n     * @param newSize 代入処理後のサイズ\r\n     * @param value 要素に代入する値\r\n     */\r\n    public assign(newSize: number, value: T): void {\r\n      const curSize = this._size;\r\n\r\n      if (curSize < newSize) {\r\n        this.prepareCapacity(newSize); // capacity更新\r\n      }\r\n\r\n      for (let i = 0; i < newSize; i++) {\r\n        this._ptr[i] = value;\r\n      }\r\n\r\n      this._size = newSize;\r\n    }\r\n\r\n    /**\r\n     * サイズ変更\r\n     */\r\n    public resize(newSize: number, value: T = null): void {\r\n      this.updateSize(newSize, value, true);\r\n    }\r\n\r\n    /**\r\n     * サイズ変更\r\n     */\r\n    public updateSize(\r\n      newSize: number,\r\n      value: any = null,\r\n      callPlacementNew = true\r\n    ): void {\r\n      const curSize: number = this._size;\r\n\r\n      if (curSize < newSize) {\r\n        this.prepareCapacity(newSize); // capacity更新\r\n\r\n        if (callPlacementNew) {\r\n          for (let i: number = this._size; i < newSize; i++) {\r\n            if (typeof value == 'function') {\r\n              // new\r\n              this._ptr[i] = JSON.parse(JSON.stringify(new value()));\r\n            } // プリミティブ型なので値渡し\r\n            else {\r\n              this._ptr[i] = value;\r\n            }\r\n          }\r\n        } else {\r\n          for (let i: number = this._size; i < newSize; i++) {\r\n            this._ptr[i] = value;\r\n          }\r\n        }\r\n      } else {\r\n        // newSize <= this._size\r\n        //---\r\n        const sub = this._size - newSize;\r\n        this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\r\n      }\r\n      this._size = newSize;\r\n    }\r\n\r\n    /**\r\n     * コンテナにコンテナ要素を挿入する\r\n     * @param position 挿入する位置\r\n     * @param begin 挿入するコンテナの開始位置\r\n     * @param end 挿入するコンテナの終端位置\r\n     */\r\n    public insert(\r\n      position: iterator<T>,\r\n      begin: iterator<T>,\r\n      end: iterator<T>\r\n    ): void {\r\n      let dstSi: number = position._index;\r\n      const srcSi: number = begin._index;\r\n      const srcEi: number = end._index;\r\n\r\n      const addCount: number = srcEi - srcSi;\r\n\r\n      this.prepareCapacity(this._size + addCount);\r\n\r\n      // 挿入用の既存データをシフトして隙間を作る\r\n      const addSize = this._size - dstSi;\r\n      if (addSize > 0) {\r\n        for (let i = 0; i < addSize; i++) {\r\n          this._ptr.splice(dstSi + i, 0, null);\r\n        }\r\n      }\r\n\r\n      for (let i: number = srcSi; i < srcEi; i++, dstSi++) {\r\n        this._ptr[dstSi] = begin._vector._ptr[i];\r\n      }\r\n\r\n      this._size = this._size + addCount;\r\n    }\r\n\r\n    /**\r\n     * コンテナからインデックスで指定した要素を削除する\r\n     * @param index インデックス値\r\n     * @return true 削除実行\r\n     * @return false 削除範囲外\r\n     */\r\n    public remove(index: number): boolean {\r\n      if (index < 0 || this._size <= index) {\r\n        return false; // 削除範囲外\r\n      }\r\n\r\n      this._ptr.splice(index, 1);\r\n      --this._size;\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * コンテナから要素を削除して他の要素をシフトする\r\n     * @param ite 削除する要素\r\n     */\r\n    public erase(ite: iterator<T>): iterator<T> {\r\n      const index: number = ite._index;\r\n      if (index < 0 || this._size <= index) {\r\n        return ite; // 削除範囲外\r\n      }\r\n\r\n      // 削除\r\n      this._ptr.splice(index, 1);\r\n      --this._size;\r\n\r\n      const ite2: iterator<T> = new iterator<T>(this, index); // 終了\r\n      return ite2;\r\n    }\r\n\r\n    /**\r\n     * コンテナのキャパシティを確保する\r\n     * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\r\n     */\r\n    public prepareCapacity(newSize: number): void {\r\n      if (newSize > this._capacity) {\r\n        if (this._capacity == 0) {\r\n          this._ptr = new Array(newSize);\r\n          this._capacity = newSize;\r\n        } else {\r\n          this._ptr.length = newSize;\r\n          this._capacity = newSize;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンテナの先頭要素を返す\r\n     */\r\n    public begin(): iterator<T> {\r\n      const ite: iterator<T> =\r\n        this._size == 0 ? this.end() : new iterator<T>(this, 0);\r\n      return ite;\r\n    }\r\n\r\n    /**\r\n     * コンテナの終端要素を返す\r\n     */\r\n    public end(): iterator<T> {\r\n      const ite: iterator<T> = new iterator<T>(this, this._size);\r\n      return ite;\r\n    }\r\n\r\n    public getOffset(offset: number): csmVector<T> {\r\n      const newVector = new csmVector<T>();\r\n      newVector._ptr = this.get(offset);\r\n      newVector._size = this.get(offset).length;\r\n      newVector._capacity = this.get(offset).length;\r\n\r\n      return newVector;\r\n    }\r\n\r\n    _ptr: T[]; // コンテナの先頭アドレス\r\n    _size: number; // コンテナの要素数\r\n    _capacity: number; // コンテナのキャパシティ\r\n\r\n    static readonly s_defaultSize = 10; // コンテナ初期化のデフォルトサイズ\r\n  }\r\n\r\n  export class iterator<T> {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor(v?: csmVector<T>, index?: number) {\r\n      this._vector = v != undefined ? v : null;\r\n      this._index = index != undefined ? index : 0;\r\n    }\r\n\r\n    /**\r\n     * 代入\r\n     */\r\n    public set(ite: iterator<T>): iterator<T> {\r\n      this._index = ite._index;\r\n      this._vector = ite._vector;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 前置き++演算\r\n     */\r\n    public preIncrement(): iterator<T> {\r\n      ++this._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 前置き--演算\r\n     */\r\n    public preDecrement(): iterator<T> {\r\n      --this._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 後置き++演算子\r\n     */\r\n    public increment(): iterator<T> {\r\n      const iteold = new iterator<T>(this._vector, this._index++);\r\n      this._vector = iteold._vector;\r\n      this._index = iteold._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 後置き--演算子\r\n     */\r\n    public decrement(): iterator<T> {\r\n      const iteold = new iterator<T>(this._vector, this._index--); // 古い値を保存\r\n      this._vector = iteold._vector;\r\n      this._index = iteold._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * ptr\r\n     */\r\n    public ptr(): T {\r\n      return this._vector._ptr[this._index];\r\n    }\r\n\r\n    /**\r\n     * =演算子のオーバーロード\r\n     */\r\n    public substitution(ite: iterator<T>): iterator<T> {\r\n      this._index = ite._index;\r\n      this._vector = ite._vector;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * !=演算子のオーバーロード\r\n     */\r\n    public notEqual(ite: iterator<T>): boolean {\r\n      return this._index != ite._index || this._vector != ite._vector;\r\n    }\r\n\r\n    _index: number; // コンテナのインデックス値\r\n    _vector: csmVector<T>; // コンテナ\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}