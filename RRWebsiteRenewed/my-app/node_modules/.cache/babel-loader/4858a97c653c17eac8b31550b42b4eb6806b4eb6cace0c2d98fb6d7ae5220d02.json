{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as acubismmotion } from './acubismmotion';\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nvar csmString = csmstring.csmString;\nvar CubismModel = cubismmodel.CubismModel;\nvar csmVector = csmvector.csmVector;\nvar iterator = csmvector.iterator;\nvar CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\nvar ACubismMotion = acubismmotion.ACubismMotion;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismMotionQueueManager {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._userTimeSeconds = void 0;\n      // デルタ時間の積算値[秒]\n      this._motions = void 0;\n      // モーション\n      this._eventCallBack = void 0;\n      // コールバック関数\n      this._eventCustomData = void 0;\n      this._userTimeSeconds = 0.0;\n      this._eventCallBack = null;\n      this._eventCustomData = null;\n      this._motions = new csmVector();\n    }\n\n    /**\r\n     * デストラクタ\r\n     */\n    release() {\n      for (let i = 0; i < this._motions.getSize(); ++i) {\n        if (this._motions.at(i)) {\n          this._motions.at(i).release();\n          this._motions.set(i, void 0);\n          this._motions.set(i, null);\n        }\n      }\n      this._motions = null;\n    }\n\n    /**\r\n     * 指定动作的开始\r\n     *\r\n     * 开始指定的动作。如果已经有相同类型的动作，则对现有动作立结束标志，开始淡出。\r\n     *\r\n     * @param   motion              开始的动作\r\n     * @param   autoDelete          删除播放结束的动作实例 true\r\n     * @param   userTimeSeconds     增量时间的累计值[秒]\r\n     * @return                      返回开始的动作的识别号码。用于判定个别动作是否结束的IsFinished（）参数。无法开始时为“-1”\r\n     */\n    startMotion(motion, autoDelete, userTimeSeconds) {\n      var _motionData;\n      if (motion == null) {\n        return InvalidMotionQueueEntryHandleValue;\n      }\n      let motionQueueEntry = null;\n\n      //如果已经有动作的话就立结束标志\n      for (let i = 0; i < this._motions.getSize(); ++i) {\n        motionQueueEntry = this._motions.at(i);\n        if (motionQueueEntry == null) {\n          continue;\n        }\n        motionQueueEntry.startFadeout(motionQueueEntry._motion.getFadeOutTime(), userTimeSeconds); // 开始淡出并退出\n      }\n\n      motionQueueEntry = new CubismMotionQueueEntry(); // 退出时丢弃\n      motionQueueEntry._autoDelete = autoDelete;\n      motionQueueEntry._motion = motion;\n      // console.log('eventCount',motion['_motionData'])\n      // 添加超频动作拦截器，据测试，curveCount超过100的模型会导致动作异常,待修复 2020.9.11\n      if ((motion === null || motion === void 0 ? void 0 : (_motionData = motion['_motionData']) === null || _motionData === void 0 ? void 0 : _motionData['curveCount']) < 100) {\n        this._motions.pushBack(motionQueueEntry);\n      }\n      return motionQueueEntry._motionQueueEntryHandle;\n    }\n\n    /**\r\n     * 全てのモーションの終了の確認\r\n     * @return true 全て終了している\r\n     * @return false 終了していない\r\n     */\n    isFinished() {\n      // ------- 処理を行う -------\n      // 既にモーションがあれば終了フラグを立てる\n\n      for (let ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\n        let motionQueueEntry = ite.ptr();\n        if (motionQueueEntry == null) {\n          ite = this._motions.erase(ite); // 削除\n          continue;\n        }\n        const motion = motionQueueEntry._motion;\n        if (motion == null) {\n          motionQueueEntry.release();\n          motionQueueEntry = void 0;\n          motionQueueEntry = null;\n          ite = this._motions.erase(ite); // 削除\n          continue;\n        }\n\n        // ----- 終了済みの処理があれば削除する ------\n        if (!motionQueueEntry.isFinished()) {\n          return false;\n        } else {\n          ite.preIncrement();\n        }\n      }\n      return true;\n    }\n\n    /**\r\n     * 指定したモーションの終了の確認\r\n     * @param motionQueueEntryNumber モーションの識別番号\r\n     * @return true 全て終了している\r\n     * @return false 終了していない\r\n     */\n    isFinishedByHandle(motionQueueEntryNumber) {\n      // 既にモーションがあれば終了フラグを立てる\n      for (let ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {\n        const motionQueueEntry = ite.ptr();\n        if (motionQueueEntry == null) {\n          continue;\n        }\n        if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber && !motionQueueEntry.isFinished()) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\r\n     * 全てのモーションを停止する\r\n     */\n    stopAllMotions() {\n      // ------- 処理を行う -------\n      // 既にモーションがあれば終了フラグを立てる\n\n      for (let ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\n        let motionQueueEntry = ite.ptr();\n        if (motionQueueEntry == null) {\n          ite = this._motions.erase(ite);\n          continue;\n        }\n\n        // ----- 終了済みの処理があれば削除する ------\n        motionQueueEntry.release();\n        motionQueueEntry = void 0;\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n      }\n    }\n\n    /**\r\n         * 指定したCubismMotionQueueEntryの取得\r\n           * @param   motionQueueEntryNumber  モーションの識別番号\r\n         * @return  指定したCubismMotionQueueEntry\r\n         * @return  null   見つからなかった\r\n         */\n    getCubismMotionQueueEntry(motionQueueEntryNumber) {\n      //------- 処理を行う -------\n      // 既にモーションがあれば終了フラグを立てる\n      for (let ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {\n        const motionQueueEntry = ite.ptr();\n        if (motionQueueEntry == null) {\n          continue;\n        }\n        if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\n          return motionQueueEntry;\n        }\n      }\n      return null;\n    }\n\n    /**\r\n     * イベントを受け取るCallbackの登録\r\n     *\r\n     * @param callback コールバック関数\r\n     * @param customData コールバックに返されるデータ\r\n     */\n    setEventCallback(callback) {\n      let customData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this._eventCallBack = callback;\n      this._eventCustomData = customData;\n    }\n\n    /**\r\n     * モーションを更新して、モデルにパラメータ値を反映する。\r\n     *\r\n     * @param   model   対象のモデル\r\n     * @param   userTimeSeconds   デルタ時間の積算値[秒]\r\n     * @return  true    モデルへパラメータ値の反映あり\r\n     * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\r\n     */\n    doUpdateMotion(model, userTimeSeconds) {\n      let updated = false;\n\n      // ------- 処理を行う --------\n      // 既にモーションがあれば終了フラグを立てる\n\n      for (let ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\n        let motionQueueEntry = ite.ptr();\n        if (motionQueueEntry == null) {\n          ite = this._motions.erase(ite); // 削除\n          continue;\n        }\n        const motion = motionQueueEntry._motion;\n        if (motion == null) {\n          motionQueueEntry.release();\n          motionQueueEntry = void 0;\n          motionQueueEntry = null;\n          ite = this._motions.erase(ite); // 削除\n\n          continue;\n        }\n\n        // ------ 値を反映する ------\n        motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\n        updated = true;\n\n        // ------ ユーザトリガーイベントを検査する ----\n        const firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventTime() - motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());\n        for (let i = 0; i < firedList.getSize(); ++i) {\n          this._eventCallBack(this, firedList.at(i), this._eventCustomData);\n        }\n        motionQueueEntry.setLastCheckEventTime(userTimeSeconds);\n\n        // ------ 終了済みの処理があれば削除する ------\n        if (motionQueueEntry.isFinished()) {\n          motionQueueEntry.release();\n          motionQueueEntry = void 0;\n          motionQueueEntry = null;\n          ite = this._motions.erase(ite); // 削除\n        } else {\n          ite.preIncrement();\n        }\n      }\n      return updated;\n    }\n\n    // コールバックに戻されるデータ\n  }\n  _Live2DCubismFramework.CubismMotionQueueManager = CubismMotionQueueManager;\n  /**\r\n   * イベントのコールバック関数を定義\r\n   *\r\n   * イベントのコールバックに登録できる関数の型情報\r\n   * @param caller        発火したイベントを再生させたCubismMotionQueueManager\r\n   * @param eventValue    発火したイベントの文字列データ\r\n   * @param customData   コールバックに返される登録時に指定されたデータ\r\n   */\n  /**\r\n   * モーションの識別番号\r\n   *\r\n   * モーションの識別番号の定義\r\n   */\n  const InvalidMotionQueueEntryHandleValue = _Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = -1;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","acubismmotion","cubismmotionqueueentry","csmvector","cubismmodel","csmstring","csmString","CubismModel","csmVector","iterator","CubismMotionQueueEntry","ACubismMotion","_Live2DCubismFramework","CubismMotionQueueManager","constructor","_userTimeSeconds","_motions","_eventCallBack","_eventCustomData","release","i","getSize","at","set","startMotion","motion","autoDelete","userTimeSeconds","_motionData","InvalidMotionQueueEntryHandleValue","motionQueueEntry","startFadeout","_motion","getFadeOutTime","_autoDelete","pushBack","_motionQueueEntryHandle","isFinished","ite","begin","notEqual","end","ptr","erase","preIncrement","isFinishedByHandle","motionQueueEntryNumber","increment","stopAllMotions","getCubismMotionQueueEntry","setEventCallback","callback","customData","arguments","length","undefined","doUpdateMotion","model","updated","updateParameters","firedList","getFiredEvent","getLastCheckEventTime","getStartTime","setLastCheckEventTime"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/motion/cubismmotionqueuemanager.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as acubismmotion } from './acubismmotion';\r\nimport { Live2DCubismFramework as cubismmotionqueueentry } from './cubismmotionqueueentry';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { Live2DCubismFramework as cubismmodel } from '../model/cubismmodel';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport csmString = csmstring.csmString;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport csmVector = csmvector.csmVector;\r\nimport iterator = csmvector.iterator;\r\nimport CubismMotionQueueEntry = cubismmotionqueueentry.CubismMotionQueueEntry;\r\nimport ACubismMotion = acubismmotion.ACubismMotion;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * モーション再生の管理\r\n   *\r\n   * モーション再生の管理用クラス。CubismMotionモーションなどACubismMotionのサブクラスを再生するために使用する。\r\n   *\r\n   * @note 再生中に別のモーションが StartMotion()された場合は、新しいモーションに滑らかに変化し旧モーションは中断する。\r\n   *       表情用モーション、体用モーションなどを分けてモーション化した場合など、\r\n   *       複数のモーションを同時に再生させる場合は、複数のCubismMotionQueueManagerインスタンスを使用する。\r\n   */\r\n  export class CubismMotionQueueManager {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._userTimeSeconds = 0.0;\r\n      this._eventCallBack = null;\r\n      this._eventCustomData = null;\r\n      this._motions = new csmVector<CubismMotionQueueEntry>();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ\r\n     */\r\n    public release(): void {\r\n      for (let i = 0; i < this._motions.getSize(); ++i) {\r\n        if (this._motions.at(i)) {\r\n          this._motions.at(i).release();\r\n          this._motions.set(i, void 0);\r\n          this._motions.set(i, null);\r\n        }\r\n      }\r\n\r\n      this._motions = null;\r\n    }\r\n\r\n    /**\r\n     * 指定动作的开始\r\n     *\r\n     * 开始指定的动作。如果已经有相同类型的动作，则对现有动作立结束标志，开始淡出。\r\n     *\r\n     * @param   motion              开始的动作\r\n     * @param   autoDelete          删除播放结束的动作实例 true\r\n     * @param   userTimeSeconds     增量时间的累计值[秒]\r\n     * @return                      返回开始的动作的识别号码。用于判定个别动作是否结束的IsFinished（）参数。无法开始时为“-1”\r\n     */\r\n    public startMotion(\r\n      motion: ACubismMotion,\r\n      autoDelete: boolean,\r\n      userTimeSeconds: number\r\n    ): CubismMotionQueueEntryHandle {\r\n      if (motion == null) {\r\n        return InvalidMotionQueueEntryHandleValue;\r\n      }\r\n\r\n      let motionQueueEntry: CubismMotionQueueEntry = null;\r\n      \r\n      //如果已经有动作的话就立结束标志\r\n      for (let i = 0; i < this._motions.getSize(); ++i) {\r\n        motionQueueEntry = this._motions.at(i);\r\n        if (motionQueueEntry == null) {\r\n          continue;\r\n        }\r\n\r\n        motionQueueEntry.startFadeout(\r\n          motionQueueEntry._motion.getFadeOutTime(),\r\n          userTimeSeconds\r\n        ); // 开始淡出并退出\r\n      }\r\n\r\n      motionQueueEntry = new CubismMotionQueueEntry(); // 退出时丢弃\r\n      motionQueueEntry._autoDelete = autoDelete;\r\n      motionQueueEntry._motion = motion;\r\n      // console.log('eventCount',motion['_motionData'])\r\n      // 添加超频动作拦截器，据测试，curveCount超过100的模型会导致动作异常,待修复 2020.9.11\r\n      if((motion as any)?.['_motionData']?.['curveCount']<100){\r\n        this._motions.pushBack(motionQueueEntry);\r\n      }\r\n\r\n      return motionQueueEntry._motionQueueEntryHandle;\r\n    }\r\n\r\n    /**\r\n     * 全てのモーションの終了の確認\r\n     * @return true 全て終了している\r\n     * @return false 終了していない\r\n     */\r\n    public isFinished(): boolean {\r\n      // ------- 処理を行う -------\r\n      // 既にモーションがあれば終了フラグを立てる\r\n\r\n      for (\r\n        let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n        ite.notEqual(this._motions.end());\r\n\r\n      ) {\r\n        let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n        if (motionQueueEntry == null) {\r\n          ite = this._motions.erase(ite); // 削除\r\n          continue;\r\n        }\r\n\r\n        const motion: ACubismMotion = motionQueueEntry._motion;\r\n\r\n        if (motion == null) {\r\n          motionQueueEntry.release();\r\n          motionQueueEntry = void 0;\r\n          motionQueueEntry = null;\r\n          ite = this._motions.erase(ite); // 削除\r\n          continue;\r\n        }\r\n\r\n        // ----- 終了済みの処理があれば削除する ------\r\n        if (!motionQueueEntry.isFinished()) {\r\n          return false;\r\n        } else {\r\n          ite.preIncrement();\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * 指定したモーションの終了の確認\r\n     * @param motionQueueEntryNumber モーションの識別番号\r\n     * @return true 全て終了している\r\n     * @return false 終了していない\r\n     */\r\n    public isFinishedByHandle(\r\n      motionQueueEntryNumber: CubismMotionQueueEntryHandle\r\n    ): boolean {\r\n      // 既にモーションがあれば終了フラグを立てる\r\n      for (\r\n        let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n        ite.notEqual(this._motions.end());\r\n        ite.increment()\r\n      ) {\r\n        const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n        if (motionQueueEntry == null) {\r\n          continue;\r\n        }\r\n\r\n        if (\r\n          motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\r\n          !motionQueueEntry.isFinished()\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * 全てのモーションを停止する\r\n     */\r\n    public stopAllMotions(): void {\r\n      // ------- 処理を行う -------\r\n      // 既にモーションがあれば終了フラグを立てる\r\n\r\n      for (\r\n        let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n        ite.notEqual(this._motions.end());\r\n\r\n      ) {\r\n        let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n        if (motionQueueEntry == null) {\r\n          ite = this._motions.erase(ite);\r\n\r\n          continue;\r\n        }\r\n\r\n        // ----- 終了済みの処理があれば削除する ------\r\n        motionQueueEntry.release();\r\n        motionQueueEntry = void 0;\r\n        motionQueueEntry = null;\r\n        ite = this._motions.erase(ite); // 削除\r\n      }\r\n    }\r\n\r\n    /**\r\n         * 指定したCubismMotionQueueEntryの取得\r\n\r\n         * @param   motionQueueEntryNumber  モーションの識別番号\r\n         * @return  指定したCubismMotionQueueEntry\r\n         * @return  null   見つからなかった\r\n         */\r\n    public getCubismMotionQueueEntry(\r\n      motionQueueEntryNumber: any\r\n    ): CubismMotionQueueEntry {\r\n      //------- 処理を行う -------\r\n      // 既にモーションがあれば終了フラグを立てる\r\n      for (\r\n        let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n        ite.notEqual(this._motions.end());\r\n        ite.preIncrement()\r\n      ) {\r\n        const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n        if (motionQueueEntry == null) {\r\n          continue;\r\n        }\r\n\r\n        if (\r\n          motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber\r\n        ) {\r\n          return motionQueueEntry;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * イベントを受け取るCallbackの登録\r\n     *\r\n     * @param callback コールバック関数\r\n     * @param customData コールバックに返されるデータ\r\n     */\r\n    public setEventCallback(\r\n      callback: CubismMotionEventFunction,\r\n      customData: any = null\r\n    ): void {\r\n      this._eventCallBack = callback;\r\n      this._eventCustomData = customData;\r\n    }\r\n\r\n    /**\r\n     * モーションを更新して、モデルにパラメータ値を反映する。\r\n     *\r\n     * @param   model   対象のモデル\r\n     * @param   userTimeSeconds   デルタ時間の積算値[秒]\r\n     * @return  true    モデルへパラメータ値の反映あり\r\n     * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\r\n     */\r\n    public doUpdateMotion(\r\n      model: CubismModel,\r\n      userTimeSeconds: number\r\n    ): boolean {\r\n      let updated = false;\r\n\r\n      // ------- 処理を行う --------\r\n      // 既にモーションがあれば終了フラグを立てる\r\n\r\n      for (\r\n        let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\r\n        ite.notEqual(this._motions.end());\r\n\r\n      ) {\r\n        let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\r\n\r\n        if (motionQueueEntry == null) {\r\n          ite = this._motions.erase(ite); // 削除\r\n          continue;\r\n        }\r\n\r\n        const motion: ACubismMotion = motionQueueEntry._motion;\r\n\r\n        if (motion == null) {\r\n          motionQueueEntry.release();\r\n          motionQueueEntry = void 0;\r\n          motionQueueEntry = null;\r\n          ite = this._motions.erase(ite); // 削除\r\n\r\n          continue;\r\n        }\r\n\r\n        // ------ 値を反映する ------\r\n        motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\r\n        updated = true;\r\n\r\n        // ------ ユーザトリガーイベントを検査する ----\r\n        const firedList: csmVector<csmString> = motion.getFiredEvent(\r\n          motionQueueEntry.getLastCheckEventTime() -\r\n            motionQueueEntry.getStartTime(),\r\n          userTimeSeconds - motionQueueEntry.getStartTime()\r\n        );\r\n\r\n        for (let i = 0; i < firedList.getSize(); ++i) {\r\n          this._eventCallBack(this, firedList.at(i), this._eventCustomData);\r\n        }\r\n\r\n        motionQueueEntry.setLastCheckEventTime(userTimeSeconds);\r\n\r\n        // ------ 終了済みの処理があれば削除する ------\r\n        if (motionQueueEntry.isFinished()) {\r\n          motionQueueEntry.release();\r\n          motionQueueEntry = void 0;\r\n          motionQueueEntry = null;\r\n          ite = this._motions.erase(ite); // 削除\r\n        } else {\r\n          ite.preIncrement();\r\n        }\r\n      }\r\n\r\n      return updated;\r\n    }\r\n    _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n\r\n    _motions: csmVector<CubismMotionQueueEntry>; // モーション\r\n    _eventCallBack: CubismMotionEventFunction; // コールバック関数\r\n    _eventCustomData: any; // コールバックに戻されるデータ\r\n  }\r\n\r\n  /**\r\n   * イベントのコールバック関数を定義\r\n   *\r\n   * イベントのコールバックに登録できる関数の型情報\r\n   * @param caller        発火したイベントを再生させたCubismMotionQueueManager\r\n   * @param eventValue    発火したイベントの文字列データ\r\n   * @param customData   コールバックに返される登録時に指定されたデータ\r\n   */\r\n  export interface CubismMotionEventFunction {\r\n    (\r\n      caller: CubismMotionQueueManager,\r\n      eventValue: csmString,\r\n      customData: any\r\n    ): void;\r\n  }\r\n\r\n  /**\r\n   * モーションの識別番号\r\n   *\r\n   * モーションの識別番号の定義\r\n   */\r\n  export declare type CubismMotionQueueEntryHandle = any;\r\n  export const InvalidMotionQueueEntryHandleValue: CubismMotionQueueEntryHandle = -1;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}