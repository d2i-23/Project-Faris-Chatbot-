{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismBreath } from '../effect/cubismbreath';\nimport { CubismEyeBlink } from '../effect/cubismeyeblink';\nimport { CubismPose } from '../effect/cubismpose';\nimport { Constant } from '../live2dcubismframework';\nimport { CubismModelMatrix } from '../math/cubismmodelmatrix';\nimport { CubismTargetPoint } from '../math/cubismtargetpoint';\nimport { CubismExpressionMotion } from '../motion/cubismexpressionmotion';\nimport { CubismMotion } from '../motion/cubismmotion';\nimport { CubismMotionManager } from '../motion/cubismmotionmanager';\nimport { CubismPhysics } from '../physics/cubismphysics';\nimport { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\nimport { CubismMoc } from './cubismmoc';\nimport { CubismModelUserData } from './cubismmodeluserdata';\n\n/**\n * ユーザーが実際に使用するモデル\n *\n * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。\n */\nexport class CubismUserModel {\n  /**\n   * 初期化状態の取得\n   *\n   * 初期化されている状態か？\n   *\n   * @return true     初期化されている\n   * @return false    初期化されていない\n   */\n  isInitialized() {\n    return this._initialized;\n  }\n\n  /**\n   * 初期化状態の設定\n   *\n   * 初期化状態を設定する。\n   *\n   * @param v 初期化状態\n   */\n  setInitialized(v) {\n    this._initialized = v;\n  }\n\n  /**\n   * 更新状態の取得\n   *\n   * 更新されている状態か？\n   *\n   * @return true     更新されている\n   * @return false    更新されていない\n   */\n  isUpdating() {\n    return this._updating;\n  }\n\n  /**\n   * 更新状態の設定\n   *\n   * 更新状態を設定する\n   *\n   * @param v 更新状態\n   */\n  setUpdating(v) {\n    this._updating = v;\n  }\n\n  /**\n   * マウスドラッグ情報の設定\n   * @param ドラッグしているカーソルのX位置\n   * @param ドラッグしているカーソルのY位置\n   */\n  setDragging(x, y) {\n    this._dragManager.set(x, y);\n  }\n\n  /**\n   * 加速度の情報を設定する\n   * @param x X軸方向の加速度\n   * @param y Y軸方向の加速度\n   * @param z Z軸方向の加速度\n   */\n  setAcceleration(x, y, z) {\n    this._accelerationX = x;\n    this._accelerationY = y;\n    this._accelerationZ = z;\n  }\n\n  /**\n   * モデル行列を取得する\n   * @return モデル行列\n   */\n  getModelMatrix() {\n    return this._modelMatrix;\n  }\n\n  /**\n   * 不透明度の設定\n   * @param a 不透明度\n   */\n  setOpacity(a) {\n    this._opacity = a;\n  }\n\n  /**\n   * 不透明度の取得\n   * @return 不透明度\n   */\n  getOpacity() {\n    return this._opacity;\n  }\n\n  /**\n   * モデルデータを読み込む\n   *\n   * @param buffer    moc3ファイルが読み込まれているバッファ\n   */\n  loadModel(buffer) {\n    let shouldCheckMocConsistency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this._moc = CubismMoc.create(buffer, shouldCheckMocConsistency);\n    if (this._moc == null) {\n      CubismLogError('Failed to CubismMoc.create().');\n      return;\n    }\n    this._model = this._moc.createModel();\n    if (this._model == null) {\n      CubismLogError('Failed to CreateModel().');\n      return;\n    }\n    this._model.saveParameters();\n    this._modelMatrix = new CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());\n  }\n\n  /**\n   * モーションデータを読み込む\n   * @param buffer motion3.jsonファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name モーションの名前\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return モーションクラス\n   */\n\n  /**\n   * 表情データの読み込み\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name 表情の名前\n   */\n  loadExpression(buffer, size, name) {\n    return CubismExpressionMotion.create(buffer, size);\n  }\n\n  /**\n   * ポーズデータの読み込み\n   * @param buffer pose3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  loadPose(buffer, size) {\n    this._pose = CubismPose.create(buffer, size);\n  }\n\n  /**\n   * モデルに付属するユーザーデータを読み込む\n   * @param buffer userdata3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  loadUserData(buffer, size) {\n    this._modelUserData = CubismModelUserData.create(buffer, size);\n  }\n\n  /**\n   * 物理演算データの読み込み\n   * @param buffer  physics3.jsonが読み込まれているバッファ\n   * @param size    バッファのサイズ\n   */\n  loadPhysics(buffer, size) {\n    this._physics = CubismPhysics.create(buffer, size);\n  }\n\n  /**\n   * 当たり判定の取得\n   * @param drawableId 検証したいDrawableのID\n   * @param pointX X位置\n   * @param pointY Y位置\n   * @return true ヒットしている\n   * @return false ヒットしていない\n   */\n  isHit(drawableId, pointX, pointY) {\n    const drawIndex = this._model.getDrawableIndex(drawableId);\n    if (drawIndex < 0) {\n      return false; // 存在しない場合はfalse\n    }\n\n    const count = this._model.getDrawableVertexCount(drawIndex);\n    const vertices = this._model.getDrawableVertices(drawIndex);\n    let left = vertices[0];\n    let right = vertices[0];\n    let top = vertices[1];\n    let bottom = vertices[1];\n    for (let j = 1; j < count; ++j) {\n      const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\n      const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\n      if (x < left) {\n        left = x; // Min x\n      }\n\n      if (x > right) {\n        right = x; // Max x\n      }\n\n      if (y < top) {\n        top = y; // Min y\n      }\n\n      if (y > bottom) {\n        bottom = y; // Max y\n      }\n    }\n\n    const tx = this._modelMatrix.invertTransformX(pointX);\n    const ty = this._modelMatrix.invertTransformY(pointY);\n    return left <= tx && tx <= right && top <= ty && ty <= bottom;\n  }\n\n  /**\n   * モデルの取得\n   * @return モデル\n   */\n  getModel() {\n    return this._model;\n  }\n\n  /**\n   * レンダラの取得\n   * @return レンダラ\n   */\n  getRenderer() {\n    return this._renderer;\n  }\n\n  /**\n   * レンダラを作成して初期化を実行する\n   * @param maskBufferCount バッファの生成数\n   */\n  createRenderer() {\n    let maskBufferCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    if (this._renderer) {\n      this.deleteRenderer();\n    }\n    this._renderer = new CubismRenderer_WebGL();\n    this._renderer.initialize(this._model, maskBufferCount);\n  }\n\n  /**\n   * レンダラの解放\n   */\n  deleteRenderer() {\n    if (this._renderer != null) {\n      this._renderer.release();\n      this._renderer = null;\n    }\n  }\n\n  /**\n   * イベント発火時の標準処理\n   *\n   * Eventが再生処理時にあった場合の処理をする。\n   * 継承で上書きすることを想定している。\n   * 上書きしない場合はログ出力をする。\n   *\n   * @param eventValue 発火したイベントの文字列データ\n   */\n  motionEventFired(eventValue) {\n    CubismLogInfo('{0}', eventValue.s);\n  }\n\n  /**\n   * イベント用のコールバック\n   *\n   * CubismMotionQueueManagerにイベント用に登録するためのCallback。\n   * CubismUserModelの継承先のEventFiredを呼ぶ。\n   *\n   * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\n   * @param eventValue 発火したイベントの文字列データ\n   * @param customData CubismUserModelを継承したインスタンスを想定\n   */\n  static cubismDefaultMotionEventCallback(caller, eventValue, customData) {\n    const model = customData;\n    if (model != null) {\n      model.motionEventFired(eventValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this.loadMotion = (buffer, size, name, onFinishedMotionHandler) => CubismMotion.create(buffer, size, onFinishedMotionHandler);\n    this._moc = void 0;\n    // Mocデータ\n    this._model = void 0;\n    // Modelインスタンス\n    this._motionManager = void 0;\n    // モーション管理\n    this._expressionManager = void 0;\n    // 表情管理\n    this._eyeBlink = void 0;\n    // 自動まばたき\n    this._breath = void 0;\n    // 呼吸\n    this._modelMatrix = void 0;\n    // モデル行列\n    this._pose = void 0;\n    // ポーズ管理\n    this._dragManager = void 0;\n    // マウスドラッグ\n    this._physics = void 0;\n    // 物理演算\n    this._modelUserData = void 0;\n    // ユーザーデータ\n    this._initialized = void 0;\n    // 初期化されたかどうか\n    this._updating = void 0;\n    // 更新されたかどうか\n    this._opacity = void 0;\n    // 不透明度\n    this._lipsync = void 0;\n    // リップシンクするかどうか\n    this._lastLipSyncValue = void 0;\n    // 最後のリップシンクの制御地\n    this._dragX = void 0;\n    // マウスドラッグのX位置\n    this._dragY = void 0;\n    // マウスドラッグのY位置\n    this._accelerationX = void 0;\n    // X軸方向の加速度\n    this._accelerationY = void 0;\n    // Y軸方向の加速度\n    this._accelerationZ = void 0;\n    // Z軸方向の加速度\n    this._mocConsistency = void 0;\n    // MOC3一貫性検証するかどうか\n    this._debugMode = void 0;\n    // デバッグモードかどうか\n    this._renderer = void 0;\n    // 各変数初期化\n    this._moc = null;\n    this._model = null;\n    this._motionManager = null;\n    this._expressionManager = null;\n    this._eyeBlink = null;\n    this._breath = null;\n    this._modelMatrix = null;\n    this._pose = null;\n    this._dragManager = null;\n    this._physics = null;\n    this._modelUserData = null;\n    this._initialized = false;\n    this._updating = false;\n    this._opacity = 1.0;\n    this._lipsync = true;\n    this._lastLipSyncValue = 0.0;\n    this._dragX = 0.0;\n    this._dragY = 0.0;\n    this._accelerationX = 0.0;\n    this._accelerationY = 0.0;\n    this._accelerationZ = 0.0;\n    this._mocConsistency = false;\n    this._debugMode = false;\n    this._renderer = null;\n\n    // モーションマネージャーを作成\n    this._motionManager = new CubismMotionManager();\n    this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);\n\n    // 表情マネージャーを作成\n    this._expressionManager = new CubismMotionManager();\n\n    // ドラッグによるアニメーション\n    this._dragManager = new CubismTargetPoint();\n  }\n\n  /**\n   * デストラクタに相当する処理\n   */\n  release() {\n    if (this._motionManager != null) {\n      this._motionManager.release();\n      this._motionManager = null;\n    }\n    if (this._expressionManager != null) {\n      this._expressionManager.release();\n      this._expressionManager = null;\n    }\n    if (this._moc != null) {\n      this._moc.deleteModel(this._model);\n      this._moc.release();\n      this._moc = null;\n    }\n    this._modelMatrix = null;\n    CubismPose.delete(this._pose);\n    CubismEyeBlink.delete(this._eyeBlink);\n    CubismBreath.delete(this._breath);\n    this._dragManager = null;\n    CubismPhysics.delete(this._physics);\n    CubismModelUserData.delete(this._modelUserData);\n    this.deleteRenderer();\n  }\n\n  // レンダラ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismusermodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismUserModel = _Live2DCubismFramework.CubismUserModel = $.CubismUserModel;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismBreath","CubismEyeBlink","CubismPose","Constant","CubismModelMatrix","CubismTargetPoint","CubismExpressionMotion","CubismMotion","CubismMotionManager","CubismPhysics","CubismRenderer_WebGL","CubismLogError","CubismLogInfo","CubismMoc","CubismModelUserData","CubismUserModel","isInitialized","_initialized","setInitialized","v","isUpdating","_updating","setUpdating","setDragging","x","y","_dragManager","set","setAcceleration","z","_accelerationX","_accelerationY","_accelerationZ","getModelMatrix","_modelMatrix","setOpacity","a","_opacity","getOpacity","loadModel","buffer","shouldCheckMocConsistency","arguments","length","undefined","_moc","create","_model","createModel","saveParameters","getCanvasWidth","getCanvasHeight","loadExpression","size","name","loadPose","_pose","loadUserData","_modelUserData","loadPhysics","_physics","isHit","drawableId","pointX","pointY","drawIndex","getDrawableIndex","count","getDrawableVertexCount","vertices","getDrawableVertices","left","right","top","bottom","j","vertexOffset","vertexStep","tx","invertTransformX","ty","invertTransformY","getModel","getRenderer","_renderer","createRenderer","maskBufferCount","deleteRenderer","initialize","release","motionEventFired","eventValue","s","cubismDefaultMotionEventCallback","caller","customData","model","constructor","loadMotion","onFinishedMotionHandler","_motionManager","_expressionManager","_eyeBlink","_breath","_lipsync","_lastLipSyncValue","_dragX","_dragY","_mocConsistency","_debugMode","setEventCallback","deleteModel","delete","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/model/cubismusermodel.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismBreath } from '../effect/cubismbreath';\nimport { CubismEyeBlink } from '../effect/cubismeyeblink';\nimport { CubismPose } from '../effect/cubismpose';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { Constant } from '../live2dcubismframework';\nimport { CubismModelMatrix } from '../math/cubismmodelmatrix';\nimport { CubismTargetPoint } from '../math/cubismtargetpoint';\nimport { ACubismMotion, FinishedMotionCallback } from '../motion/acubismmotion';\nimport { CubismExpressionMotion } from '../motion/cubismexpressionmotion';\nimport { CubismMotion } from '../motion/cubismmotion';\nimport { CubismMotionManager } from '../motion/cubismmotionmanager';\nimport { CubismMotionQueueManager } from '../motion/cubismmotionqueuemanager';\nimport { CubismPhysics } from '../physics/cubismphysics';\nimport { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';\nimport { csmString } from '../type/csmstring';\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\nimport { CubismMoc } from './cubismmoc';\nimport { CubismModel } from './cubismmodel';\nimport { CubismModelUserData } from './cubismmodeluserdata';\n\n/**\n * ユーザーが実際に使用するモデル\n *\n * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。\n */\nexport class CubismUserModel {\n  /**\n   * 初期化状態の取得\n   *\n   * 初期化されている状態か？\n   *\n   * @return true     初期化されている\n   * @return false    初期化されていない\n   */\n  public isInitialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * 初期化状態の設定\n   *\n   * 初期化状態を設定する。\n   *\n   * @param v 初期化状態\n   */\n  public setInitialized(v: boolean): void {\n    this._initialized = v;\n  }\n\n  /**\n   * 更新状態の取得\n   *\n   * 更新されている状態か？\n   *\n   * @return true     更新されている\n   * @return false    更新されていない\n   */\n  public isUpdating(): boolean {\n    return this._updating;\n  }\n\n  /**\n   * 更新状態の設定\n   *\n   * 更新状態を設定する\n   *\n   * @param v 更新状態\n   */\n  public setUpdating(v: boolean): void {\n    this._updating = v;\n  }\n\n  /**\n   * マウスドラッグ情報の設定\n   * @param ドラッグしているカーソルのX位置\n   * @param ドラッグしているカーソルのY位置\n   */\n  public setDragging(x: number, y: number): void {\n    this._dragManager.set(x, y);\n  }\n\n  /**\n   * 加速度の情報を設定する\n   * @param x X軸方向の加速度\n   * @param y Y軸方向の加速度\n   * @param z Z軸方向の加速度\n   */\n  public setAcceleration(x: number, y: number, z: number): void {\n    this._accelerationX = x;\n    this._accelerationY = y;\n    this._accelerationZ = z;\n  }\n\n  /**\n   * モデル行列を取得する\n   * @return モデル行列\n   */\n  public getModelMatrix(): CubismModelMatrix {\n    return this._modelMatrix;\n  }\n\n  /**\n   * 不透明度の設定\n   * @param a 不透明度\n   */\n  public setOpacity(a: number): void {\n    this._opacity = a;\n  }\n\n  /**\n   * 不透明度の取得\n   * @return 不透明度\n   */\n  public getOpacity(): number {\n    return this._opacity;\n  }\n\n  /**\n   * モデルデータを読み込む\n   *\n   * @param buffer    moc3ファイルが読み込まれているバッファ\n   */\n  public loadModel(buffer: ArrayBuffer, shouldCheckMocConsistency = false) {\n    this._moc = CubismMoc.create(buffer, shouldCheckMocConsistency);\n\n    if (this._moc == null) {\n      CubismLogError('Failed to CubismMoc.create().');\n      return;\n    }\n\n    this._model = this._moc.createModel();\n    \n    if (this._model == null) {\n      CubismLogError('Failed to CreateModel().');\n      return;\n    }\n\n    this._model.saveParameters();\n    this._modelMatrix = new CubismModelMatrix(\n      this._model.getCanvasWidth(),\n      this._model.getCanvasHeight()\n    );\n  }\n\n  /**\n   * モーションデータを読み込む\n   * @param buffer motion3.jsonファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name モーションの名前\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return モーションクラス\n   */\n  public loadMotion = (\n    buffer: ArrayBuffer,\n    size: number,\n    name: string,\n    onFinishedMotionHandler?: FinishedMotionCallback\n  ) => CubismMotion.create(buffer, size, onFinishedMotionHandler);\n\n  /**\n   * 表情データの読み込み\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name 表情の名前\n   */\n  public loadExpression(\n    buffer: ArrayBuffer,\n    size: number,\n    name: string\n  ): ACubismMotion {\n    return CubismExpressionMotion.create(buffer, size);\n  }\n\n  /**\n   * ポーズデータの読み込み\n   * @param buffer pose3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public loadPose(buffer: ArrayBuffer, size: number): void {\n    this._pose = CubismPose.create(buffer, size);\n  }\n\n  /**\n   * モデルに付属するユーザーデータを読み込む\n   * @param buffer userdata3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public loadUserData(buffer: ArrayBuffer, size: number): void {\n    this._modelUserData = CubismModelUserData.create(buffer, size);\n  }\n\n  /**\n   * 物理演算データの読み込み\n   * @param buffer  physics3.jsonが読み込まれているバッファ\n   * @param size    バッファのサイズ\n   */\n  public loadPhysics(buffer: ArrayBuffer, size: number): void {\n    this._physics = CubismPhysics.create(buffer, size);\n  }\n\n  /**\n   * 当たり判定の取得\n   * @param drawableId 検証したいDrawableのID\n   * @param pointX X位置\n   * @param pointY Y位置\n   * @return true ヒットしている\n   * @return false ヒットしていない\n   */\n  public isHit(\n    drawableId: CubismIdHandle,\n    pointX: number,\n    pointY: number\n  ): boolean {\n    const drawIndex: number = this._model.getDrawableIndex(drawableId);\n\n    if (drawIndex < 0) {\n      return false; // 存在しない場合はfalse\n    }\n\n    const count: number = this._model.getDrawableVertexCount(drawIndex);\n    const vertices: Float32Array = this._model.getDrawableVertices(drawIndex);\n\n    let left: number = vertices[0];\n    let right: number = vertices[0];\n    let top: number = vertices[1];\n    let bottom: number = vertices[1];\n\n    for (let j = 1; j < count; ++j) {\n      const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\n      const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\n\n      if (x < left) {\n        left = x; // Min x\n      }\n\n      if (x > right) {\n        right = x; // Max x\n      }\n\n      if (y < top) {\n        top = y; // Min y\n      }\n\n      if (y > bottom) {\n        bottom = y; // Max y\n      }\n    }\n\n    const tx: number = this._modelMatrix.invertTransformX(pointX);\n    const ty: number = this._modelMatrix.invertTransformY(pointY);\n\n    return left <= tx && tx <= right && top <= ty && ty <= bottom;\n  }\n\n  /**\n   * モデルの取得\n   * @return モデル\n   */\n  public getModel(): CubismModel {\n    return this._model;\n  }\n\n  /**\n   * レンダラの取得\n   * @return レンダラ\n   */\n  public getRenderer(): CubismRenderer_WebGL {\n    return this._renderer;\n  }\n\n  /**\n   * レンダラを作成して初期化を実行する\n   * @param maskBufferCount バッファの生成数\n   */\n  public createRenderer(maskBufferCount = 1): void {\n    if (this._renderer) {\n      this.deleteRenderer();\n    }\n\n    this._renderer = new CubismRenderer_WebGL();\n    this._renderer.initialize(this._model, maskBufferCount);\n  }\n\n  /**\n   * レンダラの解放\n   */\n  public deleteRenderer(): void {\n    if (this._renderer != null) {\n      this._renderer.release();\n      this._renderer = null;\n    }\n  }\n\n  /**\n   * イベント発火時の標準処理\n   *\n   * Eventが再生処理時にあった場合の処理をする。\n   * 継承で上書きすることを想定している。\n   * 上書きしない場合はログ出力をする。\n   *\n   * @param eventValue 発火したイベントの文字列データ\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0}', eventValue.s);\n  }\n\n  /**\n   * イベント用のコールバック\n   *\n   * CubismMotionQueueManagerにイベント用に登録するためのCallback。\n   * CubismUserModelの継承先のEventFiredを呼ぶ。\n   *\n   * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\n   * @param eventValue 発火したイベントの文字列データ\n   * @param customData CubismUserModelを継承したインスタンスを想定\n   */\n  public static cubismDefaultMotionEventCallback(\n    caller: CubismMotionQueueManager,\n    eventValue: csmString,\n    customData: CubismUserModel\n  ): void {\n    const model: CubismUserModel = customData;\n\n    if (model != null) {\n      model.motionEventFired(eventValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    // 各変数初期化\n    this._moc = null;\n    this._model = null;\n    this._motionManager = null;\n    this._expressionManager = null;\n    this._eyeBlink = null;\n    this._breath = null;\n    this._modelMatrix = null;\n    this._pose = null;\n    this._dragManager = null;\n    this._physics = null;\n    this._modelUserData = null;\n    this._initialized = false;\n    this._updating = false;\n    this._opacity = 1.0;\n    this._lipsync = true;\n    this._lastLipSyncValue = 0.0;\n    this._dragX = 0.0;\n    this._dragY = 0.0;\n    this._accelerationX = 0.0;\n    this._accelerationY = 0.0;\n    this._accelerationZ = 0.0;\n    this._mocConsistency = false;\n    this._debugMode = false;\n    this._renderer = null;\n\n    // モーションマネージャーを作成\n    this._motionManager = new CubismMotionManager();\n    this._motionManager.setEventCallback(\n      CubismUserModel.cubismDefaultMotionEventCallback,\n      this\n    );\n\n    // 表情マネージャーを作成\n    this._expressionManager = new CubismMotionManager();\n\n    // ドラッグによるアニメーション\n    this._dragManager = new CubismTargetPoint();\n  }\n\n  /**\n   * デストラクタに相当する処理\n   */\n  public release() {\n    if (this._motionManager != null) {\n      this._motionManager.release();\n      this._motionManager = null;\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.release();\n      this._expressionManager = null;\n    }\n\n    if (this._moc != null) {\n      this._moc.deleteModel(this._model);\n      this._moc.release();\n      this._moc = null;\n    }\n\n    this._modelMatrix = null;\n\n    CubismPose.delete(this._pose);\n    CubismEyeBlink.delete(this._eyeBlink);\n    CubismBreath.delete(this._breath);\n\n    this._dragManager = null;\n\n    CubismPhysics.delete(this._physics);\n    CubismModelUserData.delete(this._modelUserData);\n\n    this.deleteRenderer();\n  }\n\n  protected _moc: CubismMoc; // Mocデータ\n  protected _model: CubismModel; // Modelインスタンス\n\n  protected _motionManager: CubismMotionManager; // モーション管理\n  protected _expressionManager: CubismMotionManager; // 表情管理\n  protected _eyeBlink: CubismEyeBlink; // 自動まばたき\n  protected _breath: CubismBreath; // 呼吸\n  protected _modelMatrix: CubismModelMatrix; // モデル行列\n  protected _pose: CubismPose; // ポーズ管理\n  protected _dragManager: CubismTargetPoint; // マウスドラッグ\n  protected _physics: CubismPhysics; // 物理演算\n  protected _modelUserData: CubismModelUserData; // ユーザーデータ\n\n  protected _initialized: boolean; // 初期化されたかどうか\n  protected _updating: boolean; // 更新されたかどうか\n  protected _opacity: number; // 不透明度\n  protected _lipsync: boolean; // リップシンクするかどうか\n  protected _lastLipSyncValue: number; // 最後のリップシンクの制御地\n  protected _dragX: number; // マウスドラッグのX位置\n  protected _dragY: number; // マウスドラッグのY位置\n  protected _accelerationX: number; // X軸方向の加速度\n  protected _accelerationY: number; // Y軸方向の加速度\n  protected _accelerationZ: number; // Z軸方向の加速度\n  protected _mocConsistency: boolean; // MOC3一貫性検証するかどうか\n  protected _debugMode: boolean; // デバッグモードかどうか\n\n  private _renderer: CubismRenderer_WebGL; // レンダラ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismusermodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismUserModel = $.CubismUserModel;\n  export type CubismUserModel = $.CubismUserModel;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}