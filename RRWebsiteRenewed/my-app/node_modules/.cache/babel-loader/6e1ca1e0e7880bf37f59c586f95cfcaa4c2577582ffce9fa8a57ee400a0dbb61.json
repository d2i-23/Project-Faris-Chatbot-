{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismmodeluserdatajson } from './cubismmodeluserdatajson';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nvar CubismFramework = cubismframework.CubismFramework;\nvar csmVector = csmvector.csmVector;\nvar csmString = csmstring.csmString;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismModelUserDataJson = cubismmodeluserdatajson.CubismModelUserDataJson;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const ArtMesh = 'ArtMesh';\n\n  /**\r\n   * ユーザーデータインターフェース\r\n   *\r\n   * Jsonから読み込んだユーザーデータを記録しておくための構造体\r\n   */\n  class CubismModelUserDataNode {\n    constructor() {\n      this.targetType = void 0;\n      // ユーザーデータターゲットタイプ\n      this.targetId = void 0;\n      // ユーザーデータターゲットのID\n      this.value = void 0;\n    } // ユーザーデータ\n  }\n  _Live2DCubismFramework.CubismModelUserDataNode = CubismModelUserDataNode;\n  class CubismModelUserData {\n    /**\r\n     * インスタンスの作成\r\n     *\r\n     * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n     * @param size      バッファのサイズ\r\n     * @return 作成されたインスタンス\r\n     */\n    static create(buffer, size) {\n      const ret = new CubismModelUserData();\n      ret.parseUserData(buffer, size);\n      return ret;\n    }\n\n    /**\r\n     * インスタンスを破棄する\r\n     *\r\n     * @param modelUserData 破棄するインスタンス\r\n     */\n    static delete(modelUserData) {\n      if (modelUserData != null) {\n        modelUserData.release();\n        modelUserData = null;\n      }\n    }\n\n    /**\r\n     * ArtMeshのユーザーデータのリストの取得\r\n     *\r\n     * @return ユーザーデータリスト\r\n     */\n    getArtMeshUserDatas() {\n      return this._artMeshUserDataNode;\n    }\n\n    /**\r\n     * userdata3.jsonのパース\r\n     *\r\n     * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n     * @param size      バッファのサイズ\r\n     */\n    parseUserData(buffer, size) {\n      let json = new CubismModelUserDataJson(buffer, size);\n      const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\n      const nodeCount = json.getUserDataCount();\n      for (let i = 0; i < nodeCount; i++) {\n        const addNode = new CubismModelUserDataNode();\n        addNode.targetId = json.getUserDataId(i);\n        addNode.targetType = CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));\n        addNode.value = new csmString(json.getUserDataValue(i));\n        this._userDataNodes.pushBack(addNode);\n        if (addNode.targetType == typeOfArtMesh) {\n          this._artMeshUserDataNode.pushBack(addNode);\n        }\n      }\n      json.release();\n      json = void 0;\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._userDataNodes = void 0;\n      // ユーザーデータ構造体配列\n      this._artMeshUserDataNode = void 0;\n      this._userDataNodes = new csmVector();\n      this._artMeshUserDataNode = new csmVector();\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     *\r\n     * ユーザーデータ構造体配列を解放する\r\n     */\n    release() {\n      for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\n        this._userDataNodes.set(i, null);\n      }\n      this._userDataNodes = null;\n    }\n\n    // 閲覧リストの保持\n  }\n  _Live2DCubismFramework.CubismModelUserData = CubismModelUserData;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismmodeluserdatajson","cubismid","csmstring","csmvector","cubismframework","CubismFramework","csmVector","csmString","CubismIdHandle","CubismModelUserDataJson","_Live2DCubismFramework","ArtMesh","CubismModelUserDataNode","constructor","targetType","targetId","value","CubismModelUserData","create","buffer","size","ret","parseUserData","delete","modelUserData","release","getArtMeshUserDatas","_artMeshUserDataNode","json","typeOfArtMesh","getIdManager","getId","nodeCount","getUserDataCount","i","addNode","getUserDataId","getUserDataTargetType","getUserDataValue","_userDataNodes","pushBack","getSize","set"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/model/cubismmodeluserdata.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismmodeluserdatajson } from './cubismmodeluserdatajson';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport csmVector = csmvector.csmVector;\r\nimport csmString = csmstring.csmString;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismModelUserDataJson = cubismmodeluserdatajson.CubismModelUserDataJson;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  const ArtMesh = 'ArtMesh';\r\n\r\n  /**\r\n   * ユーザーデータインターフェース\r\n   *\r\n   * Jsonから読み込んだユーザーデータを記録しておくための構造体\r\n   */\r\n  export class CubismModelUserDataNode {\r\n    targetType: CubismIdHandle; // ユーザーデータターゲットタイプ\r\n    targetId: CubismIdHandle; // ユーザーデータターゲットのID\r\n    value: csmString; // ユーザーデータ\r\n  }\r\n\r\n  /**\r\n   * ユーザデータの管理クラス\r\n   *\r\n   * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\r\n   */\r\n  export class CubismModelUserData {\r\n    /**\r\n     * インスタンスの作成\r\n     *\r\n     * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n     * @param size      バッファのサイズ\r\n     * @return 作成されたインスタンス\r\n     */\r\n    public static create(\r\n      buffer: ArrayBuffer,\r\n      size: number\r\n    ): CubismModelUserData {\r\n      const ret: CubismModelUserData = new CubismModelUserData();\r\n\r\n      ret.parseUserData(buffer, size);\r\n\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * インスタンスを破棄する\r\n     *\r\n     * @param modelUserData 破棄するインスタンス\r\n     */\r\n    public static delete(modelUserData: CubismModelUserData): void {\r\n      if (modelUserData != null) {\r\n        modelUserData.release();\r\n        modelUserData = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * ArtMeshのユーザーデータのリストの取得\r\n     *\r\n     * @return ユーザーデータリスト\r\n     */\r\n    public getArtMeshUserDatas(): csmVector<CubismModelUserDataNode> {\r\n      return this._artMeshUserDataNode;\r\n    }\r\n\r\n    /**\r\n     * userdata3.jsonのパース\r\n     *\r\n     * @param buffer    userdata3.jsonが読み込まれているバッファ\r\n     * @param size      バッファのサイズ\r\n     */\r\n    public parseUserData(buffer: ArrayBuffer, size: number): void {\r\n      let json: CubismModelUserDataJson = new CubismModelUserDataJson(\r\n        buffer,\r\n        size\r\n      );\r\n\r\n      const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\r\n      const nodeCount: number = json.getUserDataCount();\r\n\r\n      for (let i = 0; i < nodeCount; i++) {\r\n        const addNode: CubismModelUserDataNode = new CubismModelUserDataNode();\r\n\r\n        addNode.targetId = json.getUserDataId(i);\r\n        addNode.targetType = CubismFramework.getIdManager().getId(\r\n          json.getUserDataTargetType(i)\r\n        );\r\n        addNode.value = new csmString(json.getUserDataValue(i));\r\n        this._userDataNodes.pushBack(addNode);\r\n\r\n        if (addNode.targetType == typeOfArtMesh) {\r\n          this._artMeshUserDataNode.pushBack(addNode);\r\n        }\r\n      }\r\n\r\n      json.release();\r\n      json = void 0;\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._userDataNodes = new csmVector<CubismModelUserDataNode>();\r\n      this._artMeshUserDataNode = new csmVector<CubismModelUserDataNode>();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     *\r\n     * ユーザーデータ構造体配列を解放する\r\n     */\r\n    public release(): void {\r\n      for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\r\n        this._userDataNodes.set(i, null);\r\n      }\r\n\r\n      this._userDataNodes = null;\r\n    }\r\n\r\n    private _userDataNodes: csmVector<CubismModelUserDataNode>; // ユーザーデータ構造体配列\r\n    private _artMeshUserDataNode: csmVector<CubismModelUserDataNode>; // 閲覧リストの保持\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,qBAAqB,IAAIC,uBAAuB,QAAQ,2BAA2B;AAC5F,SAASD,qBAAqB,IAAIE,QAAQ,QAAQ,gBAAgB;AAClE,SAASF,qBAAqB,IAAIG,SAAS,QAAQ,mBAAmB;AACtE,SAASH,qBAAqB,IAAII,SAAS,QAAQ,mBAAmB;AACtE,SAASJ,qBAAqB,IAAIK,eAAe,QAAQ,0BAA0B;AAAC,IAC7EC,eAAe,GAAGD,eAAe,CAACC,eAAe;AAAA,IACjDC,SAAS,GAAGH,SAAS,CAACG,SAAS;AAAA,IAC/BC,SAAS,GAAGL,SAAS,CAACK,SAAS;AAAA,IAC/BC,cAAc,GAAGP,QAAQ,CAACO,cAAc;AAAA,IACxCC,uBAAuB,GAAGT,uBAAuB,CAACS,uBAAuB;AAEhF,WAAAV,qBAAA;AAqHC,WAAAW,sBAAA;EApHC,MAAMC,OAAO,GAAG,SAAS;;EAEzB;AACF;AACA;AACA;AACA;EACS,MAAMC,uBAAuB,CAAC;IAAAC,YAAA;MAAA,KACnCC,UAAU;MAAkB;MAAA,KAC5BC,QAAQ;MAAkB;MAAA,KAC1BC,KAAK;IAAA,EAAa;EACpB;EAACN,sBAAA,CAAAE,uBAAA,GAAAA,uBAAA;EAOM,MAAMK,mBAAmB,CAAC;IAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,OAAcC,MAAMA,CAClBC,MAAmB,EACnBC,IAAY,EACS;MACrB,MAAMC,GAAwB,GAAG,IAAIJ,mBAAmB,CAAC,CAAC;MAE1DI,GAAG,CAACC,aAAa,CAACH,MAAM,EAAEC,IAAI,CAAC;MAE/B,OAAOC,GAAG;IACZ;;IAEA;AACJ;AACA;AACA;AACA;IACI,OAAcE,MAAMA,CAACC,aAAkC,EAAQ;MAC7D,IAAIA,aAAa,IAAI,IAAI,EAAE;QACzBA,aAAa,CAACC,OAAO,CAAC,CAAC;QACvBD,aAAa,GAAG,IAAI;MACtB;IACF;;IAEA;AACJ;AACA;AACA;AACA;IACWE,mBAAmBA,CAAA,EAAuC;MAC/D,OAAO,IAAI,CAACC,oBAAoB;IAClC;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACWL,aAAaA,CAACH,MAAmB,EAAEC,IAAY,EAAQ;MAC5D,IAAIQ,IAA6B,GAAG,IAAInB,uBAAuB,CAC7DU,MAAM,EACNC,IACF,CAAC;MAED,MAAMS,aAAa,GAAGxB,eAAe,CAACyB,YAAY,CAAC,CAAC,CAACC,KAAK,CAACpB,OAAO,CAAC;MACnE,MAAMqB,SAAiB,GAAGJ,IAAI,CAACK,gBAAgB,CAAC,CAAC;MAEjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,EAAE,EAAE;QAClC,MAAMC,OAAgC,GAAG,IAAIvB,uBAAuB,CAAC,CAAC;QAEtEuB,OAAO,CAACpB,QAAQ,GAAGa,IAAI,CAACQ,aAAa,CAACF,CAAC,CAAC;QACxCC,OAAO,CAACrB,UAAU,GAAGT,eAAe,CAACyB,YAAY,CAAC,CAAC,CAACC,KAAK,CACvDH,IAAI,CAACS,qBAAqB,CAACH,CAAC,CAC9B,CAAC;QACDC,OAAO,CAACnB,KAAK,GAAG,IAAIT,SAAS,CAACqB,IAAI,CAACU,gBAAgB,CAACJ,CAAC,CAAC,CAAC;QACvD,IAAI,CAACK,cAAc,CAACC,QAAQ,CAACL,OAAO,CAAC;QAErC,IAAIA,OAAO,CAACrB,UAAU,IAAIe,aAAa,EAAE;UACvC,IAAI,CAACF,oBAAoB,CAACa,QAAQ,CAACL,OAAO,CAAC;QAC7C;MACF;MAEAP,IAAI,CAACH,OAAO,CAAC,CAAC;MACdG,IAAI,GAAG,KAAK,CAAC;IACf;;IAEA;AACJ;AACA;IACWf,WAAWA,CAAA,EAAG;MAAA,KAkBb0B,cAAc;MAAsC;MAAA,KACpDZ,oBAAoB;MAlB1B,IAAI,CAACY,cAAc,GAAG,IAAIjC,SAAS,CAA0B,CAAC;MAC9D,IAAI,CAACqB,oBAAoB,GAAG,IAAIrB,SAAS,CAA0B,CAAC;IACtE;;IAEA;AACJ;AACA;AACA;AACA;IACWmB,OAAOA,CAAA,EAAS;MACrB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACK,cAAc,CAACE,OAAO,CAAC,CAAC,EAAE,EAAEP,CAAC,EAAE;QACtD,IAAI,CAACK,cAAc,CAACG,GAAG,CAACR,CAAC,EAAE,IAAI,CAAC;MAClC;MAEA,IAAI,CAACK,cAAc,GAAG,IAAI;IAC5B;;IAGkE;EACpE;EAAC7B,sBAAA,CAAAO,mBAAA,GAAAA,mBAAA;AAAA,GApHclB,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}