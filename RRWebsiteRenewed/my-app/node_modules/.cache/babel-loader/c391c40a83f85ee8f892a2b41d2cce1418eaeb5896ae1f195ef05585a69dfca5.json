{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismBlendMode, CubismTextureColor } from '../rendering/cubismrenderer';\nimport { csmMap } from '../type/csmmap';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\n\n/**\n * SDK側から与えられたDrawableの乗算色・スクリーン色上書きフラグと\n * その色を保持する構造体\n */\nexport class DrawableColorData {\n  constructor() {\n    let isOverwritten = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new CubismTextureColor();\n    this.isOverwritten = void 0;\n    this.Color = void 0;\n    this.isOverwritten = isOverwritten;\n    this.Color = color;\n  }\n}\n/**\n * @brief テクスチャの色をRGBAで扱うための構造体\n */\nexport class PartColorData {\n  constructor() {\n    let isOverwritten = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new CubismTextureColor();\n    this.isOverwritten = void 0;\n    this.Color = void 0;\n    this.isOverwritten = isOverwritten;\n    this.Color = color;\n  }\n}\n\n/**\n * テクスチャのカリング設定を管理するための構造体\n */\nexport class DrawableCullingData {\n  /**\n   * コンストラクタ\n   *\n   * @param isOverwritten\n   * @param isCulling\n   */\n  constructor() {\n    let isOverwritten = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let isCulling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.isOverwritten = void 0;\n    this.isCulling = void 0;\n    this.isOverwritten = isOverwritten;\n    this.isCulling = isCulling;\n  }\n}\n\n/**\n * モデル\n *\n * Mocデータから生成されるモデルのクラス。\n */\nexport class CubismModel {\n  /**\n   * モデルのパラメータの更新\n   */\n  update() {\n    // Update model\n    this._model.update();\n    this._model.drawables.resetDynamicFlags();\n  }\n\n  /**\n   * PixelsPerUnitを取得する\n   * @returns PixelsPerUnit\n   */\n  getPixelsPerUnit() {\n    if (this._model == null) {\n      return 0.0;\n    }\n    return this._model.canvasinfo.PixelsPerUnit;\n  }\n\n  /**\n   * キャンバスの幅を取得する\n   */\n  getCanvasWidth() {\n    if (this._model == null) {\n      return 0.0;\n    }\n    return this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit;\n  }\n\n  /**\n   * キャンバスの高さを取得する\n   */\n  getCanvasHeight() {\n    if (this._model == null) {\n      return 0.0;\n    }\n    return this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit;\n  }\n\n  /**\n   * パラメータを保存する\n   */\n  saveParameters() {\n    const parameterCount = this._model.parameters.count;\n    const savedParameterCount = this._savedParameters.getSize();\n    for (let i = 0; i < parameterCount; ++i) {\n      if (i < savedParameterCount) {\n        this._savedParameters.set(i, this._parameterValues[i]);\n      } else {\n        this._savedParameters.pushBack(this._parameterValues[i]);\n      }\n    }\n  }\n\n  /**\n   * 乗算色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableの乗算色(RGBA)\n   */\n  getMultiplyColor(index) {\n    // Drawableとモデル全体の乗算色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\n    if (this.getOverwriteFlagForModelMultiplyColors() || this.getOverwriteFlagForDrawableMultiplyColors(index)) {\n      return this._userMultiplyColors.at(index).Color;\n    }\n    const color = this.getDrawableMultiplyColor(index);\n    return color;\n  }\n\n  /**\n   * スクリーン色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableのスクリーン色(RGBA)\n   */\n  getScreenColor(index) {\n    // Drawableとモデル全体のスクリーン色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\n    if (this.getOverwriteFlagForModelScreenColors() || this.getOverwriteFlagForDrawableScreenColors(index)) {\n      return this._userScreenColors.at(index).Color;\n    }\n    const color = this.getDrawableScreenColor(index);\n    return color;\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  setMultiplyColorByTextureColor(index, color) {\n    this.setMultiplyColorByRGBA(index, color.R, color.G, color.B, color.A);\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  setMultiplyColorByRGBA(index, r, g, b) {\n    let a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1.0;\n    this._userMultiplyColors.at(index).Color.R = r;\n    this._userMultiplyColors.at(index).Color.G = g;\n    this._userMultiplyColors.at(index).Color.B = b;\n    this._userMultiplyColors.at(index).Color.A = a;\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  setScreenColorByTextureColor(index, color) {\n    this.setScreenColorByRGBA(index, color.R, color.G, color.B, color.A);\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  setScreenColorByRGBA(index, r, g, b) {\n    let a = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1.0;\n    this._userScreenColors.at(index).Color.R = r;\n    this._userScreenColors.at(index).Color.G = g;\n    this._userScreenColors.at(index).Color.B = b;\n    this._userScreenColors.at(index).Color.A = a;\n  }\n  /**\n   * partの乗算色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartの乗算色\n   */\n  getPartMultiplyColor(partIndex) {\n    return this._userPartMultiplyColors.at(partIndex).Color;\n  }\n\n  /**\n   * partのスクリーン色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartのスクリーン色\n   */\n  getPartScreenColor(partIndex) {\n    return this._userPartScreenColors.at(partIndex).Color;\n  }\n\n  /**\n   * partのOverwriteColor setter関数\n   * @param partIndex partのインデックス\n   * @param r 設定する色のR値\n   * @param g 設定する色のG値\n   * @param b 設定する色のB値\n   * @param a 設定する色のA値\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  setPartColor(partIndex, r, g, b, a, partColors, drawableColors) {\n    partColors.at(partIndex).Color.R = r;\n    partColors.at(partIndex).Color.G = g;\n    partColors.at(partIndex).Color.B = b;\n    partColors.at(partIndex).Color.A = a;\n    if (partColors.at(partIndex).isOverwritten) {\n      for (let i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {\n        const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n        drawableColors.at(drawableIndex).Color.R = r;\n        drawableColors.at(drawableIndex).Color.G = g;\n        drawableColors.at(drawableIndex).Color.B = b;\n        drawableColors.at(drawableIndex).Color.A = a;\n      }\n    }\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  setPartMultiplyColorByTextureColor(partIndex, color) {\n    this.setPartMultiplyColorByRGBA(partIndex, color.R, color.G, color.B, color.A);\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  setPartMultiplyColorByRGBA(partIndex, r, g, b, a) {\n    this.setPartColor(partIndex, r, g, b, a, this._userPartMultiplyColors, this._userMultiplyColors);\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  setPartScreenColorByTextureColor(partIndex, color) {\n    this.setPartScreenColorByRGBA(partIndex, color.R, color.G, color.B, color.A);\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  setPartScreenColorByRGBA(partIndex, r, g, b, a) {\n    this.setPartColor(partIndex, r, g, b, a, this._userPartScreenColors, this._userScreenColors);\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForModelMultiplyColors() {\n    return this._isOverwrittenModelMultiplyColors;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForModelScreenColors() {\n    return this._isOverwrittenModelScreenColors;\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForModelMultiplyColors(value) {\n    this._isOverwrittenModelMultiplyColors = value;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForModelScreenColors(value) {\n    this._isOverwrittenModelScreenColors = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForDrawableMultiplyColors(drawableindex) {\n    return this._userMultiplyColors.at(drawableindex).isOverwritten;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForDrawableScreenColors(drawableindex) {\n    return this._userScreenColors.at(drawableindex).isOverwritten;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForDrawableMultiplyColors(drawableindex, value) {\n    this._userMultiplyColors.at(drawableindex).isOverwritten = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForDrawableScreenColors(drawableindex, value) {\n    this._userScreenColors.at(drawableindex).isOverwritten = value;\n  }\n\n  /**\n   * SDKからpartの乗算色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  getOverwriteColorForPartMultiplyColors(partIndex) {\n    return this._userPartMultiplyColors.at(partIndex).isOverwritten;\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  getOverwriteColorForPartScreenColors(partIndex) {\n    return this._userPartScreenColors.at(partIndex).isOverwritten;\n  }\n\n  /**\n   * partのOverwriteFlag setter関数\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  setOverwriteColorForPartColors(partIndex, value, partColors, drawableColors) {\n    partColors.at(partIndex).isOverwritten = value;\n    for (let i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {\n      const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n      drawableColors.at(drawableIndex).isOverwritten = value;\n      if (value) {\n        drawableColors.at(drawableIndex).Color.R = partColors.at(partIndex).Color.R;\n        drawableColors.at(drawableIndex).Color.G = partColors.at(partIndex).Color.G;\n        drawableColors.at(drawableIndex).Color.B = partColors.at(partIndex).Color.B;\n        drawableColors.at(drawableIndex).Color.A = partColors.at(partIndex).Color.A;\n      }\n    }\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteColorForPartMultiplyColors(partIndex, value) {\n    this._userPartMultiplyColors.at(partIndex).isOverwritten = value;\n    this.setOverwriteColorForPartColors(partIndex, value, this._userPartMultiplyColors, this._userMultiplyColors);\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteColorForPartScreenColors(partIndex, value) {\n    this._userPartScreenColors.at(partIndex).isOverwritten = value;\n    this.setOverwriteColorForPartColors(partIndex, value, this._userPartScreenColors, this._userScreenColors);\n  }\n\n  /**\n   * Drawableのカリング情報を取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @return  Drawableのカリング情報\n   */\n  getDrawableCulling(drawableIndex) {\n    if (this.getOverwriteFlagForModelCullings() || this.getOverwriteFlagForDrawableCullings(drawableIndex)) {\n      return this._userCullings.at(drawableIndex).isCulling;\n    }\n    const constantFlags = this._model.drawables.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\n  }\n\n  /**\n   * Drawableのカリング情報を設定する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isCulling カリング情報\n   */\n  setDrawableCulling(drawableIndex, isCulling) {\n    this._userCullings.at(drawableIndex).isCulling = isCulling;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするか。\n   *\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  getOverwriteFlagForModelCullings() {\n    return this._isOverwrittenCullings;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\n   *\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  setOverwriteFlagForModelCullings(isOverwrittenCullings) {\n    this._isOverwrittenCullings = isOverwrittenCullings;\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  getOverwriteFlagForDrawableCullings(drawableIndex) {\n    return this._userCullings.at(drawableIndex).isOverwritten;\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  setOverwriteFlagForDrawableCullings(drawableIndex, isOverwrittenCullings) {\n    this._userCullings.at(drawableIndex).isOverwritten = isOverwrittenCullings;\n  }\n\n  /**\n   * モデルの不透明度を取得する\n   *\n   * @returns 不透明度の値\n   */\n  getModelOapcity() {\n    return this._modelOpacity;\n  }\n\n  /**\n   * モデルの不透明度を設定する\n   *\n   * @param value 不透明度の値\n   */\n  setModelOapcity(value) {\n    this._modelOpacity = value;\n  }\n\n  /**\n   * モデルを取得\n   */\n  getModel() {\n    return this._model;\n  }\n\n  /**\n   * パーツのインデックスを取得\n   * @param partId パーツのID\n   * @return パーツのインデックス\n   */\n  getPartIndex(partId) {\n    let partIndex;\n    const partCount = this._model.parts.count;\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\n      if (partId == this._partIds.at(partIndex)) {\n        return partIndex;\n      }\n    }\n\n    // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\n    if (this._notExistPartId.isExist(partId)) {\n      return this._notExistPartId.getValue(partId);\n    }\n\n    // 非存在パーツIDリストにない場合、新しく要素を追加する\n    partIndex = partCount + this._notExistPartId.getSize();\n    this._notExistPartId.setValue(partId, partIndex);\n    this._notExistPartOpacities.appendKey(partIndex);\n    return partIndex;\n  }\n\n  /**\n   * パーツのIDを取得する。\n   *\n   * @param partIndex 取得するパーツのインデックス\n   * @return パーツのID\n   */\n  getPartId(partIndex) {\n    const partId = this._model.parts.ids[partIndex];\n    return CubismFramework.getIdManager().getId(partId);\n  }\n\n  /**\n   * パーツの個数の取得\n   * @return パーツの個数\n   */\n  getPartCount() {\n    const partCount = this._model.parts.count;\n    return partCount;\n  }\n\n  /**\n   * パーツの不透明度の設定(Index)\n   * @param partIndex パーツのインデックス\n   * @param opacity 不透明度\n   */\n  setPartOpacityByIndex(partIndex, opacity) {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      this._notExistPartOpacities.setValue(partIndex, opacity);\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n    this._partOpacities[partIndex] = opacity;\n  }\n\n  /**\n   * パーツの不透明度の設定(Id)\n   * @param partId パーツのID\n   * @param opacity パーツの不透明度\n   */\n  setPartOpacityById(partId, opacity) {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index = this.getPartIndex(partId);\n    if (index < 0) {\n      return; // パーツがないのでスキップ\n    }\n\n    this.setPartOpacityByIndex(index, opacity);\n  }\n\n  /**\n   * パーツの不透明度の取得(index)\n   * @param partIndex パーツのインデックス\n   * @return パーツの不透明度\n   */\n  getPartOpacityByIndex(partIndex) {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\n      return this._notExistPartOpacities.getValue(partIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n    return this._partOpacities[partIndex];\n  }\n\n  /**\n   * パーツの不透明度の取得(id)\n   * @param partId パーツのＩｄ\n   * @return パーツの不透明度\n   */\n  getPartOpacityById(partId) {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index = this.getPartIndex(partId);\n    if (index < 0) {\n      return 0; // パーツが無いのでスキップ\n    }\n\n    return this.getPartOpacityByIndex(index);\n  }\n\n  /**\n   * パラメータのインデックスの取得\n   * @param パラメータID\n   * @return パラメータのインデックス\n   */\n  getParameterIndex(parameterId) {\n    let parameterIndex;\n    const idCount = this._model.parameters.count;\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n      if (parameterId != this._parameterIds.at(parameterIndex)) {\n        continue;\n      }\n      return parameterIndex;\n    }\n\n    // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\n    if (this._notExistParameterId.isExist(parameterId)) {\n      return this._notExistParameterId.getValue(parameterId);\n    }\n\n    // 非存在パラメータIDリストにない場合新しく要素を追加する\n    parameterIndex = this._model.parameters.count + this._notExistParameterId.getSize();\n    this._notExistParameterId.setValue(parameterId, parameterIndex);\n    this._notExistParameterValues.appendKey(parameterIndex);\n    return parameterIndex;\n  }\n\n  /**\n   * パラメータの個数の取得\n   * @return パラメータの個数\n   */\n  getParameterCount() {\n    return this._model.parameters.count;\n  }\n\n  /**\n   * パラメータの種類の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return csmParameterType_Normal -> 通常のパラメータ\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\n   */\n  getParameterType(parameterIndex) {\n    return this._model.parameters.types[parameterIndex];\n  }\n\n  /**\n   * パラメータの最大値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最大値\n   */\n  getParameterMaximumValue(parameterIndex) {\n    return this._model.parameters.maximumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの最小値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最小値\n   */\n  getParameterMinimumValue(parameterIndex) {\n    return this._model.parameters.minimumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータのデフォルト値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータのデフォルト値\n   */\n  getParameterDefaultValue(parameterIndex) {\n    return this._model.parameters.defaultValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterIndex    パラメータのインデックス\n   * @return パラメータの値\n   */\n  getParameterValueByIndex(parameterIndex) {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return this._notExistParameterValues.getValue(parameterIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n    return this._parameterValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterId    パラメータのID\n   * @return パラメータの値\n   */\n  getParameterValueById(parameterId) {\n    // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const parameterIndex = this.getParameterIndex(parameterId);\n    return this.getParameterValueByIndex(parameterIndex);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterIndex パラメータのインデックス\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  setParameterValueByIndex(parameterIndex, value) {\n    let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      this._notExistParameterValues.setValue(parameterIndex, weight == 1 ? value : this._notExistParameterValues.getValue(parameterIndex) * (1 - weight) + value * weight);\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\n      value = this._model.parameters.maximumValues[parameterIndex];\n    }\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\n      value = this._model.parameters.minimumValues[parameterIndex];\n    }\n    this._parameterValues[parameterIndex] = weight == 1 ? value : this._parameterValues[parameterIndex] = this._parameterValues[parameterIndex] * (1 - weight) + value * weight;\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterId パラメータのID\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  setParameterValueById(parameterId, value) {\n    let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    const index = this.getParameterIndex(parameterId);\n    this.setParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の加算(index)\n   * @param parameterIndex パラメータインデックス\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  addParameterValueByIndex(parameterIndex, value) {\n    let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\n  }\n\n  /**\n   * パラメータの値の加算(id)\n   * @param parameterId パラメータＩＤ\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  addParameterValueById(parameterId, value) {\n    let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    const index = this.getParameterIndex(parameterId);\n    this.addParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterId パラメータのID\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  multiplyParameterValueById(parameterId, value) {\n    let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    const index = this.getParameterIndex(parameterId);\n    this.multiplyParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterIndex パラメータのインデックス\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  multiplyParameterValueByIndex(parameterIndex, value) {\n    let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n    this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) * (1.0 + (value - 1.0) * weight));\n  }\n\n  /**\n   * Drawableのインデックスの取得\n   * @param drawableId DrawableのID\n   * @return Drawableのインデックス\n   */\n  getDrawableIndex(drawableId) {\n    const drawableCount = this._model.drawables.count;\n    for (let drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\n      if (this._drawableIds.at(drawableIndex) == drawableId) {\n        return drawableIndex;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Drawableの個数の取得\n   * @return drawableの個数\n   */\n  getDrawableCount() {\n    const drawableCount = this._model.drawables.count;\n    return drawableCount;\n  }\n\n  /**\n   * DrawableのIDを取得する\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのID\n   */\n  getDrawableId(drawableIndex) {\n    const parameterIds = this._model.drawables.ids;\n    return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\n  }\n\n  /**\n   * Drawableの描画順リストの取得\n   * @return Drawableの描画順リスト\n   */\n  getDrawableRenderOrders() {\n    const renderOrders = this._model.drawables.renderOrders;\n    return renderOrders;\n  }\n\n  /**\n   * @deprecated\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\n   *\n   * Drawableのテクスチャインデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックスリスト\n   */\n  getDrawableTextureIndices(drawableIndex) {\n    return this.getDrawableTextureIndex(drawableIndex);\n  }\n\n  /**\n   * Drawableのテクスチャインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックス\n   */\n  getDrawableTextureIndex(drawableIndex) {\n    const textureIndices = this._model.drawables.textureIndices;\n    return textureIndices[drawableIndex];\n  }\n\n  /**\n   * DrawableのVertexPositionsの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\n   * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\n   */\n  getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * Drawableの頂点インデックスの個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスの個数\n   */\n  getDrawableVertexIndexCount(drawableIndex) {\n    const indexCounts = this._model.drawables.indexCounts;\n    return indexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点の個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点の個数\n   */\n  getDrawableVertexCount(drawableIndex) {\n    const vertexCounts = this._model.drawables.vertexCounts;\n    return vertexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  getDrawableVertices(drawableIndex) {\n    return this.getDrawableVertexPositions(drawableIndex);\n  }\n\n  /**\n   * Drawableの頂点インデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスリスト\n   */\n  getDrawableVertexIndices(drawableIndex) {\n    const indicesArray = this._model.drawables.indices;\n    return indicesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  getDrawableVertexPositions(drawableIndex) {\n    const verticesArray = this._model.drawables.vertexPositions;\n    return verticesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点のUVリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点UVリスト\n   */\n  getDrawableVertexUvs(drawableIndex) {\n    const uvsArray = this._model.drawables.vertexUvs;\n    return uvsArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの不透明度の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの不透明度\n   */\n  getDrawableOpacity(drawableIndex) {\n    const opacities = this._model.drawables.opacities;\n    return opacities[drawableIndex];\n  }\n\n  /**\n   * Drawableの乗算色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの乗算色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  getDrawableMultiplyColor(drawableIndex) {\n    const multiplyColors = this._model.drawables.multiplyColors;\n    const index = drawableIndex * 4;\n    const multiplyColor = new CubismTextureColor();\n    multiplyColor.R = multiplyColors[index];\n    multiplyColor.G = multiplyColors[index + 1];\n    multiplyColor.B = multiplyColors[index + 2];\n    multiplyColor.A = multiplyColors[index + 3];\n    return multiplyColor;\n  }\n\n  /**\n   * Drawableのスクリーン色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのスクリーン色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  getDrawableScreenColor(drawableIndex) {\n    const screenColors = this._model.drawables.screenColors;\n    const index = drawableIndex * 4;\n    const screenColor = new CubismTextureColor();\n    screenColor.R = screenColors[index];\n    screenColor.G = screenColors[index + 1];\n    screenColor.B = screenColors[index + 2];\n    screenColor.A = screenColors[index + 3];\n    return screenColor;\n  }\n\n  /**\n   * Drawableの親パーツのインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの親パーツのインデックス\n   */\n  getDrawableParentPartIndex(drawableIndex) {\n    return this._model.drawables.parentPartIndices[drawableIndex];\n    //? \n  }\n\n  /**\n   * Drawableのブレンドモードを取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのブレンドモード\n   */\n  getDrawableBlendMode(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Additive : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Multiplicative : CubismBlendMode.CubismBlendMode_Normal;\n  }\n\n  /**\n   * Drawableのマスクの反転使用の取得\n   *\n   * Drawableのマスク使用時の反転設定を取得する。\n   * マスクを使用しない場合は無視される。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableの反転設定\n   */\n  getDrawableInvertedMaskBit(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\n  }\n\n  /**\n   * Drawableのクリッピングマスクリストの取得\n   * @return Drawableのクリッピングマスクリスト\n   */\n  getDrawableMasks() {\n    const masks = this._model.drawables.masks;\n    return masks;\n  }\n\n  /**\n   * Drawableのクリッピングマスクの個数リストの取得\n   * @return Drawableのクリッピングマスクの個数リスト\n   */\n  getDrawableMaskCounts() {\n    const maskCounts = this._model.drawables.maskCounts;\n    return maskCounts;\n  }\n\n  /**\n   * クリッピングマスクの使用状態\n   *\n   * @return true クリッピングマスクを使用している\n   * @return false クリッピングマスクを使用していない\n   */\n  isUsingMasking() {\n    for (let d = 0; d < this._model.drawables.count; ++d) {\n      if (this._model.drawables.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Drawableの表示情報を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableが表示\n   * @return false Drawableが非表示\n   */\n  getDrawableDynamicFlagIsVisible(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * DrawableのDrawOrderの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\n   * drawOrderはartMesh上で指定する0から1000の情報\n   * @param drawableIndex drawableのインデックス\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\n   */\n  getDrawableDynamicFlagVisibilityDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * Drawableの不透明度の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\n   *\n   * @param drawableIndex drawableのインデックス\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\n   */\n  getDrawableDynamicFlagOpacityDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * Drawableの描画順序の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\n   */\n  getDrawableDynamicFlagRenderOrderDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * Drawableの乗算色・スクリーン色の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\n   */\n  getDrawableDynamicFlagBlendColorDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * 保存されたパラメータの読み込み\n   */\n  loadParameters() {\n    let parameterCount = this._model.parameters.count;\n    const savedParameterCount = this._savedParameters.getSize();\n    if (parameterCount > savedParameterCount) {\n      parameterCount = savedParameterCount;\n    }\n    for (let i = 0; i < parameterCount; ++i) {\n      this._parameterValues[i] = this._savedParameters.at(i);\n    }\n  }\n\n  /**\n   * 初期化する\n   */\n  initialize() {\n    CSM_ASSERT(this._model);\n    console.log('you suck mean');\n    this._parameterValues = this._model.parameters.values;\n    this._partOpacities = this._model.parts.opacities;\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\n    {\n      const parameterIds = this._model.parameters.ids;\n      const parameterCount = this._model.parameters.count;\n      this._parameterIds.prepareCapacity(parameterCount);\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterIds.pushBack(CubismFramework.getIdManager().getId(parameterIds[i]));\n      }\n    }\n    const partCount = this._model.parts.count;\n    {\n      const partIds = this._model.parts.ids;\n      this._partIds.prepareCapacity(partCount);\n      for (let i = 0; i < partCount; ++i) {\n        this._partIds.pushBack(CubismFramework.getIdManager().getId(partIds[i]));\n      }\n      this._userPartMultiplyColors.prepareCapacity(partCount);\n      this._userPartScreenColors.prepareCapacity(partCount);\n      this._partChildDrawables.prepareCapacity(partCount);\n    }\n    {\n      const drawableIds = this._model.drawables.ids;\n      const drawableCount = this._model.drawables.count;\n      this._userMultiplyColors.prepareCapacity(drawableCount);\n      this._userScreenColors.prepareCapacity(drawableCount);\n\n      // カリング設定\n      this._userCullings.prepareCapacity(drawableCount);\n      const userCulling = new DrawableCullingData(false, false);\n\n      // Part\n      {\n        for (let i = 0; i < partCount; ++i) {\n          const multiplyColor = new CubismTextureColor(1.0, 1.0, 1.0, 1.0);\n          const screenColor = new CubismTextureColor(0.0, 0.0, 0.0, 1.0);\n          const userMultiplyColor = new PartColorData(false, multiplyColor);\n          const userScreenColor = new PartColorData(false, screenColor);\n          this._userPartMultiplyColors.pushBack(userMultiplyColor);\n          this._userPartScreenColors.pushBack(userScreenColor);\n          this._partChildDrawables.pushBack(new csmVector());\n          this._partChildDrawables.at(i).prepareCapacity(drawableCount);\n        }\n      }\n\n      // Drawables\n      {\n        for (let i = 0; i < drawableCount; ++i) {\n          const multiplyColor = new CubismTextureColor(1.0, 1.0, 1.0, 1.0);\n          const screenColor = new CubismTextureColor(0.0, 0.0, 0.0, 1.0);\n          const userMultiplyColor = new DrawableColorData(false, multiplyColor);\n          const userScreenColor = new DrawableColorData(false, screenColor);\n          this._drawableIds.pushBack(CubismFramework.getIdManager().getId(drawableIds[i]));\n          this._userMultiplyColors.pushBack(userMultiplyColor);\n          this._userScreenColors.pushBack(userScreenColor);\n          this._userCullings.pushBack(userCulling);\n          console.log(0);\n          const parentIndex = this.getDrawableParentPartIndex(i);\n          if (parentIndex >= 0) {\n            this._partChildDrawables.at(parentIndex).pushBack(i);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param model モデル\n   */\n  constructor(model) {\n    this._notExistPartOpacities = void 0;\n    // 存在していないパーツの不透明度のリスト\n    this._notExistPartId = void 0;\n    // 存在していないパーツIDのリスト\n    this._notExistParameterValues = void 0;\n    // 存在していないパラメータの値のリスト\n    this._notExistParameterId = void 0;\n    // 存在していないパラメータIDのリスト\n    this._savedParameters = void 0;\n    // 保存されたパラメータ\n    this._isOverwrittenModelMultiplyColors = void 0;\n    // SDK上でモデル全体の乗算色を上書きするか判定するフラグ\n    this._isOverwrittenModelScreenColors = void 0;\n    // SDK上でモデル全体のスクリーン色を上書きするか判定するフラグ\n    this._userMultiplyColors = void 0;\n    // Drawableごとに設定する乗算色と上書きフラグを管理するリスト\n    this._userScreenColors = void 0;\n    // Drawableごとに設定するスクリーン色と上書きフラグを管理するリスト\n    this._userPartScreenColors = void 0;\n    // Part 乗算色の配列\n    this._userPartMultiplyColors = void 0;\n    // Part スクリーン色の配列\n    this._partChildDrawables = void 0;\n    // Partの子DrawableIndexの配列\n    this._model = void 0;\n    // モデル\n    this._parameterValues = void 0;\n    // パラメータの値のリスト\n    this._parameterMaximumValues = void 0;\n    // パラメータの最大値のリスト\n    this._parameterMinimumValues = void 0;\n    // パラメータの最小値のリスト\n    this._partOpacities = void 0;\n    // パーツの不透明度のリスト\n    this._modelOpacity = void 0;\n    // モデルの不透明度\n    this._parameterIds = void 0;\n    this._partIds = void 0;\n    this._drawableIds = void 0;\n    this._isOverwrittenCullings = void 0;\n    // モデルのカリング設定をすべて上書きするか？\n    this._userCullings = void 0;\n    this._model = model;\n    this._parameterValues = null;\n    this._parameterMaximumValues = null;\n    this._parameterMinimumValues = null;\n    this._partOpacities = null;\n    this._savedParameters = new csmVector();\n    this._parameterIds = new csmVector();\n    this._drawableIds = new csmVector();\n    this._partIds = new csmVector();\n    this._isOverwrittenModelMultiplyColors = false;\n    this._isOverwrittenModelScreenColors = false;\n    this._isOverwrittenCullings = false;\n    this._modelOpacity = 1.0;\n    this._userMultiplyColors = new csmVector();\n    this._userScreenColors = new csmVector();\n    this._userCullings = new csmVector();\n    this._userPartMultiplyColors = new csmVector();\n    this._userPartScreenColors = new csmVector();\n    this._partChildDrawables = new csmVector();\n    this._notExistPartId = new csmMap();\n    this._notExistParameterId = new csmMap();\n    this._notExistParameterValues = new csmMap();\n    this._notExistPartOpacities = new csmMap();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._model.release();\n    this._model = null;\n  }\n\n  // カリング設定の配列\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismModel = _Live2DCubismFramework.CubismModel = $.CubismModel;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismFramework","CubismBlendMode","CubismTextureColor","csmMap","csmVector","CSM_ASSERT","DrawableColorData","constructor","isOverwritten","arguments","length","undefined","color","Color","PartColorData","DrawableCullingData","isCulling","CubismModel","update","_model","drawables","resetDynamicFlags","getPixelsPerUnit","canvasinfo","PixelsPerUnit","getCanvasWidth","CanvasWidth","getCanvasHeight","CanvasHeight","saveParameters","parameterCount","parameters","count","savedParameterCount","_savedParameters","getSize","i","set","_parameterValues","pushBack","getMultiplyColor","index","getOverwriteFlagForModelMultiplyColors","getOverwriteFlagForDrawableMultiplyColors","_userMultiplyColors","at","getDrawableMultiplyColor","getScreenColor","getOverwriteFlagForModelScreenColors","getOverwriteFlagForDrawableScreenColors","_userScreenColors","getDrawableScreenColor","setMultiplyColorByTextureColor","setMultiplyColorByRGBA","R","G","B","A","r","g","b","a","setScreenColorByTextureColor","setScreenColorByRGBA","getPartMultiplyColor","partIndex","_userPartMultiplyColors","getPartScreenColor","_userPartScreenColors","setPartColor","partColors","drawableColors","_partChildDrawables","drawableIndex","setPartMultiplyColorByTextureColor","setPartMultiplyColorByRGBA","setPartScreenColorByTextureColor","setPartScreenColorByRGBA","_isOverwrittenModelMultiplyColors","_isOverwrittenModelScreenColors","setOverwriteFlagForModelMultiplyColors","value","setOverwriteFlagForModelScreenColors","drawableindex","setOverwriteFlagForDrawableMultiplyColors","setOverwriteFlagForDrawableScreenColors","getOverwriteColorForPartMultiplyColors","getOverwriteColorForPartScreenColors","setOverwriteColorForPartColors","setOverwriteColorForPartMultiplyColors","setOverwriteColorForPartScreenColors","getDrawableCulling","getOverwriteFlagForModelCullings","getOverwriteFlagForDrawableCullings","_userCullings","constantFlags","Live2DCubismCore","Utils","hasIsDoubleSidedBit","setDrawableCulling","_isOverwrittenCullings","setOverwriteFlagForModelCullings","isOverwrittenCullings","setOverwriteFlagForDrawableCullings","getModelOapcity","_modelOpacity","setModelOapcity","getModel","getPartIndex","partId","partCount","parts","_partIds","_notExistPartId","isExist","getValue","setValue","_notExistPartOpacities","appendKey","getPartId","ids","getIdManager","getId","getPartCount","setPartOpacityByIndex","opacity","_partOpacities","setPartOpacityById","getPartOpacityByIndex","getPartOpacityById","getParameterIndex","parameterId","parameterIndex","idCount","_parameterIds","_notExistParameterId","_notExistParameterValues","getParameterCount","getParameterType","types","getParameterMaximumValue","maximumValues","getParameterMinimumValue","minimumValues","getParameterDefaultValue","defaultValues","getParameterValueByIndex","getParameterValueById","setParameterValueByIndex","weight","setParameterValueById","addParameterValueByIndex","addParameterValueById","multiplyParameterValueById","multiplyParameterValueByIndex","getDrawableIndex","drawableId","drawableCount","_drawableIds","getDrawableCount","getDrawableId","parameterIds","getDrawableRenderOrders","renderOrders","getDrawableTextureIndices","getDrawableTextureIndex","textureIndices","getDrawableDynamicFlagVertexPositionsDidChange","dynamicFlags","hasVertexPositionsDidChangeBit","getDrawableVertexIndexCount","indexCounts","getDrawableVertexCount","vertexCounts","getDrawableVertices","getDrawableVertexPositions","getDrawableVertexIndices","indicesArray","indices","verticesArray","vertexPositions","getDrawableVertexUvs","uvsArray","vertexUvs","getDrawableOpacity","opacities","multiplyColors","multiplyColor","screenColors","screenColor","getDrawableParentPartIndex","parentPartIndices","getDrawableBlendMode","hasBlendAdditiveBit","CubismBlendMode_Additive","hasBlendMultiplicativeBit","CubismBlendMode_Multiplicative","CubismBlendMode_Normal","getDrawableInvertedMaskBit","hasIsInvertedMaskBit","getDrawableMasks","masks","getDrawableMaskCounts","maskCounts","isUsingMasking","d","getDrawableDynamicFlagIsVisible","hasIsVisibleBit","getDrawableDynamicFlagVisibilityDidChange","hasVisibilityDidChangeBit","getDrawableDynamicFlagOpacityDidChange","hasOpacityDidChangeBit","getDrawableDynamicFlagRenderOrderDidChange","hasRenderOrderDidChangeBit","getDrawableDynamicFlagBlendColorDidChange","hasBlendColorDidChangeBit","loadParameters","initialize","console","log","values","_parameterMaximumValues","_parameterMinimumValues","prepareCapacity","partIds","drawableIds","userCulling","userMultiplyColor","userScreenColor","parentIndex","model","release","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/model/cubismmodel.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport {\n  CubismBlendMode,\n  CubismTextureColor,\n} from '../rendering/cubismrenderer';\nimport { csmMap } from '../type/csmmap';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\n\n/**\n * SDK側から与えられたDrawableの乗算色・スクリーン色上書きフラグと\n * その色を保持する構造体\n */\nexport class DrawableColorData {\n  constructor(\n    isOverwritten = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverwritten = isOverwritten;\n    this.Color = color;\n  }\n\n  public isOverwritten: boolean;\n  public Color: CubismTextureColor;\n}\n/**\n * @brief テクスチャの色をRGBAで扱うための構造体\n */\nexport class PartColorData {\n  constructor(\n    isOverwritten = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverwritten = isOverwritten;\n    this.Color = color;\n  }\n\n  public isOverwritten: boolean;\n  public Color: CubismTextureColor;\n}\n\n/**\n * テクスチャのカリング設定を管理するための構造体\n */\nexport class DrawableCullingData {\n  /**\n   * コンストラクタ\n   *\n   * @param isOverwritten\n   * @param isCulling\n   */\n  public constructor(isOverwritten = false, isCulling = false) {\n    this.isOverwritten = isOverwritten;\n    this.isCulling = isCulling;\n  }\n\n  public isOverwritten: boolean;\n  public isCulling: boolean;\n}\n\n/**\n * モデル\n *\n * Mocデータから生成されるモデルのクラス。\n */\nexport class CubismModel {\n  /**\n   * モデルのパラメータの更新\n   */\n  public update(): void {\n    // Update model\n    this._model.update();\n\n    this._model.drawables.resetDynamicFlags();\n  }\n\n  /**\n   * PixelsPerUnitを取得する\n   * @returns PixelsPerUnit\n   */\n  public getPixelsPerUnit(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return this._model.canvasinfo.PixelsPerUnit;\n  }\n\n  /**\n   * キャンバスの幅を取得する\n   */\n  public getCanvasWidth(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return (\n      this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit\n    );\n  }\n\n  /**\n   * キャンバスの高さを取得する\n   */\n  public getCanvasHeight(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return (\n      this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit\n    );\n  }\n\n  /**\n   * パラメータを保存する\n   */\n  public saveParameters(): void {\n    const parameterCount: number = this._model.parameters.count;\n    const savedParameterCount: number = this._savedParameters.getSize();\n\n    for (let i = 0; i < parameterCount; ++i) {\n      if (i < savedParameterCount) {\n        this._savedParameters.set(i, this._parameterValues[i]);\n      } else {\n        this._savedParameters.pushBack(this._parameterValues[i]);\n      }\n    }\n  }\n\n  /**\n   * 乗算色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableの乗算色(RGBA)\n   */\n  public getMultiplyColor(index: number): CubismTextureColor {\n    // Drawableとモデル全体の乗算色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\n    if (\n      this.getOverwriteFlagForModelMultiplyColors() ||\n      this.getOverwriteFlagForDrawableMultiplyColors(index)\n    ) {\n      return this._userMultiplyColors.at(index).Color;\n    }\n\n    const color = this.getDrawableMultiplyColor(index);\n    return color;\n  }\n\n  /**\n   * スクリーン色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableのスクリーン色(RGBA)\n   */\n  public getScreenColor(index: number): CubismTextureColor {\n    // Drawableとモデル全体のスクリーン色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\n    if (\n      this.getOverwriteFlagForModelScreenColors() ||\n      this.getOverwriteFlagForDrawableScreenColors(index)\n    ) {\n      return this._userScreenColors.at(index).Color;\n    }\n\n    const color = this.getDrawableScreenColor(index);\n    return color;\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setMultiplyColorByTextureColor(\n    index: number,\n    color: CubismTextureColor\n  ) {\n    this.setMultiplyColorByRGBA(index, color.R, color.G, color.B, color.A);\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setMultiplyColorByRGBA(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userMultiplyColors.at(index).Color.R = r;\n    this._userMultiplyColors.at(index).Color.G = g;\n    this._userMultiplyColors.at(index).Color.B = b;\n    this._userMultiplyColors.at(index).Color.A = a;\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setScreenColorByTextureColor(\n    index: number,\n    color: CubismTextureColor\n  ) {\n    this.setScreenColorByRGBA(index, color.R, color.G, color.B, color.A);\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setScreenColorByRGBA(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userScreenColors.at(index).Color.R = r;\n    this._userScreenColors.at(index).Color.G = g;\n    this._userScreenColors.at(index).Color.B = b;\n    this._userScreenColors.at(index).Color.A = a;\n  }\n  /**\n   * partの乗算色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartの乗算色\n   */\n  public getPartMultiplyColor(partIndex: number): CubismTextureColor {\n    return this._userPartMultiplyColors.at(partIndex).Color;\n  }\n\n  /**\n   * partのスクリーン色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartのスクリーン色\n   */\n  public getPartScreenColor(partIndex: number): CubismTextureColor {\n    return this._userPartScreenColors.at(partIndex).Color;\n  }\n\n  /**\n   * partのOverwriteColor setter関数\n   * @param partIndex partのインデックス\n   * @param r 設定する色のR値\n   * @param g 設定する色のG値\n   * @param b 設定する色のB値\n   * @param a 設定する色のA値\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setPartColor(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number,\n    partColors: csmVector<PartColorData>,\n    drawableColors: csmVector<DrawableColorData>\n  ) {\n    partColors.at(partIndex).Color.R = r;\n    partColors.at(partIndex).Color.G = g;\n    partColors.at(partIndex).Color.B = b;\n    partColors.at(partIndex).Color.A = a;\n\n    if (partColors.at(partIndex).isOverwritten) {\n      for (\n        let i = 0;\n        i < this._partChildDrawables.at(partIndex).getSize();\n        ++i\n      ) {\n        const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n        drawableColors.at(drawableIndex).Color.R = r;\n        drawableColors.at(drawableIndex).Color.G = g;\n        drawableColors.at(drawableIndex).Color.B = b;\n        drawableColors.at(drawableIndex).Color.A = a;\n      }\n    }\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setPartMultiplyColorByTextureColor(\n    partIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setPartMultiplyColorByRGBA(\n      partIndex,\n      color.R,\n      color.G,\n      color.B,\n      color.A\n    );\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setPartMultiplyColorByRGBA(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartMultiplyColors,\n      this._userMultiplyColors\n    );\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setPartScreenColorByTextureColor(\n    partIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setPartScreenColorByRGBA(\n      partIndex,\n      color.R,\n      color.G,\n      color.B,\n      color.A\n    );\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setPartScreenColorByRGBA(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartScreenColors,\n      this._userScreenColors\n    );\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForModelMultiplyColors(): boolean {\n    return this._isOverwrittenModelMultiplyColors;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForModelScreenColors(): boolean {\n    return this._isOverwrittenModelScreenColors;\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForModelMultiplyColors(value: boolean) {\n    this._isOverwrittenModelMultiplyColors = value;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForModelScreenColors(value: boolean) {\n    this._isOverwrittenModelScreenColors = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForDrawableMultiplyColors(\n    drawableindex: number\n  ): boolean {\n    return this._userMultiplyColors.at(drawableindex).isOverwritten;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForDrawableScreenColors(\n    drawableindex: number\n  ): boolean {\n    return this._userScreenColors.at(drawableindex).isOverwritten;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForDrawableMultiplyColors(\n    drawableindex: number,\n    value: boolean\n  ) {\n    this._userMultiplyColors.at(drawableindex).isOverwritten = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForDrawableScreenColors(\n    drawableindex: number,\n    value: boolean\n  ) {\n    this._userScreenColors.at(drawableindex).isOverwritten = value;\n  }\n\n  /**\n   * SDKからpartの乗算色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverwriteColorForPartMultiplyColors(partIndex: number) {\n    return this._userPartMultiplyColors.at(partIndex).isOverwritten;\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverwriteColorForPartScreenColors(partIndex: number) {\n    return this._userPartScreenColors.at(partIndex).isOverwritten;\n  }\n\n  /**\n   * partのOverwriteFlag setter関数\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setOverwriteColorForPartColors(\n    partIndex: number,\n    value: boolean,\n    partColors: csmVector<PartColorData>,\n    drawableColors: csmVector<DrawableColorData>\n  ) {\n    partColors.at(partIndex).isOverwritten = value;\n\n    for (let i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {\n      const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n      drawableColors.at(drawableIndex).isOverwritten = value;\n\n      if (value) {\n        drawableColors.at(drawableIndex).Color.R =\n          partColors.at(partIndex).Color.R;\n        drawableColors.at(drawableIndex).Color.G =\n          partColors.at(partIndex).Color.G;\n        drawableColors.at(drawableIndex).Color.B =\n          partColors.at(partIndex).Color.B;\n        drawableColors.at(drawableIndex).Color.A =\n          partColors.at(partIndex).Color.A;\n      }\n    }\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteColorForPartMultiplyColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    this._userPartMultiplyColors.at(partIndex).isOverwritten = value;\n    this.setOverwriteColorForPartColors(\n      partIndex,\n      value,\n      this._userPartMultiplyColors,\n      this._userMultiplyColors\n    );\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteColorForPartScreenColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    this._userPartScreenColors.at(partIndex).isOverwritten = value;\n    this.setOverwriteColorForPartColors(\n      partIndex,\n      value,\n      this._userPartScreenColors,\n      this._userScreenColors\n    );\n  }\n\n  /**\n   * Drawableのカリング情報を取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @return  Drawableのカリング情報\n   */\n  public getDrawableCulling(drawableIndex: number): boolean {\n    if (\n      this.getOverwriteFlagForModelCullings() ||\n      this.getOverwriteFlagForDrawableCullings(drawableIndex)\n    ) {\n      return this._userCullings.at(drawableIndex).isCulling;\n    }\n\n    const constantFlags = this._model.drawables.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\n      constantFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableのカリング情報を設定する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isCulling カリング情報\n   */\n  public setDrawableCulling(drawableIndex: number, isCulling: boolean): void {\n    this._userCullings.at(drawableIndex).isCulling = isCulling;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするか。\n   *\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  public getOverwriteFlagForModelCullings(): boolean {\n    return this._isOverwrittenCullings;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\n   *\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverwriteFlagForModelCullings(\n    isOverwrittenCullings: boolean\n  ): void {\n    this._isOverwrittenCullings = isOverwrittenCullings;\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  public getOverwriteFlagForDrawableCullings(drawableIndex: number): boolean {\n    return this._userCullings.at(drawableIndex).isOverwritten;\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverwriteFlagForDrawableCullings(\n    drawableIndex: number,\n    isOverwrittenCullings: boolean\n  ): void {\n    this._userCullings.at(drawableIndex).isOverwritten = isOverwrittenCullings;\n  }\n\n  /**\n   * モデルの不透明度を取得する\n   *\n   * @returns 不透明度の値\n   */\n  public getModelOapcity(): number {\n    return this._modelOpacity;\n  }\n\n  /**\n   * モデルの不透明度を設定する\n   *\n   * @param value 不透明度の値\n   */\n  public setModelOapcity(value: number) {\n    this._modelOpacity = value;\n  }\n\n  /**\n   * モデルを取得\n   */\n  public getModel(): Live2DCubismCore.Model {\n    return this._model;\n  }\n\n  /**\n   * パーツのインデックスを取得\n   * @param partId パーツのID\n   * @return パーツのインデックス\n   */\n  public getPartIndex(partId: CubismIdHandle): number {\n    let partIndex: number;\n    const partCount: number = this._model.parts.count;\n\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\n      if (partId == this._partIds.at(partIndex)) {\n        return partIndex;\n      }\n    }\n\n    // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\n    if (this._notExistPartId.isExist(partId)) {\n      return this._notExistPartId.getValue(partId);\n    }\n\n    // 非存在パーツIDリストにない場合、新しく要素を追加する\n    partIndex = partCount + this._notExistPartId.getSize();\n    this._notExistPartId.setValue(partId, partIndex);\n    this._notExistPartOpacities.appendKey(partIndex);\n\n    return partIndex;\n  }\n\n  /**\n   * パーツのIDを取得する。\n   *\n   * @param partIndex 取得するパーツのインデックス\n   * @return パーツのID\n   */\n  public getPartId(partIndex: number): CubismIdHandle {\n    const partId = this._model.parts.ids[partIndex];\n    return CubismFramework.getIdManager().getId(partId);\n  }\n\n  /**\n   * パーツの個数の取得\n   * @return パーツの個数\n   */\n  public getPartCount(): number {\n    const partCount: number = this._model.parts.count;\n    return partCount;\n  }\n\n  /**\n   * パーツの不透明度の設定(Index)\n   * @param partIndex パーツのインデックス\n   * @param opacity 不透明度\n   */\n  public setPartOpacityByIndex(partIndex: number, opacity: number): void {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      this._notExistPartOpacities.setValue(partIndex, opacity);\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n\n    this._partOpacities[partIndex] = opacity;\n  }\n\n  /**\n   * パーツの不透明度の設定(Id)\n   * @param partId パーツのID\n   * @param opacity パーツの不透明度\n   */\n  public setPartOpacityById(partId: CubismIdHandle, opacity: number): void {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index: number = this.getPartIndex(partId);\n\n    if (index < 0) {\n      return; // パーツがないのでスキップ\n    }\n\n    this.setPartOpacityByIndex(index, opacity);\n  }\n\n  /**\n   * パーツの不透明度の取得(index)\n   * @param partIndex パーツのインデックス\n   * @return パーツの不透明度\n   */\n  public getPartOpacityByIndex(partIndex: number): number {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\n      return this._notExistPartOpacities.getValue(partIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n\n    return this._partOpacities[partIndex];\n  }\n\n  /**\n   * パーツの不透明度の取得(id)\n   * @param partId パーツのＩｄ\n   * @return パーツの不透明度\n   */\n  public getPartOpacityById(partId: CubismIdHandle): number {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index: number = this.getPartIndex(partId);\n\n    if (index < 0) {\n      return 0; // パーツが無いのでスキップ\n    }\n\n    return this.getPartOpacityByIndex(index);\n  }\n\n  /**\n   * パラメータのインデックスの取得\n   * @param パラメータID\n   * @return パラメータのインデックス\n   */\n  public getParameterIndex(parameterId: CubismIdHandle): number {\n    let parameterIndex: number;\n    const idCount: number = this._model.parameters.count;\n\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n      if (parameterId != this._parameterIds.at(parameterIndex)) {\n        continue;\n      }\n\n      return parameterIndex;\n    }\n\n    // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\n    if (this._notExistParameterId.isExist(parameterId)) {\n      return this._notExistParameterId.getValue(parameterId);\n    }\n\n    // 非存在パラメータIDリストにない場合新しく要素を追加する\n    parameterIndex =\n      this._model.parameters.count + this._notExistParameterId.getSize();\n\n    this._notExistParameterId.setValue(parameterId, parameterIndex);\n    this._notExistParameterValues.appendKey(parameterIndex);\n\n    return parameterIndex;\n  }\n\n  /**\n   * パラメータの個数の取得\n   * @return パラメータの個数\n   */\n  public getParameterCount(): number {\n    return this._model.parameters.count;\n  }\n\n  /**\n   * パラメータの種類の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return csmParameterType_Normal -> 通常のパラメータ\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\n   */\n  public getParameterType(\n    parameterIndex: number\n  ): Live2DCubismCore.csmParameterType {\n    return this._model.parameters.types[parameterIndex];\n  }\n\n  /**\n   * パラメータの最大値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最大値\n   */\n  public getParameterMaximumValue(parameterIndex: number): number {\n    return this._model.parameters.maximumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの最小値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最小値\n   */\n  public getParameterMinimumValue(parameterIndex: number): number {\n    return this._model.parameters.minimumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータのデフォルト値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータのデフォルト値\n   */\n  public getParameterDefaultValue(parameterIndex: number): number {\n    return this._model.parameters.defaultValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterIndex    パラメータのインデックス\n   * @return パラメータの値\n   */\n  public getParameterValueByIndex(parameterIndex: number): number {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return this._notExistParameterValues.getValue(parameterIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    return this._parameterValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterId    パラメータのID\n   * @return パラメータの値\n   */\n  public getParameterValueById(parameterId: CubismIdHandle): number {\n    // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const parameterIndex: number = this.getParameterIndex(parameterId);\n    return this.getParameterValueByIndex(parameterIndex);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterIndex パラメータのインデックス\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  public setParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      this._notExistParameterValues.setValue(\n        parameterIndex,\n        weight == 1\n          ? value\n          : this._notExistParameterValues.getValue(parameterIndex) *\n              (1 - weight) +\n              value * weight\n      );\n\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\n      value = this._model.parameters.maximumValues[parameterIndex];\n    }\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\n      value = this._model.parameters.minimumValues[parameterIndex];\n    }\n\n    this._parameterValues[parameterIndex] =\n      weight == 1\n        ? value\n        : (this._parameterValues[parameterIndex] =\n            this._parameterValues[parameterIndex] * (1 - weight) +\n            value * weight);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterId パラメータのID\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  public setParameterValueById(\n    parameterId: CubismIdHandle,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.setParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の加算(index)\n   * @param parameterIndex パラメータインデックス\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  public addParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) + value * weight\n    );\n  }\n\n  /**\n   * パラメータの値の加算(id)\n   * @param parameterId パラメータＩＤ\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  public addParameterValueById(\n    parameterId: any,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.addParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterId パラメータのID\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  public multiplyParameterValueById(\n    parameterId: CubismIdHandle,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.multiplyParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterIndex パラメータのインデックス\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  public multiplyParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) *\n        (1.0 + (value - 1.0) * weight)\n    );\n  }\n\n  /**\n   * Drawableのインデックスの取得\n   * @param drawableId DrawableのID\n   * @return Drawableのインデックス\n   */\n  public getDrawableIndex(drawableId: CubismIdHandle): number {\n    const drawableCount = this._model.drawables.count;\n\n    for (\n      let drawableIndex = 0;\n      drawableIndex < drawableCount;\n      ++drawableIndex\n    ) {\n      if (this._drawableIds.at(drawableIndex) == drawableId) {\n        return drawableIndex;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Drawableの個数の取得\n   * @return drawableの個数\n   */\n  public getDrawableCount(): number {\n    const drawableCount = this._model.drawables.count;\n    return drawableCount;\n  }\n\n  /**\n   * DrawableのIDを取得する\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのID\n   */\n  public getDrawableId(drawableIndex: number): CubismIdHandle {\n    const parameterIds: string[] = this._model.drawables.ids;\n    return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\n  }\n\n  /**\n   * Drawableの描画順リストの取得\n   * @return Drawableの描画順リスト\n   */\n  public getDrawableRenderOrders(): Int32Array {\n    const renderOrders: Int32Array = this._model.drawables.renderOrders;\n    return renderOrders;\n  }\n\n  /**\n   * @deprecated\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\n   *\n   * Drawableのテクスチャインデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックスリスト\n   */\n  public getDrawableTextureIndices(drawableIndex: number): number {\n    return this.getDrawableTextureIndex(drawableIndex);\n  }\n\n  /**\n   * Drawableのテクスチャインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックス\n   */\n  public getDrawableTextureIndex(drawableIndex: number): number {\n    const textureIndices: Int32Array = this._model.drawables.textureIndices;\n    return textureIndices[drawableIndex];\n  }\n\n  /**\n   * DrawableのVertexPositionsの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\n   * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\n   */\n  public getDrawableDynamicFlagVertexPositionsDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの頂点インデックスの個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスの個数\n   */\n  public getDrawableVertexIndexCount(drawableIndex: number): number {\n    const indexCounts: Int32Array = this._model.drawables.indexCounts;\n    return indexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点の個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点の個数\n   */\n  public getDrawableVertexCount(drawableIndex: number): number {\n    const vertexCounts = this._model.drawables.vertexCounts;\n    return vertexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  public getDrawableVertices(drawableIndex: number): Float32Array {\n    return this.getDrawableVertexPositions(drawableIndex);\n  }\n\n  /**\n   * Drawableの頂点インデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスリスト\n   */\n  public getDrawableVertexIndices(drawableIndex: number): Uint16Array {\n    const indicesArray: Uint16Array[] = this._model.drawables.indices;\n    return indicesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  public getDrawableVertexPositions(drawableIndex: number): Float32Array {\n    const verticesArray: Float32Array[] = this._model.drawables.vertexPositions;\n    return verticesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点のUVリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点UVリスト\n   */\n  public getDrawableVertexUvs(drawableIndex: number): Float32Array {\n    const uvsArray: Float32Array[] = this._model.drawables.vertexUvs;\n    return uvsArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの不透明度の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの不透明度\n   */\n  public getDrawableOpacity(drawableIndex: number): number {\n    const opacities: Float32Array = this._model.drawables.opacities;\n    return opacities[drawableIndex];\n  }\n\n  /**\n   * Drawableの乗算色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの乗算色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getDrawableMultiplyColor(drawableIndex: number): CubismTextureColor {\n    const multiplyColors: Float32Array = this._model.drawables.multiplyColors;\n    const index = drawableIndex * 4;\n    const multiplyColor: CubismTextureColor = new CubismTextureColor();\n    multiplyColor.R = multiplyColors[index];\n    multiplyColor.G = multiplyColors[index + 1];\n    multiplyColor.B = multiplyColors[index + 2];\n    multiplyColor.A = multiplyColors[index + 3];\n    return multiplyColor;\n  }\n\n  /**\n   * Drawableのスクリーン色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのスクリーン色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getDrawableScreenColor(drawableIndex: number): CubismTextureColor {\n    const screenColors: Float32Array = this._model.drawables.screenColors;\n    const index = drawableIndex * 4;\n    const screenColor: CubismTextureColor = new CubismTextureColor();\n    screenColor.R = screenColors[index];\n    screenColor.G = screenColors[index + 1];\n    screenColor.B = screenColors[index + 2];\n    screenColor.A = screenColors[index + 3];\n    return screenColor;\n  }\n\n  /**\n   * Drawableの親パーツのインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの親パーツのインデックス\n   */\n  public getDrawableParentPartIndex(drawableIndex: number): number {\n    return this._model.drawables.parentPartIndices[drawableIndex];\n    //? \n  }\n\n  /**\n   * Drawableのブレンドモードを取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのブレンドモード\n   */\n  public getDrawableBlendMode(drawableIndex: number): CubismBlendMode {\n    const constantFlags = this._model.drawables.constantFlags;\n\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(\n      constantFlags[drawableIndex]\n    )\n      ? CubismBlendMode.CubismBlendMode_Additive\n      : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\n          constantFlags[drawableIndex]\n        )\n      ? CubismBlendMode.CubismBlendMode_Multiplicative\n      : CubismBlendMode.CubismBlendMode_Normal;\n  }\n\n  /**\n   * Drawableのマスクの反転使用の取得\n   *\n   * Drawableのマスク使用時の反転設定を取得する。\n   * マスクを使用しない場合は無視される。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableの反転設定\n   */\n  public getDrawableInvertedMaskBit(drawableIndex: number): boolean {\n    const constantFlags: Uint8Array = this._model.drawables.constantFlags;\n\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\n      constantFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableのクリッピングマスクリストの取得\n   * @return Drawableのクリッピングマスクリスト\n   */\n  public getDrawableMasks(): Int32Array[] {\n    const masks: Int32Array[] = this._model.drawables.masks;\n    return masks;\n  }\n\n  /**\n   * Drawableのクリッピングマスクの個数リストの取得\n   * @return Drawableのクリッピングマスクの個数リスト\n   */\n  public getDrawableMaskCounts(): Int32Array {\n    const maskCounts: Int32Array = this._model.drawables.maskCounts;\n    return maskCounts;\n  }\n\n  /**\n   * クリッピングマスクの使用状態\n   *\n   * @return true クリッピングマスクを使用している\n   * @return false クリッピングマスクを使用していない\n   */\n  public isUsingMasking(): boolean {\n    for (let d = 0; d < this._model.drawables.count; ++d) {\n      if (this._model.drawables.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Drawableの表示情報を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableが表示\n   * @return false Drawableが非表示\n   */\n  public getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * DrawableのDrawOrderの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\n   * drawOrderはartMesh上で指定する0から1000の情報\n   * @param drawableIndex drawableのインデックス\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\n   */\n  public getDrawableDynamicFlagVisibilityDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの不透明度の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\n   *\n   * @param drawableIndex drawableのインデックス\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagOpacityDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの描画順序の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagRenderOrderDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの乗算色・スクリーン色の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagBlendColorDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * 保存されたパラメータの読み込み\n   */\n  public loadParameters(): void {\n    let parameterCount: number = this._model.parameters.count;\n    const savedParameterCount: number = this._savedParameters.getSize();\n\n    if (parameterCount > savedParameterCount) {\n      parameterCount = savedParameterCount;\n    }\n\n    for (let i = 0; i < parameterCount; ++i) {\n      this._parameterValues[i] = this._savedParameters.at(i);\n    }\n  }\n\n  /**\n   * 初期化する\n   */\n  public initialize(): void {\n    CSM_ASSERT(this._model);\n    console.log('you suck mean')\n    this._parameterValues = this._model.parameters.values;\n    this._partOpacities = this._model.parts.opacities;\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\n\n    {\n      const parameterIds: string[] = this._model.parameters.ids;\n      const parameterCount: number = this._model.parameters.count;\n\n      this._parameterIds.prepareCapacity(parameterCount);\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterIds.pushBack(\n          CubismFramework.getIdManager().getId(parameterIds[i])\n        );\n      }\n    }\n\n    const partCount: number = this._model.parts.count;\n    {\n      const partIds: string[] = this._model.parts.ids;\n\n      this._partIds.prepareCapacity(partCount);\n      for (let i = 0; i < partCount; ++i) {\n        this._partIds.pushBack(\n          CubismFramework.getIdManager().getId(partIds[i])\n        );\n      }\n\n      this._userPartMultiplyColors.prepareCapacity(partCount);\n      this._userPartScreenColors.prepareCapacity(partCount);\n\n      this._partChildDrawables.prepareCapacity(partCount);\n    }\n\n    {\n      const drawableIds: string[] = this._model.drawables.ids;\n      const drawableCount: number = this._model.drawables.count;\n\n      this._userMultiplyColors.prepareCapacity(drawableCount);\n      this._userScreenColors.prepareCapacity(drawableCount);\n\n      // カリング設定\n      this._userCullings.prepareCapacity(drawableCount);\n      const userCulling: DrawableCullingData = new DrawableCullingData(\n        false,\n        false\n      );\n\n      // Part\n      {\n        for (let i = 0; i < partCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          const userMultiplyColor: PartColorData = new PartColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor: PartColorData = new PartColorData(\n            false,\n            screenColor\n          );\n\n          this._userPartMultiplyColors.pushBack(userMultiplyColor);\n          this._userPartScreenColors.pushBack(userScreenColor);\n          this._partChildDrawables.pushBack(new csmVector<number>());\n          this._partChildDrawables.at(i).prepareCapacity(drawableCount);\n        }\n      }\n\n      // Drawables\n      {\n        for (let i = 0; i < drawableCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          const userMultiplyColor: DrawableColorData = new DrawableColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor: DrawableColorData = new DrawableColorData(\n            false,\n            screenColor\n          );\n\n          this._drawableIds.pushBack(\n            CubismFramework.getIdManager().getId(drawableIds[i])\n          );\n\n          this._userMultiplyColors.pushBack(userMultiplyColor);\n          this._userScreenColors.pushBack(userScreenColor);\n\n          this._userCullings.pushBack(userCulling);\n          console.log(0)\n          const parentIndex = this.getDrawableParentPartIndex(i);\n          if (parentIndex >= 0) {\n            this._partChildDrawables.at(parentIndex).pushBack(i);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param model モデル\n   */\n  public constructor(model: Live2DCubismCore.Model) {\n    this._model = model;\n    this._parameterValues = null;\n    this._parameterMaximumValues = null;\n    this._parameterMinimumValues = null;\n    this._partOpacities = null;\n    this._savedParameters = new csmVector<number>();\n    this._parameterIds = new csmVector<CubismIdHandle>();\n    this._drawableIds = new csmVector<CubismIdHandle>();\n    this._partIds = new csmVector<CubismIdHandle>();\n    this._isOverwrittenModelMultiplyColors = false;\n    this._isOverwrittenModelScreenColors = false;\n    this._isOverwrittenCullings = false;\n    this._modelOpacity = 1.0;\n\n    this._userMultiplyColors = new csmVector<DrawableColorData>();\n    this._userScreenColors = new csmVector<DrawableColorData>();\n    this._userCullings = new csmVector<DrawableCullingData>();\n    this._userPartMultiplyColors = new csmVector<PartColorData>();\n    this._userPartScreenColors = new csmVector<PartColorData>();\n    this._partChildDrawables = new csmVector<csmVector<number>>();\n\n    this._notExistPartId = new csmMap<CubismIdHandle, number>();\n    this._notExistParameterId = new csmMap<CubismIdHandle, number>();\n    this._notExistParameterValues = new csmMap<number, number>();\n    this._notExistPartOpacities = new csmMap<number, number>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._model.release();\n    this._model = null;\n  }\n\n  private _notExistPartOpacities: csmMap<number, number>; // 存在していないパーツの不透明度のリスト\n  private _notExistPartId: csmMap<CubismIdHandle, number>; // 存在していないパーツIDのリスト\n\n  private _notExistParameterValues: csmMap<number, number>; // 存在していないパラメータの値のリスト\n  private _notExistParameterId: csmMap<CubismIdHandle, number>; // 存在していないパラメータIDのリスト\n\n  private _savedParameters: csmVector<number>; // 保存されたパラメータ\n\n  private _isOverwrittenModelMultiplyColors: boolean; // SDK上でモデル全体の乗算色を上書きするか判定するフラグ\n  private _isOverwrittenModelScreenColors: boolean; // SDK上でモデル全体のスクリーン色を上書きするか判定するフラグ\n  private _userMultiplyColors: csmVector<DrawableColorData>; // Drawableごとに設定する乗算色と上書きフラグを管理するリスト\n  private _userScreenColors: csmVector<DrawableColorData>; // Drawableごとに設定するスクリーン色と上書きフラグを管理するリスト\n  private _userPartScreenColors: csmVector<PartColorData>; // Part 乗算色の配列\n  private _userPartMultiplyColors: csmVector<PartColorData>; // Part スクリーン色の配列\n  private _partChildDrawables: csmVector<csmVector<number>>; // Partの子DrawableIndexの配列\n\n  private _model: Live2DCubismCore.Model; // モデル\n\n  private _parameterValues: Float32Array; // パラメータの値のリスト\n  private _parameterMaximumValues: Float32Array; // パラメータの最大値のリスト\n  private _parameterMinimumValues: Float32Array; // パラメータの最小値のリスト\n\n  private _partOpacities: Float32Array; // パーツの不透明度のリスト\n\n  private _modelOpacity: number; // モデルの不透明度\n\n  private _parameterIds: csmVector<CubismIdHandle>;\n  private _partIds: csmVector<CubismIdHandle>;\n  private _drawableIds: csmVector<CubismIdHandle>;\n\n  private _isOverwrittenCullings: boolean; // モデルのカリング設定をすべて上書きするか？\n  private _userCullings: csmVector<DrawableCullingData>; // カリング設定の配列\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModel = $.CubismModel;\n  export type CubismModel = $.CubismModel;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}