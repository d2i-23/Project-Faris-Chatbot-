{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 自動まばたき機能\n *\n * 自動まばたき機能を提供する。\n */\nexport class CubismEyeBlink {\n  /**\n   * インスタンスを作成する\n   * @param modelSetting モデルの設定情報\n   * @return 作成されたインスタンス\n   * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\n   */\n  static create() {\n    let modelSetting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new CubismEyeBlink(modelSetting);\n  }\n\n  /**\n   * インスタンスの破棄\n   * @param eyeBlink 対象のCubismEyeBlink\n   */\n  static delete(eyeBlink) {\n    if (eyeBlink != null) {\n      eyeBlink = null;\n    }\n  }\n\n  /**\n   * まばたきの間隔の設定\n   * @param blinkingInterval まばたきの間隔の時間[秒]\n   */\n  setBlinkingInterval(blinkingInterval) {\n    this._blinkingIntervalSeconds = blinkingInterval;\n  }\n\n  /**\n   * まばたきのモーションの詳細設定\n   * @param closing   まぶたを閉じる動作の所要時間[秒]\n   * @param closed    まぶたを閉じている動作の所要時間[秒]\n   * @param opening   まぶたを開く動作の所要時間[秒]\n   */\n  setBlinkingSetting(closing, closed, opening) {\n    this._closingSeconds = closing;\n    this._closedSeconds = closed;\n    this._openingSeconds = opening;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの設定\n   * @param parameterIds パラメータのIDのリスト\n   */\n  setParameterIds(parameterIds) {\n    this._parameterIds = parameterIds;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの取得\n   * @return パラメータIDのリスト\n   */\n  getParameterIds() {\n    return this._parameterIds;\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  updateParameters(model, deltaTimeSeconds) {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let parameterValue;\n    let t = 0.0;\n    switch (this._blinkingState) {\n      case EyeState.EyeState_Closing:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closingSeconds;\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Closed;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 1.0 - t;\n        break;\n      case EyeState.EyeState_Closed:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closedSeconds;\n        if (t >= 1.0) {\n          this._blinkingState = EyeState.EyeState_Opening;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 0.0;\n        break;\n      case EyeState.EyeState_Opening:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._openingSeconds;\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Interval;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        }\n        parameterValue = t;\n        break;\n      case EyeState.EyeState_Interval:\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\n          this._blinkingState = EyeState.EyeState_Closing;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 1.0;\n        break;\n      case EyeState.EyeState_First:\n      default:\n        this._blinkingState = EyeState.EyeState_Interval;\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        parameterValue = 1.0;\n        break;\n    }\n    if (!CubismEyeBlink.CloseIfZero) {\n      parameterValue = -parameterValue;\n    }\n    for (let i = 0; i < this._parameterIds.getSize(); ++i) {\n      model.setParameterValueById(this._parameterIds.at(i), parameterValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param modelSetting モデルの設定情報\n   */\n  constructor(modelSetting) {\n    this._blinkingState = void 0;\n    // 現在の状態\n    this._parameterIds = void 0;\n    // 操作対象のパラメータのIDのリスト\n    this._nextBlinkingTime = void 0;\n    // 次のまばたきの時刻[秒]\n    this._stateStartTimeSeconds = void 0;\n    // 現在の状態が開始した時刻[秒]\n    this._blinkingIntervalSeconds = void 0;\n    // まばたきの間隔[秒]\n    this._closingSeconds = void 0;\n    // まぶたを閉じる動作の所要時間[秒]\n    this._closedSeconds = void 0;\n    // まぶたを閉じている動作の所要時間[秒]\n    this._openingSeconds = void 0;\n    // まぶたを開く動作の所要時間[秒]\n    this._userTimeSeconds = void 0;\n    this._blinkingState = EyeState.EyeState_First;\n    this._nextBlinkingTime = 0.0;\n    this._stateStartTimeSeconds = 0.0;\n    this._blinkingIntervalSeconds = 4.0;\n    this._closingSeconds = 0.1;\n    this._closedSeconds = 0.05;\n    this._openingSeconds = 0.15;\n    this._userTimeSeconds = 0.0;\n    this._parameterIds = new csmVector();\n    if (modelSetting == null) {\n      return;\n    }\n    for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\n      this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\n    }\n  }\n\n  /**\n   * 次の瞬きのタイミングの決定\n   *\n   * @return 次のまばたきを行う時刻[秒]\n   */\n  determinNextBlinkingTiming() {\n    const r = Math.random();\n    return this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0);\n  }\n}\n\n/**\n * まばたきの状態\n *\n * まばたきの状態を表す列挙型\n */\n// デルタ時間の積算値[秒]\n/**\n * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\n */\nCubismEyeBlink.CloseIfZero = true;\nexport let EyeState = /*#__PURE__*/function (EyeState) {\n  EyeState[EyeState[\"EyeState_First\"] = 0] = \"EyeState_First\";\n  EyeState[EyeState[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\n  EyeState[EyeState[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\n  EyeState[EyeState[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\n  EyeState[EyeState[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\n  return EyeState;\n}({}); // まぶたが開いていく途中の状態\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismeyeblink';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismEyeBlink = _Live2DCubismFramework.CubismEyeBlink = $.CubismEyeBlink;\n  const EyeState = _Live2DCubismFramework.EyeState = $.EyeState;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["csmVector","CubismEyeBlink","create","modelSetting","arguments","length","undefined","delete","eyeBlink","setBlinkingInterval","blinkingInterval","_blinkingIntervalSeconds","setBlinkingSetting","closing","closed","opening","_closingSeconds","_closedSeconds","_openingSeconds","setParameterIds","parameterIds","_parameterIds","getParameterIds","updateParameters","model","deltaTimeSeconds","_userTimeSeconds","parameterValue","t","_blinkingState","EyeState","EyeState_Closing","_stateStartTimeSeconds","EyeState_Closed","EyeState_Opening","EyeState_Interval","_nextBlinkingTime","determinNextBlinkingTiming","EyeState_First","CloseIfZero","i","getSize","setParameterValueById","at","constructor","getEyeBlinkParameterCount","pushBack","getEyeBlinkParameterId","r","Math","random","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/effect/cubismeyeblink.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from '../icubismmodelsetting';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 自動まばたき機能\n *\n * 自動まばたき機能を提供する。\n */\nexport class CubismEyeBlink {\n  /**\n   * インスタンスを作成する\n   * @param modelSetting モデルの設定情報\n   * @return 作成されたインスタンス\n   * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\n   */\n  public static create(\n    modelSetting: ICubismModelSetting = null\n  ): CubismEyeBlink {\n    return new CubismEyeBlink(modelSetting);\n  }\n\n  /**\n   * インスタンスの破棄\n   * @param eyeBlink 対象のCubismEyeBlink\n   */\n  public static delete(eyeBlink: CubismEyeBlink): void {\n    if (eyeBlink != null) {\n      eyeBlink = null;\n    }\n  }\n\n  /**\n   * まばたきの間隔の設定\n   * @param blinkingInterval まばたきの間隔の時間[秒]\n   */\n  public setBlinkingInterval(blinkingInterval: number): void {\n    this._blinkingIntervalSeconds = blinkingInterval;\n  }\n\n  /**\n   * まばたきのモーションの詳細設定\n   * @param closing   まぶたを閉じる動作の所要時間[秒]\n   * @param closed    まぶたを閉じている動作の所要時間[秒]\n   * @param opening   まぶたを開く動作の所要時間[秒]\n   */\n  public setBlinkingSetting(\n    closing: number,\n    closed: number,\n    opening: number\n  ): void {\n    this._closingSeconds = closing;\n    this._closedSeconds = closed;\n    this._openingSeconds = opening;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの設定\n   * @param parameterIds パラメータのIDのリスト\n   */\n  public setParameterIds(parameterIds: csmVector<CubismIdHandle>): void {\n    this._parameterIds = parameterIds;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの取得\n   * @return パラメータIDのリスト\n   */\n  public getParameterIds(): csmVector<CubismIdHandle> {\n    return this._parameterIds;\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let parameterValue: number;\n    let t = 0.0;\n\n    switch (this._blinkingState) {\n      case EyeState.EyeState_Closing:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._closingSeconds;\n\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Closed;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 1.0 - t;\n\n        break;\n      case EyeState.EyeState_Closed:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._closedSeconds;\n\n        if (t >= 1.0) {\n          this._blinkingState = EyeState.EyeState_Opening;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 0.0;\n\n        break;\n      case EyeState.EyeState_Opening:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._openingSeconds;\n\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Interval;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        }\n\n        parameterValue = t;\n\n        break;\n      case EyeState.EyeState_Interval:\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\n          this._blinkingState = EyeState.EyeState_Closing;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 1.0;\n\n        break;\n      case EyeState.EyeState_First:\n      default:\n        this._blinkingState = EyeState.EyeState_Interval;\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\n\n        parameterValue = 1.0;\n        break;\n    }\n\n    if (!CubismEyeBlink.CloseIfZero) {\n      parameterValue = -parameterValue;\n    }\n\n    for (let i = 0; i < this._parameterIds.getSize(); ++i) {\n      model.setParameterValueById(this._parameterIds.at(i), parameterValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param modelSetting モデルの設定情報\n   */\n  public constructor(modelSetting: ICubismModelSetting) {\n    this._blinkingState = EyeState.EyeState_First;\n    this._nextBlinkingTime = 0.0;\n    this._stateStartTimeSeconds = 0.0;\n    this._blinkingIntervalSeconds = 4.0;\n    this._closingSeconds = 0.1;\n    this._closedSeconds = 0.05;\n    this._openingSeconds = 0.15;\n    this._userTimeSeconds = 0.0;\n    this._parameterIds = new csmVector<CubismIdHandle>();\n\n    if (modelSetting == null) {\n      return;\n    }\n\n    for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\n      this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\n    }\n  }\n\n  /**\n   * 次の瞬きのタイミングの決定\n   *\n   * @return 次のまばたきを行う時刻[秒]\n   */\n  public determinNextBlinkingTiming(): number {\n    const r: number = Math.random();\n    return (\n      this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0)\n    );\n  }\n\n  _blinkingState: number; // 現在の状態\n  _parameterIds: csmVector<CubismIdHandle>; // 操作対象のパラメータのIDのリスト\n  _nextBlinkingTime: number; // 次のまばたきの時刻[秒]\n  _stateStartTimeSeconds: number; // 現在の状態が開始した時刻[秒]\n  _blinkingIntervalSeconds: number; // まばたきの間隔[秒]\n  _closingSeconds: number; // まぶたを閉じる動作の所要時間[秒]\n  _closedSeconds: number; // まぶたを閉じている動作の所要時間[秒]\n  _openingSeconds: number; // まぶたを開く動作の所要時間[秒]\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  /**\n   * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\n   */\n  static readonly CloseIfZero: boolean = true;\n}\n\n/**\n * まばたきの状態\n *\n * まばたきの状態を表す列挙型\n */\nexport enum EyeState {\n  EyeState_First = 0, // 初期状態\n  EyeState_Interval, // まばたきしていない状態\n  EyeState_Closing, // まぶたが閉じていく途中の状態\n  EyeState_Closed, // まぶたが閉じている状態\n  EyeState_Opening, // まぶたが開いていく途中の状態\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismeyeblink';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismEyeBlink = $.CubismEyeBlink;\n  export type CubismEyeBlink = $.CubismEyeBlink;\n  export const EyeState = $.EyeState;\n  export type EyeState = $.EyeState;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASA,SAAS,QAAQ,mBAAmB;;AAE7C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,CAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;EACE,OAAcC,MAAMA,CAAA,EAEF;IAAA,IADhBC,YAAiC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAExC,OAAO,IAAIH,cAAc,CAACE,YAAY,CAAC;EACzC;;EAEA;AACF;AACA;AACA;EACE,OAAcI,MAAMA,CAACC,QAAwB,EAAQ;IACnD,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpBA,QAAQ,GAAG,IAAI;IACjB;EACF;;EAEA;AACF;AACA;AACA;EACSC,mBAAmBA,CAACC,gBAAwB,EAAQ;IACzD,IAAI,CAACC,wBAAwB,GAAGD,gBAAgB;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACSE,kBAAkBA,CACvBC,OAAe,EACfC,MAAc,EACdC,OAAe,EACT;IACN,IAAI,CAACC,eAAe,GAAGH,OAAO;IAC9B,IAAI,CAACI,cAAc,GAAGH,MAAM;IAC5B,IAAI,CAACI,eAAe,GAAGH,OAAO;EAChC;;EAEA;AACF;AACA;AACA;EACSI,eAAeA,CAACC,YAAuC,EAAQ;IACpE,IAAI,CAACC,aAAa,GAAGD,YAAY;EACnC;;EAEA;AACF;AACA;AACA;EACSE,eAAeA,CAAA,EAA8B;IAClD,OAAO,IAAI,CAACD,aAAa;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACSE,gBAAgBA,CAACC,KAAkB,EAAEC,gBAAwB,EAAQ;IAC1E,IAAI,CAACC,gBAAgB,IAAID,gBAAgB;IACzC,IAAIE,cAAsB;IAC1B,IAAIC,CAAC,GAAG,GAAG;IAEX,QAAQ,IAAI,CAACC,cAAc;MACzB,KAAKC,QAAQ,CAACC,gBAAgB;QAC5BH,CAAC,GACC,CAAC,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACM,sBAAsB,IACpD,IAAI,CAAChB,eAAe;QAEtB,IAAIY,CAAC,IAAI,GAAG,EAAE;UACZA,CAAC,GAAG,GAAG;UACP,IAAI,CAACC,cAAc,GAAGC,QAAQ,CAACG,eAAe;UAC9C,IAAI,CAACD,sBAAsB,GAAG,IAAI,CAACN,gBAAgB;QACrD;QAEAC,cAAc,GAAG,GAAG,GAAGC,CAAC;QAExB;MACF,KAAKE,QAAQ,CAACG,eAAe;QAC3BL,CAAC,GACC,CAAC,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACM,sBAAsB,IACpD,IAAI,CAACf,cAAc;QAErB,IAAIW,CAAC,IAAI,GAAG,EAAE;UACZ,IAAI,CAACC,cAAc,GAAGC,QAAQ,CAACI,gBAAgB;UAC/C,IAAI,CAACF,sBAAsB,GAAG,IAAI,CAACN,gBAAgB;QACrD;QAEAC,cAAc,GAAG,GAAG;QAEpB;MACF,KAAKG,QAAQ,CAACI,gBAAgB;QAC5BN,CAAC,GACC,CAAC,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACM,sBAAsB,IACpD,IAAI,CAACd,eAAe;QAEtB,IAAIU,CAAC,IAAI,GAAG,EAAE;UACZA,CAAC,GAAG,GAAG;UACP,IAAI,CAACC,cAAc,GAAGC,QAAQ,CAACK,iBAAiB;UAChD,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;QAC5D;QAEAV,cAAc,GAAGC,CAAC;QAElB;MACF,KAAKE,QAAQ,CAACK,iBAAiB;QAC7B,IAAI,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACV,gBAAgB,EAAE;UAClD,IAAI,CAACG,cAAc,GAAGC,QAAQ,CAACC,gBAAgB;UAC/C,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACN,gBAAgB;QACrD;QAEAC,cAAc,GAAG,GAAG;QAEpB;MACF,KAAKG,QAAQ,CAACQ,cAAc;MAC5B;QACE,IAAI,CAACT,cAAc,GAAGC,QAAQ,CAACK,iBAAiB;QAChD,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;QAE1DV,cAAc,GAAG,GAAG;QACpB;IACJ;IAEA,IAAI,CAAC1B,cAAc,CAACsC,WAAW,EAAE;MAC/BZ,cAAc,GAAG,CAACA,cAAc;IAClC;IAEA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,aAAa,CAACoB,OAAO,CAAC,CAAC,EAAE,EAAED,CAAC,EAAE;MACrDhB,KAAK,CAACkB,qBAAqB,CAAC,IAAI,CAACrB,aAAa,CAACsB,EAAE,CAACH,CAAC,CAAC,EAAEb,cAAc,CAAC;IACvE;EACF;;EAEA;AACF;AACA;AACA;EACSiB,WAAWA,CAACzC,YAAiC,EAAE;IAAA,KAgCtD0B,cAAc;IAAU;IAAA,KACxBR,aAAa;IAA6B;IAAA,KAC1Ce,iBAAiB;IAAU;IAAA,KAC3BJ,sBAAsB;IAAU;IAAA,KAChCrB,wBAAwB;IAAU;IAAA,KAClCK,eAAe;IAAU;IAAA,KACzBC,cAAc;IAAU;IAAA,KACxBC,eAAe;IAAU;IAAA,KACzBQ,gBAAgB;IAvCd,IAAI,CAACG,cAAc,GAAGC,QAAQ,CAACQ,cAAc;IAC7C,IAAI,CAACF,iBAAiB,GAAG,GAAG;IAC5B,IAAI,CAACJ,sBAAsB,GAAG,GAAG;IACjC,IAAI,CAACrB,wBAAwB,GAAG,GAAG;IACnC,IAAI,CAACK,eAAe,GAAG,GAAG;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACQ,gBAAgB,GAAG,GAAG;IAC3B,IAAI,CAACL,aAAa,GAAG,IAAIrB,SAAS,CAAiB,CAAC;IAEpD,IAAIG,YAAY,IAAI,IAAI,EAAE;MACxB;IACF;IAEA,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrC,YAAY,CAAC0C,yBAAyB,CAAC,CAAC,EAAE,EAAEL,CAAC,EAAE;MACjE,IAAI,CAACnB,aAAa,CAACyB,QAAQ,CAAC3C,YAAY,CAAC4C,sBAAsB,CAACP,CAAC,CAAC,CAAC;IACrE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACSH,0BAA0BA,CAAA,EAAW;IAC1C,MAAMW,CAAS,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;IAC/B,OACE,IAAI,CAACxB,gBAAgB,GAAGsB,CAAC,IAAI,GAAG,GAAG,IAAI,CAACrC,wBAAwB,GAAG,GAAG,CAAC;EAE3E;AAgBF;;AAEA;AACA;AACA;AACA;AACA;AAZ4B;AAE1B;AACF;AACA;AA9LaV,cAAc,CA+LTsC,WAAW,GAAY,IAAI;AAQ7C,WAAYT,QAAQ,0BAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA,OAKA;;AAGpB;AACA,OAAO,KAAKqB,CAAC,MAAM,kBAAkB;AACrC;AACA,WAAAC,qBAAA;AAKC,WAAAC,sBAAA;EAJQ,MAAMpD,cAAc,GAAAoD,sBAAA,CAAApD,cAAA,GAAGkD,CAAC,CAAClD,cAAc;EAEvC,MAAM6B,QAAQ,GAAAuB,sBAAA,CAAAvB,QAAA,GAAGqB,CAAC,CAACrB,QAAQ;AAAC,GAHpBsB,qBAAqB,KAArBA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}