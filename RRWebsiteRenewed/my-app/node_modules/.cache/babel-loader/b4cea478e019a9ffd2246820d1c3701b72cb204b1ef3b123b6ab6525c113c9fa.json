{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismrenderer } from '../rendering/cubismrenderer';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as csmmap } from '../type/csmmap';\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismBlendMode = cubismrenderer.CubismBlendMode;\nvar csmVector = csmvector.csmVector;\nvar csmMap = csmmap.csmMap;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismModel {\n    /**\r\n     * モデルのパラメータの更新\r\n     */\n    update() {\n      // Update model\n      this._model.update();\n      this._model.drawables.resetDynamicFlags();\n    }\n\n    /**\r\n     * キャンバスの幅を取得する\r\n     */\n    getCanvasWidth() {\n      if (this._model == null) {\n        return 0.0;\n      }\n      return this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit;\n    }\n\n    /**\r\n     * キャンバスの高さを取得する\r\n     */\n    getCanvasHeight() {\n      if (this._model == null) {\n        return 0.0;\n      }\n      return this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit;\n    }\n\n    /**\r\n     * パラメータを保存する\r\n     */\n    saveParameters() {\n      const parameterCount = this._model.parameters.count;\n      const savedParameterCount = this._savedParameters.getSize();\n      for (let i = 0; i < parameterCount; ++i) {\n        if (i < savedParameterCount) {\n          this._savedParameters.set(i, this._parameterValues[i]);\n        } else {\n          this._savedParameters.pushBack(this._parameterValues[i]);\n        }\n      }\n    }\n\n    /**\r\n     * モデルを取得\r\n     */\n    getModel() {\n      return this._model;\n    }\n\n    /**\r\n     * パーツのインデックスを取得\r\n     * @param partId パーツのID\r\n     * @return パーツのインデックス\r\n     */\n    getPartIndex(partId) {\n      let partIndex;\n      const partCount = this._model.parts.count;\n      for (partIndex = 0; partIndex < partCount; ++partIndex) {\n        if (partId == this._partIds.at(partIndex)) {\n          return partIndex;\n        }\n      }\n\n      // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\n      if (this._notExistPartId.isExist(partId)) {\n        return this._notExistPartId.getValue(partId);\n      }\n\n      // 非存在パーツIDリストにない場合、新しく要素を追加する\n      partIndex = partCount + this._notExistPartId.getSize();\n      this._notExistPartId.setValue(partId, partIndex);\n      this._notExistPartOpacities.appendKey(partIndex);\n      return partIndex;\n    }\n\n    /**\r\n     * パーツの個数の取得\r\n     * @return パーツの個数\r\n     */\n    getPartCount() {\n      const partCount = this._model.parts.count;\n      return partCount;\n    }\n\n    /**\r\n     * パーツの不透明度の設定(Index)\r\n     * @param partIndex パーツのインデックス\r\n     * @param opacity 不透明度\r\n     */\n    setPartOpacityByIndex(partIndex, opacity) {\n      if (this._notExistPartOpacities.isExist(partIndex)) {\n        this._notExistPartOpacities.setValue(partIndex, opacity);\n        return;\n      }\n\n      // インデックスの範囲内検知\n      CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n      this._partOpacities[partIndex] = opacity;\n    }\n\n    /**\r\n     * パーツの不透明度の設定(Id)\r\n     * @param partId パーツのID\r\n     * @param opacity パーツの不透明度\r\n     */\n    setPartOpacityById(partId, opacity) {\n      // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n      const index = this.getPartIndex(partId);\n      if (index < 0) {\n        return; // パーツがないのでスキップ\n      }\n\n      this.setPartOpacityByIndex(index, opacity);\n    }\n\n    /**\r\n     * パーツの不透明度の取得(index)\r\n     * @param partIndex パーツのインデックス\r\n     * @return パーツの不透明度\r\n     */\n    getPartOpacityByIndex(partIndex) {\n      if (this._notExistPartOpacities.isExist(partIndex)) {\n        // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\n        return this._notExistPartOpacities.getValue(partIndex);\n      }\n\n      // インデックスの範囲内検知\n      CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n      return this._partOpacities[partIndex];\n    }\n\n    /**\r\n     * パーツの不透明度の取得(id)\r\n     * @param partId パーツのＩｄ\r\n     * @return パーツの不透明度\r\n     */\n    getPartOpacityById(partId) {\n      // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n      const index = this.getPartIndex(partId);\n      if (index < 0) {\n        return 0; // パーツが無いのでスキップ\n      }\n\n      return this.getPartOpacityByIndex(index);\n    }\n\n    /**\r\n     * パラメータのインデックスの取得\r\n     * @param パラメータID\r\n     * @return パラメータのインデックス\r\n     */\n    getParameterIndex(parameterId) {\n      let parameterIndex;\n      const idCount = this._model.parameters.count;\n      for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n        if (parameterId != this._parameterIds.at(parameterIndex)) {\n          continue;\n        }\n        return parameterIndex;\n      }\n\n      // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\n      if (this._notExistParameterId.isExist(parameterId)) {\n        return this._notExistParameterId.getValue(parameterId);\n      }\n\n      // 非存在パラメータIDリストにない場合新しく要素を追加する\n      parameterIndex = this._model.parameters.count + this._notExistParameterId.getSize();\n      this._notExistParameterId.setValue(parameterId, parameterIndex);\n      this._notExistParameterValues.appendKey(parameterIndex);\n      return parameterIndex;\n    }\n\n    /**\r\n     * パラメータの個数の取得\r\n     * @return パラメータの個数\r\n     */\n    getParameterCount() {\n      return this._model.parameters.count;\n    }\n\n    /**\r\n     * パラメータの最大値の取得\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @return パラメータの最大値\r\n     */\n    getParameterMaximumValue(parameterIndex) {\n      return this._model.parameters.maximumValues[parameterIndex];\n    }\n\n    /**\r\n     * パラメータの最小値の取得\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @return パラメータの最小値\r\n     */\n    getParameterMinimumValue(parameterIndex) {\n      return this._model.parameters.minimumValues[parameterIndex];\n    }\n\n    /**\r\n     * パラメータのデフォルト値の取得\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @return パラメータのデフォルト値\r\n     */\n    getParameterDefaultValue(parameterIndex) {\n      return this._model.parameters.defaultValues[parameterIndex];\n    }\n\n    /**\r\n     * パラメータの値の取得\r\n     * @param parameterIndex    パラメータのインデックス\r\n     * @return パラメータの値\r\n     */\n    getParameterValueByIndex(parameterIndex) {\n      if (this._notExistParameterValues.isExist(parameterIndex)) {\n        return this._notExistParameterValues.getValue(parameterIndex);\n      }\n\n      // インデックスの範囲内検知\n      CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n      return this._parameterValues[parameterIndex];\n    }\n\n    /**\r\n     * パラメータの値の取得\r\n     * @param parameterId    パラメータのID\r\n     * @return パラメータの値\r\n     */\n    getParameterValueById(parameterId) {\n      // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n      const parameterIndex = this.getParameterIndex(parameterId);\n      return this.getParameterValueByIndex(parameterIndex);\n    }\n\n    /**\r\n     * パラメータの値の設定\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @param value パラメータの値\r\n     * @param weight 重み\r\n     */\n    setParameterValueByIndex(parameterIndex, value) {\n      let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      if (this._notExistParameterValues.isExist(parameterIndex)) {\n        this._notExistParameterValues.setValue(parameterIndex, weight == 1 ? value : this._notExistParameterValues.getValue(parameterIndex) * (1 - weight) + value * weight);\n        return;\n      }\n\n      // インデックスの範囲内検知\n      CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n      if (this._model.parameters.maximumValues[parameterIndex] < value) {\n        value = this._model.parameters.maximumValues[parameterIndex];\n      }\n      if (this._model.parameters.minimumValues[parameterIndex] > value) {\n        value = this._model.parameters.minimumValues[parameterIndex];\n      }\n      this._parameterValues[parameterIndex] = weight == 1 ? value : this._parameterValues[parameterIndex] = this._parameterValues[parameterIndex] * (1 - weight) + value * weight;\n    }\n\n    /**\r\n     * パラメータの値の設定\r\n     * @param parameterId パラメータのID\r\n     * @param value パラメータの値\r\n     * @param weight 重み\r\n     */\n    setParameterValueById(parameterId, value) {\n      let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      const index = this.getParameterIndex(parameterId);\n      this.setParameterValueByIndex(index, value, weight);\n    }\n\n    /**\r\n     * パラメータの値の加算(index)\r\n     * @param parameterIndex パラメータインデックス\r\n     * @param value 加算する値\r\n     * @param weight 重み\r\n     */\n    addParameterValueByIndex(parameterIndex, value) {\n      let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\n    }\n\n    /**\r\n     * パラメータの値の加算(id)\r\n     * @param parameterId パラメータＩＤ\r\n     * @param value 加算する値\r\n     * @param weight 重み\r\n     */\n    addParameterValueById(parameterId, value) {\n      let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      const index = this.getParameterIndex(parameterId);\n      this.addParameterValueByIndex(index, value, weight);\n    }\n\n    /**\r\n     * パラメータの値の乗算\r\n     * @param parameterId パラメータのID\r\n     * @param value 乗算する値\r\n     * @param weight 重み\r\n     */\n    multiplyParameterValueById(parameterId, value) {\n      let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      const index = this.getParameterIndex(parameterId);\n      this.multiplyParameterValueByIndex(index, value, weight);\n    }\n\n    /**\r\n     * パラメータの値の乗算\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @param value 乗算する値\r\n     * @param weight 重み\r\n     */\n    multiplyParameterValueByIndex(parameterIndex, value) {\n      let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) * (1.0 + (value - 1.0) * weight));\n    }\n\n    /**\r\n     * Drawableのインデックスの取得\r\n     * @param drawableId DrawableのID\r\n     * @return Drawableのインデックス\r\n     */\n    getDrawableIndex(drawableId) {\n      const drawableCount = this._model.drawables.count;\n      for (let drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\n        if (this._drawableIds.at(drawableIndex) == drawableId) {\n          return drawableIndex;\n        }\n      }\n      return -1;\n    }\n\n    /**\r\n     * Drawableの個数の取得\r\n     * @return drawableの個数\r\n     */\n    getDrawableCount() {\n      const drawableCount = this._model.drawables.count;\n      return drawableCount;\n    }\n\n    /**\r\n     * DrawableのIDを取得する\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのID\r\n     */\n    getDrawableId(drawableIndex) {\n      const parameterIds = this._model.drawables.ids;\n      return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\n    }\n\n    /**\r\n     * Drawableの描画順リストの取得\r\n     * @return Drawableの描画順リスト\r\n     */\n    getDrawableRenderOrders() {\n      const renderOrders = this._model.drawables.renderOrders;\n      return renderOrders;\n    }\n\n    /**\r\n     * Drawableのテクスチャインデックスリストの取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのテクスチャインデックスリスト\r\n     */\n    getDrawableTextureIndices(drawableIndex) {\n      const textureIndices = this._model.drawables.textureIndices;\n      return textureIndices[drawableIndex];\n    }\n\n    /**\r\n     * DrawableのVertexPositionsの変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\r\n     *\r\n     * @param   drawableIndex   Drawableのインデックス\r\n     * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\r\n     * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\r\n     */\n    getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex) {\n      const dynamicFlags = this._model.drawables.dynamicFlags;\n      return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\n    }\n\n    /**\r\n     * Drawableの頂点インデックスの個数の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点インデックスの個数\r\n     */\n    getDrawableVertexIndexCount(drawableIndex) {\n      const indexCounts = this._model.drawables.indexCounts;\n      return indexCounts[drawableIndex];\n    }\n\n    /**\r\n     * Drawableの頂点の個数の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点の個数\r\n     */\n    getDrawableVertexCount(drawableIndex) {\n      const vertexCounts = this._model.drawables.vertexCounts;\n      return vertexCounts[drawableIndex];\n    }\n\n    /**\r\n     * Drawableの頂点リストの取得\r\n     * @param drawableIndex drawableのインデックス\r\n     * @return drawableの頂点リスト\r\n     */\n    getDrawableVertices(drawableIndex) {\n      return this.getDrawableVertexPositions(drawableIndex);\n    }\n\n    /**\r\n     * Drawableの頂点インデックスリストの取得\r\n     * @param drarableIndex Drawableのインデックス\r\n     * @return drawableの頂点インデックスリスト\r\n     */\n    getDrawableVertexIndices(drawableIndex) {\n      const indicesArray = this._model.drawables.indices;\n      return indicesArray[drawableIndex];\n    }\n\n    /**\r\n     * Drawableの頂点リストの取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点リスト\r\n     */\n    getDrawableVertexPositions(drawableIndex) {\n      const verticesArray = this._model.drawables.vertexPositions;\n      return verticesArray[drawableIndex];\n    }\n\n    /**\r\n     * Drawableの頂点のUVリストの取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点UVリスト\r\n     */\n    getDrawableVertexUvs(drawableIndex) {\n      const uvsArray = this._model.drawables.vertexUvs;\n      return uvsArray[drawableIndex];\n    }\n\n    /**\r\n     * Drawableの不透明度の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの不透明度\r\n     */\n    getDrawableOpacity(drawableIndex) {\n      const opacities = this._model.drawables.opacities;\n      return opacities[drawableIndex];\n    }\n\n    /**\r\n     * Drawableのカリング情報の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのカリング情報\r\n     */\n    getDrawableCulling(drawableIndex) {\n      const constantFlags = this._model.drawables.constantFlags;\n      return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\n    }\n\n    /**\r\n     * Drawableのブレンドモードを取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのブレンドモード\r\n     */\n    getDrawableBlendMode(drawableIndex) {\n      const constantFlags = this._model.drawables.constantFlags;\n      return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Additive : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Multiplicative : CubismBlendMode.CubismBlendMode_Normal;\n    }\n\n    /**\r\n     * Drawableのマスクの反転使用の取得\r\n     *\r\n     * Drawableのマスク使用時の反転設定を取得する。\r\n     * マスクを使用しない場合は無視される。\r\n     *\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return Drawableの反転設定\r\n     */\n    getDrawableInvertedMaskBit(drawableIndex) {\n      const constantFlags = this._model.drawables.constantFlags;\n      return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\n    }\n\n    /**\r\n     * Drawableのクリッピングマスクリストの取得\r\n     * @return Drawableのクリッピングマスクリスト\r\n     */\n    getDrawableMasks() {\n      const masks = this._model.drawables.masks;\n      return masks;\n    }\n\n    /**\r\n     * Drawableのクリッピングマスクの個数リストの取得\r\n     * @return Drawableのクリッピングマスクの個数リスト\r\n     */\n    getDrawableMaskCounts() {\n      const maskCounts = this._model.drawables.maskCounts;\n      return maskCounts;\n    }\n\n    /**\r\n     * クリッピングマスクの使用状態\r\n     *\r\n     * @return true クリッピングマスクを使用している\r\n     * @return false クリッピングマスクを使用していない\r\n     */\n    isUsingMasking() {\n      for (let d = 0; d < this._model.drawables.count; ++d) {\n        if (this._model.drawables.maskCounts[d] <= 0) {\n          continue;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\r\n     * Drawableの表示情報を取得する\r\n     *\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return true Drawableが表示\r\n     * @return false Drawableが非表示\r\n     */\n    getDrawableDynamicFlagIsVisible(drawableIndex) {\n      const dynamicFlags = this._model.drawables.dynamicFlags;\n      return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n    }\n\n    /**\r\n     * DrawableのDrawOrderの変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\r\n     * drawOrderはartMesh上で指定する0から1000の情報\r\n     * @param drawableIndex drawableのインデックス\r\n     * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\r\n     * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\r\n     */\n    getDrawableDynamicFlagVisibilityDidChange(drawableIndex) {\n      const dynamicFlags = this._model.drawables.dynamicFlags;\n      return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\n    }\n\n    /**\r\n     * Drawableの不透明度の変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\r\n     *\r\n     * @param drawableIndex drawableのインデックス\r\n     * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\r\n     * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\r\n     */\n    getDrawableDynamicFlagOpacityDidChange(drawableIndex) {\n      const dynamicFlags = this._model.drawables.dynamicFlags;\n      return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\n    }\n\n    /**\r\n     * Drawableの描画順序の変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\r\n     *\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\r\n     * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\r\n     */\n    getDrawableDynamicFlagRenderOrderDidChange(drawableIndex) {\n      const dynamicFlags = this._model.drawables.dynamicFlags;\n      return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\n    }\n\n    /**\r\n     * 保存されたパラメータの読み込み\r\n     */\n    loadParameters() {\n      let parameterCount = this._model.parameters.count;\n      const savedParameterCount = this._savedParameters.getSize();\n      if (parameterCount > savedParameterCount) {\n        parameterCount = savedParameterCount;\n      }\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterValues[i] = this._savedParameters.at(i);\n      }\n    }\n\n    /**\r\n     * 初期化する\r\n     */\n    initialize() {\n      CSM_ASSERT(this._model);\n      this._parameterValues = this._model.parameters.values;\n      this._partOpacities = this._model.parts.opacities;\n      this._parameterMaximumValues = this._model.parameters.maximumValues;\n      this._parameterMinimumValues = this._model.parameters.minimumValues;\n      {\n        const parameterIds = this._model.parameters.ids;\n        const parameterCount = this._model.parameters.count;\n        this._parameterIds.prepareCapacity(parameterCount);\n        for (let i = 0; i < parameterCount; ++i) {\n          this._parameterIds.pushBack(CubismFramework.getIdManager().getId(parameterIds[i]));\n        }\n      }\n      {\n        const partIds = this._model.parts.ids;\n        const partCount = this._model.parts.count;\n        this._partIds.prepareCapacity(partCount);\n        for (let i = 0; i < partCount; ++i) {\n          this._partIds.pushBack(CubismFramework.getIdManager().getId(partIds[i]));\n        }\n      }\n      {\n        const drawableIds = this._model.drawables.ids;\n        const drawableCount = this._model.drawables.count;\n        this._drawableIds.prepareCapacity(drawableCount);\n        for (let i = 0; i < drawableCount; ++i) {\n          this._drawableIds.pushBack(CubismFramework.getIdManager().getId(drawableIds[i]));\n        }\n      }\n    }\n\n    /**\r\n     * コンストラクタ\r\n     * @param model モデル\r\n     */\n    constructor(model) {\n      this._notExistPartOpacities = void 0;\n      // 存在していないパーツの不透明度のリスト\n      this._notExistPartId = void 0;\n      // 存在していないパーツIDのリスト\n      this._notExistParameterValues = void 0;\n      // 存在していないパラメータの値のリスト\n      this._notExistParameterId = void 0;\n      // 存在していないパラメータIDのリスト\n      this._savedParameters = void 0;\n      // 保存されたパラメータ\n      this._model = void 0;\n      // モデル\n      this._parameterValues = void 0;\n      // パラメータの値のリスト\n      this._parameterMaximumValues = void 0;\n      // パラメータの最大値のリスト\n      this._parameterMinimumValues = void 0;\n      // パラメータの最小値のリスト\n      this._partOpacities = void 0;\n      // パーツの不透明度のリスト\n      this._parameterIds = void 0;\n      this._partIds = void 0;\n      this._drawableIds = void 0;\n      this._model = model;\n      this._parameterValues = null;\n      this._parameterMaximumValues = null;\n      this._parameterMinimumValues = null;\n      this._partOpacities = null;\n      this._savedParameters = new csmVector();\n      this._parameterIds = new csmVector();\n      this._drawableIds = new csmVector();\n      this._partIds = new csmVector();\n      this._notExistPartId = new csmMap();\n      this._notExistParameterId = new csmMap();\n      this._notExistParameterValues = new csmMap();\n      this._notExistPartOpacities = new csmMap();\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      this._model.release();\n      this._model = null;\n    }\n  }\n  _Live2DCubismFramework.CubismModel = CubismModel;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismrenderer","cubismid","cubismframework","csmmap","csmvector","CSM_ASSERT","CubismFramework","CubismBlendMode","csmVector","csmMap","CubismIdHandle","_Live2DCubismFramework","CubismModel","update","_model","drawables","resetDynamicFlags","getCanvasWidth","canvasinfo","CanvasWidth","PixelsPerUnit","getCanvasHeight","CanvasHeight","saveParameters","parameterCount","parameters","count","savedParameterCount","_savedParameters","getSize","i","set","_parameterValues","pushBack","getModel","getPartIndex","partId","partIndex","partCount","parts","_partIds","at","_notExistPartId","isExist","getValue","setValue","_notExistPartOpacities","appendKey","getPartCount","setPartOpacityByIndex","opacity","_partOpacities","setPartOpacityById","index","getPartOpacityByIndex","getPartOpacityById","getParameterIndex","parameterId","parameterIndex","idCount","_parameterIds","_notExistParameterId","_notExistParameterValues","getParameterCount","getParameterMaximumValue","maximumValues","getParameterMinimumValue","minimumValues","getParameterDefaultValue","defaultValues","getParameterValueByIndex","getParameterValueById","setParameterValueByIndex","value","weight","arguments","length","undefined","setParameterValueById","addParameterValueByIndex","addParameterValueById","multiplyParameterValueById","multiplyParameterValueByIndex","getDrawableIndex","drawableId","drawableCount","drawableIndex","_drawableIds","getDrawableCount","getDrawableId","parameterIds","ids","getIdManager","getId","getDrawableRenderOrders","renderOrders","getDrawableTextureIndices","textureIndices","getDrawableDynamicFlagVertexPositionsDidChange","dynamicFlags","Live2DCubismCore","Utils","hasVertexPositionsDidChangeBit","getDrawableVertexIndexCount","indexCounts","getDrawableVertexCount","vertexCounts","getDrawableVertices","getDrawableVertexPositions","getDrawableVertexIndices","indicesArray","indices","verticesArray","vertexPositions","getDrawableVertexUvs","uvsArray","vertexUvs","getDrawableOpacity","opacities","getDrawableCulling","constantFlags","hasIsDoubleSidedBit","getDrawableBlendMode","hasBlendAdditiveBit","CubismBlendMode_Additive","hasBlendMultiplicativeBit","CubismBlendMode_Multiplicative","CubismBlendMode_Normal","getDrawableInvertedMaskBit","hasIsInvertedMaskBit","getDrawableMasks","masks","getDrawableMaskCounts","maskCounts","isUsingMasking","d","getDrawableDynamicFlagIsVisible","hasIsVisibleBit","getDrawableDynamicFlagVisibilityDidChange","hasVisibilityDidChangeBit","getDrawableDynamicFlagOpacityDidChange","hasOpacityDidChangeBit","getDrawableDynamicFlagRenderOrderDidChange","hasRenderOrderDidChangeBit","loadParameters","initialize","values","_parameterMaximumValues","_parameterMinimumValues","prepareCapacity","partIds","drawableIds","constructor","model","release"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/model/cubismmodel.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismrenderer } from '../rendering/cubismrenderer';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as csmmap } from '../type/csmmap';\r\nimport { Live2DCubismFramework as csmvector } from '../type/csmvector';\r\nimport { CSM_ASSERT } from '../utils/cubismdebug';\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismBlendMode = cubismrenderer.CubismBlendMode;\r\nimport csmVector = csmvector.csmVector;\r\nimport csmMap = csmmap.csmMap;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * モデル\r\n   *\r\n   * Mocデータから生成されるモデルのクラス。\r\n   */\r\n  export class CubismModel {\r\n    /**\r\n     * モデルのパラメータの更新\r\n     */\r\n    public update(): void {\r\n      // Update model\r\n      this._model.update();\r\n\r\n      this._model.drawables.resetDynamicFlags();\r\n    }\r\n\r\n    /**\r\n     * キャンバスの幅を取得する\r\n     */\r\n    public getCanvasWidth(): number {\r\n      if (this._model == null) {\r\n        return 0.0;\r\n      }\r\n\r\n      return (\r\n        this._model.canvasinfo.CanvasWidth /\r\n        this._model.canvasinfo.PixelsPerUnit\r\n      );\r\n    }\r\n\r\n    /**\r\n     * キャンバスの高さを取得する\r\n     */\r\n    public getCanvasHeight(): number {\r\n      if (this._model == null) {\r\n        return 0.0;\r\n      }\r\n\r\n      return (\r\n        this._model.canvasinfo.CanvasHeight /\r\n        this._model.canvasinfo.PixelsPerUnit\r\n      );\r\n    }\r\n\r\n    /**\r\n     * パラメータを保存する\r\n     */\r\n    public saveParameters(): void {\r\n      const parameterCount: number = this._model.parameters.count;\r\n      const savedParameterCount: number = this._savedParameters.getSize();\r\n\r\n      for (let i = 0; i < parameterCount; ++i) {\r\n        if (i < savedParameterCount) {\r\n          this._savedParameters.set(i, this._parameterValues[i]);\r\n        } else {\r\n          this._savedParameters.pushBack(this._parameterValues[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * モデルを取得\r\n     */\r\n    public getModel(): Live2DCubismCore.Model {\r\n      return this._model;\r\n    }\r\n\r\n    /**\r\n     * パーツのインデックスを取得\r\n     * @param partId パーツのID\r\n     * @return パーツのインデックス\r\n     */\r\n    public getPartIndex(partId: CubismIdHandle): number {\r\n      let partIndex: number;\r\n      const partCount: number = this._model.parts.count;\r\n\r\n      for (partIndex = 0; partIndex < partCount; ++partIndex) {\r\n        if (partId == this._partIds.at(partIndex)) {\r\n          return partIndex;\r\n        }\r\n      }\r\n\r\n      // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\r\n      if (this._notExistPartId.isExist(partId)) {\r\n        return this._notExistPartId.getValue(partId);\r\n      }\r\n\r\n      // 非存在パーツIDリストにない場合、新しく要素を追加する\r\n      partIndex = partCount + this._notExistPartId.getSize();\r\n      this._notExistPartId.setValue(partId, partIndex);\r\n      this._notExistPartOpacities.appendKey(partIndex);\r\n\r\n      return partIndex;\r\n    }\r\n\r\n    /**\r\n     * パーツの個数の取得\r\n     * @return パーツの個数\r\n     */\r\n    public getPartCount(): number {\r\n      const partCount: number = this._model.parts.count;\r\n      return partCount;\r\n    }\r\n\r\n    /**\r\n     * パーツの不透明度の設定(Index)\r\n     * @param partIndex パーツのインデックス\r\n     * @param opacity 不透明度\r\n     */\r\n    public setPartOpacityByIndex(partIndex: number, opacity: number): void {\r\n      if (this._notExistPartOpacities.isExist(partIndex)) {\r\n        this._notExistPartOpacities.setValue(partIndex, opacity);\r\n        return;\r\n      }\r\n\r\n      // インデックスの範囲内検知\r\n      CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n\r\n      this._partOpacities[partIndex] = opacity;\r\n    }\r\n\r\n    /**\r\n     * パーツの不透明度の設定(Id)\r\n     * @param partId パーツのID\r\n     * @param opacity パーツの不透明度\r\n     */\r\n    public setPartOpacityById(partId: CubismIdHandle, opacity: number): void {\r\n      // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n      const index: number = this.getPartIndex(partId);\r\n\r\n      if (index < 0) {\r\n        return; // パーツがないのでスキップ\r\n      }\r\n\r\n      this.setPartOpacityByIndex(index, opacity);\r\n    }\r\n\r\n    /**\r\n     * パーツの不透明度の取得(index)\r\n     * @param partIndex パーツのインデックス\r\n     * @return パーツの不透明度\r\n     */\r\n    public getPartOpacityByIndex(partIndex: number): number {\r\n      if (this._notExistPartOpacities.isExist(partIndex)) {\r\n        // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\r\n        return this._notExistPartOpacities.getValue(partIndex);\r\n      }\r\n\r\n      // インデックスの範囲内検知\r\n      CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n\r\n      return this._partOpacities[partIndex];\r\n    }\r\n\r\n    /**\r\n     * パーツの不透明度の取得(id)\r\n     * @param partId パーツのＩｄ\r\n     * @return パーツの不透明度\r\n     */\r\n    public getPartOpacityById(partId: CubismIdHandle): number {\r\n      // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n      const index: number = this.getPartIndex(partId);\r\n\r\n      if (index < 0) {\r\n        return 0; // パーツが無いのでスキップ\r\n      }\r\n\r\n      return this.getPartOpacityByIndex(index);\r\n    }\r\n\r\n    /**\r\n     * パラメータのインデックスの取得\r\n     * @param パラメータID\r\n     * @return パラメータのインデックス\r\n     */\r\n    public getParameterIndex(parameterId: CubismIdHandle): number {\r\n      let parameterIndex: number;\r\n      const idCount: number = this._model.parameters.count;\r\n\r\n      for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\r\n        if (parameterId != this._parameterIds.at(parameterIndex)) {\r\n          continue;\r\n        }\r\n\r\n        return parameterIndex;\r\n      }\r\n\r\n      // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\r\n      if (this._notExistParameterId.isExist(parameterId)) {\r\n        return this._notExistParameterId.getValue(parameterId);\r\n      }\r\n\r\n      // 非存在パラメータIDリストにない場合新しく要素を追加する\r\n      parameterIndex =\r\n        this._model.parameters.count + this._notExistParameterId.getSize();\r\n\r\n      this._notExistParameterId.setValue(parameterId, parameterIndex);\r\n      this._notExistParameterValues.appendKey(parameterIndex);\r\n\r\n      return parameterIndex;\r\n    }\r\n\r\n    /**\r\n     * パラメータの個数の取得\r\n     * @return パラメータの個数\r\n     */\r\n    public getParameterCount(): number {\r\n      return this._model.parameters.count;\r\n    }\r\n\r\n    /**\r\n     * パラメータの最大値の取得\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @return パラメータの最大値\r\n     */\r\n    public getParameterMaximumValue(parameterIndex: number): number {\r\n      return this._model.parameters.maximumValues[parameterIndex];\r\n    }\r\n\r\n    /**\r\n     * パラメータの最小値の取得\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @return パラメータの最小値\r\n     */\r\n    public getParameterMinimumValue(parameterIndex: number): number {\r\n      return this._model.parameters.minimumValues[parameterIndex];\r\n    }\r\n\r\n    /**\r\n     * パラメータのデフォルト値の取得\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @return パラメータのデフォルト値\r\n     */\r\n    public getParameterDefaultValue(parameterIndex: number): number {\r\n      return this._model.parameters.defaultValues[parameterIndex];\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の取得\r\n     * @param parameterIndex    パラメータのインデックス\r\n     * @return パラメータの値\r\n     */\r\n    public getParameterValueByIndex(parameterIndex: number): number {\r\n      if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n        return this._notExistParameterValues.getValue(parameterIndex);\r\n      }\r\n\r\n      // インデックスの範囲内検知\r\n      CSM_ASSERT(\r\n        0 <= parameterIndex && parameterIndex < this.getParameterCount()\r\n      );\r\n\r\n      return this._parameterValues[parameterIndex];\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の取得\r\n     * @param parameterId    パラメータのID\r\n     * @return パラメータの値\r\n     */\r\n    public getParameterValueById(parameterId: CubismIdHandle): number {\r\n      // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\r\n      const parameterIndex: number = this.getParameterIndex(parameterId);\r\n      return this.getParameterValueByIndex(parameterIndex);\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の設定\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @param value パラメータの値\r\n     * @param weight 重み\r\n     */\r\n    public setParameterValueByIndex(\r\n      parameterIndex: number,\r\n      value: number,\r\n      weight = 1.0\r\n    ): void {\r\n      if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n        this._notExistParameterValues.setValue(\r\n          parameterIndex,\r\n          weight == 1\r\n            ? value\r\n            : this._notExistParameterValues.getValue(parameterIndex) *\r\n                (1 - weight) +\r\n                value * weight\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      // インデックスの範囲内検知\r\n      CSM_ASSERT(\r\n        0 <= parameterIndex && parameterIndex < this.getParameterCount()\r\n      );\r\n\r\n      if (this._model.parameters.maximumValues[parameterIndex] < value) {\r\n        value = this._model.parameters.maximumValues[parameterIndex];\r\n      }\r\n      if (this._model.parameters.minimumValues[parameterIndex] > value) {\r\n        value = this._model.parameters.minimumValues[parameterIndex];\r\n      }\r\n\r\n      this._parameterValues[parameterIndex] =\r\n        weight == 1\r\n          ? value\r\n          : (this._parameterValues[parameterIndex] =\r\n              this._parameterValues[parameterIndex] * (1 - weight) +\r\n              value * weight);\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の設定\r\n     * @param parameterId パラメータのID\r\n     * @param value パラメータの値\r\n     * @param weight 重み\r\n     */\r\n    public setParameterValueById(\r\n      parameterId: CubismIdHandle,\r\n      value: number,\r\n      weight = 1.0\r\n    ): void {\r\n      const index: number = this.getParameterIndex(parameterId);\r\n      this.setParameterValueByIndex(index, value, weight);\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の加算(index)\r\n     * @param parameterIndex パラメータインデックス\r\n     * @param value 加算する値\r\n     * @param weight 重み\r\n     */\r\n    public addParameterValueByIndex(\r\n      parameterIndex: number,\r\n      value: number,\r\n      weight = 1.0\r\n    ): void {\r\n      this.setParameterValueByIndex(\r\n        parameterIndex,\r\n        this.getParameterValueByIndex(parameterIndex) + value * weight\r\n      );\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の加算(id)\r\n     * @param parameterId パラメータＩＤ\r\n     * @param value 加算する値\r\n     * @param weight 重み\r\n     */\r\n    public addParameterValueById(\r\n      parameterId: any,\r\n      value: number,\r\n      weight = 1.0\r\n    ): void {\r\n      const index: number = this.getParameterIndex(parameterId);\r\n      this.addParameterValueByIndex(index, value, weight);\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の乗算\r\n     * @param parameterId パラメータのID\r\n     * @param value 乗算する値\r\n     * @param weight 重み\r\n     */\r\n    public multiplyParameterValueById(\r\n      parameterId: CubismIdHandle,\r\n      value: number,\r\n      weight = 1.0\r\n    ): void {\r\n      const index: number = this.getParameterIndex(parameterId);\r\n      this.multiplyParameterValueByIndex(index, value, weight);\r\n    }\r\n\r\n    /**\r\n     * パラメータの値の乗算\r\n     * @param parameterIndex パラメータのインデックス\r\n     * @param value 乗算する値\r\n     * @param weight 重み\r\n     */\r\n    public multiplyParameterValueByIndex(\r\n      parameterIndex: number,\r\n      value: number,\r\n      weight = 1.0\r\n    ): void {\r\n      this.setParameterValueByIndex(\r\n        parameterIndex,\r\n        this.getParameterValueByIndex(parameterIndex) *\r\n          (1.0 + (value - 1.0) * weight)\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Drawableのインデックスの取得\r\n     * @param drawableId DrawableのID\r\n     * @return Drawableのインデックス\r\n     */\r\n    public getDrawableIndex(drawableId: CubismIdHandle): number {\r\n      const drawableCount = this._model.drawables.count;\r\n\r\n      for (\r\n        let drawableIndex = 0;\r\n        drawableIndex < drawableCount;\r\n        ++drawableIndex\r\n      ) {\r\n        if (this._drawableIds.at(drawableIndex) == drawableId) {\r\n          return drawableIndex;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * Drawableの個数の取得\r\n     * @return drawableの個数\r\n     */\r\n    public getDrawableCount(): number {\r\n      const drawableCount = this._model.drawables.count;\r\n      return drawableCount;\r\n    }\r\n\r\n    /**\r\n     * DrawableのIDを取得する\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのID\r\n     */\r\n    public getDrawableId(drawableIndex: number): CubismIdHandle {\r\n      const parameterIds: string[] = this._model.drawables.ids;\r\n      return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\r\n    }\r\n\r\n    /**\r\n     * Drawableの描画順リストの取得\r\n     * @return Drawableの描画順リスト\r\n     */\r\n    public getDrawableRenderOrders(): Int32Array {\r\n      const renderOrders: Int32Array = this._model.drawables.renderOrders;\r\n      return renderOrders;\r\n    }\r\n\r\n    /**\r\n     * Drawableのテクスチャインデックスリストの取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのテクスチャインデックスリスト\r\n     */\r\n    public getDrawableTextureIndices(drawableIndex: number): number {\r\n      const textureIndices: Int32Array = this._model.drawables.textureIndices;\r\n      return textureIndices[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * DrawableのVertexPositionsの変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\r\n     *\r\n     * @param   drawableIndex   Drawableのインデックス\r\n     * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\r\n     * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\r\n     */\r\n    public getDrawableDynamicFlagVertexPositionsDidChange(\r\n      drawableIndex: number\r\n    ): boolean {\r\n      const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n      return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\r\n        dynamicFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Drawableの頂点インデックスの個数の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点インデックスの個数\r\n     */\r\n    public getDrawableVertexIndexCount(drawableIndex: number): number {\r\n      const indexCounts: Int32Array = this._model.drawables.indexCounts;\r\n      return indexCounts[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * Drawableの頂点の個数の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点の個数\r\n     */\r\n    public getDrawableVertexCount(drawableIndex: number): number {\r\n      const vertexCounts = this._model.drawables.vertexCounts;\r\n      return vertexCounts[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * Drawableの頂点リストの取得\r\n     * @param drawableIndex drawableのインデックス\r\n     * @return drawableの頂点リスト\r\n     */\r\n    public getDrawableVertices(drawableIndex: number): Float32Array {\r\n      return this.getDrawableVertexPositions(drawableIndex);\r\n    }\r\n\r\n    /**\r\n     * Drawableの頂点インデックスリストの取得\r\n     * @param drarableIndex Drawableのインデックス\r\n     * @return drawableの頂点インデックスリスト\r\n     */\r\n    public getDrawableVertexIndices(drawableIndex: number): Uint16Array {\r\n      const indicesArray: Uint16Array[] = this._model.drawables.indices;\r\n      return indicesArray[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * Drawableの頂点リストの取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点リスト\r\n     */\r\n    public getDrawableVertexPositions(drawableIndex: number): Float32Array {\r\n      const verticesArray: Float32Array[] = this._model.drawables\r\n        .vertexPositions;\r\n      return verticesArray[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * Drawableの頂点のUVリストの取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの頂点UVリスト\r\n     */\r\n    public getDrawableVertexUvs(drawableIndex: number): Float32Array {\r\n      const uvsArray: Float32Array[] = this._model.drawables.vertexUvs;\r\n      return uvsArray[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * Drawableの不透明度の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableの不透明度\r\n     */\r\n    public getDrawableOpacity(drawableIndex: number): number {\r\n      const opacities: Float32Array = this._model.drawables.opacities;\r\n      return opacities[drawableIndex];\r\n    }\r\n\r\n    /**\r\n     * Drawableのカリング情報の取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのカリング情報\r\n     */\r\n    public getDrawableCulling(drawableIndex: number): boolean {\r\n      const constantFlags = this._model.drawables.constantFlags;\r\n\r\n      return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\r\n        constantFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Drawableのブレンドモードを取得\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return drawableのブレンドモード\r\n     */\r\n    public getDrawableBlendMode(drawableIndex: number): CubismBlendMode {\r\n      const constantFlags = this._model.drawables.constantFlags;\r\n\r\n      return Live2DCubismCore.Utils.hasBlendAdditiveBit(\r\n        constantFlags[drawableIndex]\r\n      )\r\n        ? CubismBlendMode.CubismBlendMode_Additive\r\n        : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\r\n            constantFlags[drawableIndex]\r\n          )\r\n        ? CubismBlendMode.CubismBlendMode_Multiplicative\r\n        : CubismBlendMode.CubismBlendMode_Normal;\r\n    }\r\n\r\n    /**\r\n     * Drawableのマスクの反転使用の取得\r\n     *\r\n     * Drawableのマスク使用時の反転設定を取得する。\r\n     * マスクを使用しない場合は無視される。\r\n     *\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return Drawableの反転設定\r\n     */\r\n    public getDrawableInvertedMaskBit(drawableIndex: number): boolean {\r\n      const constantFlags: Uint8Array = this._model.drawables.constantFlags;\r\n\r\n      return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\r\n        constantFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Drawableのクリッピングマスクリストの取得\r\n     * @return Drawableのクリッピングマスクリスト\r\n     */\r\n    public getDrawableMasks(): Int32Array[] {\r\n      const masks: Int32Array[] = this._model.drawables.masks;\r\n      return masks;\r\n    }\r\n\r\n    /**\r\n     * Drawableのクリッピングマスクの個数リストの取得\r\n     * @return Drawableのクリッピングマスクの個数リスト\r\n     */\r\n    public getDrawableMaskCounts(): Int32Array {\r\n      const maskCounts: Int32Array = this._model.drawables.maskCounts;\r\n      return maskCounts;\r\n    }\r\n\r\n    /**\r\n     * クリッピングマスクの使用状態\r\n     *\r\n     * @return true クリッピングマスクを使用している\r\n     * @return false クリッピングマスクを使用していない\r\n     */\r\n    public isUsingMasking(): boolean {\r\n      for (let d = 0; d < this._model.drawables.count; ++d) {\r\n        if (this._model.drawables.maskCounts[d] <= 0) {\r\n          continue;\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Drawableの表示情報を取得する\r\n     *\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return true Drawableが表示\r\n     * @return false Drawableが非表示\r\n     */\r\n    public getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean {\r\n      const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n      return Live2DCubismCore.Utils.hasIsVisibleBit(\r\n        dynamicFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * DrawableのDrawOrderの変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\r\n     * drawOrderはartMesh上で指定する0から1000の情報\r\n     * @param drawableIndex drawableのインデックス\r\n     * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\r\n     * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\r\n     */\r\n    public getDrawableDynamicFlagVisibilityDidChange(\r\n      drawableIndex: number\r\n    ): boolean {\r\n      const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n      return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\r\n        dynamicFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Drawableの不透明度の変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\r\n     *\r\n     * @param drawableIndex drawableのインデックス\r\n     * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\r\n     * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\r\n     */\r\n    public getDrawableDynamicFlagOpacityDidChange(\r\n      drawableIndex: number\r\n    ): boolean {\r\n      const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n      return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\r\n        dynamicFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Drawableの描画順序の変化情報の取得\r\n     *\r\n     * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\r\n     *\r\n     * @param drawableIndex Drawableのインデックス\r\n     * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\r\n     * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\r\n     */\r\n    public getDrawableDynamicFlagRenderOrderDidChange(\r\n      drawableIndex: number\r\n    ): boolean {\r\n      const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\r\n      return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\r\n        dynamicFlags[drawableIndex]\r\n      );\r\n    }\r\n\r\n    /**\r\n     * 保存されたパラメータの読み込み\r\n     */\r\n    public loadParameters(): void {\r\n      let parameterCount: number = this._model.parameters.count;\r\n      const savedParameterCount: number = this._savedParameters.getSize();\r\n\r\n      if (parameterCount > savedParameterCount) {\r\n        parameterCount = savedParameterCount;\r\n      }\r\n\r\n      for (let i = 0; i < parameterCount; ++i) {\r\n        this._parameterValues[i] = this._savedParameters.at(i);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 初期化する\r\n     */\r\n    public initialize(): void {\r\n      CSM_ASSERT(this._model);\r\n\r\n      this._parameterValues = this._model.parameters.values;\r\n      this._partOpacities = this._model.parts.opacities;\r\n      this._parameterMaximumValues = this._model.parameters.maximumValues;\r\n      this._parameterMinimumValues = this._model.parameters.minimumValues;\r\n\r\n      {\r\n        const parameterIds: string[] = this._model.parameters.ids;\r\n        const parameterCount: number = this._model.parameters.count;\r\n\r\n        this._parameterIds.prepareCapacity(parameterCount);\r\n        for (let i = 0; i < parameterCount; ++i) {\r\n          this._parameterIds.pushBack(\r\n            CubismFramework.getIdManager().getId(parameterIds[i])\r\n          );\r\n        }\r\n      }\r\n\r\n      {\r\n        const partIds: string[] = this._model.parts.ids;\r\n        const partCount: number = this._model.parts.count;\r\n\r\n        this._partIds.prepareCapacity(partCount);\r\n        for (let i = 0; i < partCount; ++i) {\r\n          this._partIds.pushBack(\r\n            CubismFramework.getIdManager().getId(partIds[i])\r\n          );\r\n        }\r\n      }\r\n\r\n      {\r\n        const drawableIds: string[] = this._model.drawables.ids;\r\n        const drawableCount: number = this._model.drawables.count;\r\n\r\n        this._drawableIds.prepareCapacity(drawableCount);\r\n        for (let i = 0; i < drawableCount; ++i) {\r\n          this._drawableIds.pushBack(\r\n            CubismFramework.getIdManager().getId(drawableIds[i])\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     * @param model モデル\r\n     */\r\n    public constructor(model: Live2DCubismCore.Model) {\r\n      this._model = model;\r\n      this._parameterValues = null;\r\n      this._parameterMaximumValues = null;\r\n      this._parameterMinimumValues = null;\r\n      this._partOpacities = null;\r\n      this._savedParameters = new csmVector<number>();\r\n      this._parameterIds = new csmVector<CubismIdHandle>();\r\n      this._drawableIds = new csmVector<CubismIdHandle>();\r\n      this._partIds = new csmVector<CubismIdHandle>();\r\n\r\n      this._notExistPartId = new csmMap<CubismIdHandle, number>();\r\n      this._notExistParameterId = new csmMap<CubismIdHandle, number>();\r\n      this._notExistParameterValues = new csmMap<number, number>();\r\n      this._notExistPartOpacities = new csmMap<number, number>();\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      this._model.release();\r\n      this._model = null;\r\n    }\r\n\r\n    private _notExistPartOpacities: csmMap<number, number>; // 存在していないパーツの不透明度のリスト\r\n    private _notExistPartId: csmMap<CubismIdHandle, number>; // 存在していないパーツIDのリスト\r\n\r\n    private _notExistParameterValues: csmMap<number, number>; // 存在していないパラメータの値のリスト\r\n    private _notExistParameterId: csmMap<CubismIdHandle, number>; // 存在していないパラメータIDのリスト\r\n\r\n    private _savedParameters: csmVector<number>; // 保存されたパラメータ\r\n\r\n    private _model: Live2DCubismCore.Model; // モデル\r\n\r\n    private _parameterValues: Float32Array; // パラメータの値のリスト\r\n    private _parameterMaximumValues: Float32Array; // パラメータの最大値のリスト\r\n    private _parameterMinimumValues: Float32Array; // パラメータの最小値のリスト\r\n\r\n    private _partOpacities: Float32Array; // パーツの不透明度のリスト\r\n\r\n    private _parameterIds: csmVector<CubismIdHandle>;\r\n    private _partIds: csmVector<CubismIdHandle>;\r\n    private _drawableIds: csmVector<CubismIdHandle>;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}