{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismmatrix44 } from './cubismmatrix44';\nvar CubismMatrix44 = cubismmatrix44.CubismMatrix44;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismViewMatrix extends CubismMatrix44 {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      super();\n      this._screenLeft = void 0;\n      // デバイスに対応する論理座標上の範囲（左辺X軸位置）\n      this._screenRight = void 0;\n      // デバイスに対応する論理座標上の範囲（右辺X軸位置）\n      this._screenTop = void 0;\n      // デバイスに対応する論理座標上の範囲（上辺Y軸位置）\n      this._screenBottom = void 0;\n      // デバイスに対応する論理座標上の範囲（下辺Y軸位置）\n      this._maxLeft = void 0;\n      // 論理座標上の移動可能範囲（左辺X軸位置）\n      this._maxRight = void 0;\n      // 論理座標上の移動可能範囲（右辺X軸位置）\n      this._maxTop = void 0;\n      // 論理座標上の移動可能範囲（上辺Y軸位置）\n      this._maxBottom = void 0;\n      // 論理座標上の移動可能範囲（下辺Y軸位置）\n      this._maxScale = void 0;\n      // 拡大率の最大値\n      this._minScale = void 0;\n      this._screenLeft = 0.0;\n      this._screenRight = 0.0;\n      this._screenTop = 0.0;\n      this._screenBottom = 0.0;\n      this._maxLeft = 0.0;\n      this._maxRight = 0.0;\n      this._maxTop = 0.0;\n      this._maxBottom = 0.0;\n      this._maxScale = 0.0;\n      this._minScale = 0.0;\n    }\n\n    /**\r\n     * 移動を調整\r\n     *\r\n     * @param x X軸の移動量\r\n     * @param y Y軸の移動量\r\n     */\n    adjustTranslate(x, y) {\n      if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\n        x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\n      }\n      if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {\n        x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\n      }\n      if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\n        y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\n      }\n      if (this._tr[5] * this._maxBottom + (this._tr[13] + y) > this._screenBottom) {\n        y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\n      }\n      const tr1 = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, 0.0, 1.0]);\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    }\n\n    /**\r\n     * 拡大率を調整\r\n     *\r\n     * @param cx 拡大を行うX軸の中心位置\r\n     * @param cy 拡大を行うY軸の中心位置\r\n     * @param scale 拡大率\r\n     */\n    adjustScale(cx, cy, scale) {\n      const maxScale = this.getMaxScale();\n      const minScale = this.getMinScale();\n      const targetScale = scale * this._tr[0];\n      if (targetScale < minScale) {\n        if (this._tr[0] > 0.0) {\n          scale = minScale / this._tr[0];\n        }\n      } else if (targetScale > maxScale) {\n        if (this._tr[0] > 0.0) {\n          scale = maxScale / this._tr[0];\n        }\n      }\n      const tr1 = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, cx, cy, 0.0, 1.0]);\n      const tr2 = new Float32Array([scale, 0.0, 0.0, 0.0, 0.0, scale, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n      const tr3 = new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -cx, -cy, 0.0, 1.0]);\n      CubismMatrix44.multiply(tr3, this._tr, this._tr);\n      CubismMatrix44.multiply(tr2, this._tr, this._tr);\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\n    }\n\n    /**\r\n     * デバイスに対応する論理座養生の範囲の設定\r\n     *\r\n     * @param left      左辺のX軸の位置\r\n     * @param right     右辺のX軸の位置\r\n     * @param bottom    下辺のY軸の位置\r\n     * @param top       上辺のY軸の位置\r\n     */\n    setScreenRect(left, right, bottom, top) {\n      this._screenLeft = left;\n      this._screenRight = right;\n      this._screenBottom = bottom;\n      this._screenTop = top;\n    }\n\n    /**\r\n     * デバイスに対応する論理座標上の移動可能範囲の設定\r\n     * @param left      左辺のX軸の位置\r\n     * @param right     右辺のX軸の位置\r\n     * @param bottom    下辺のY軸の位置\r\n     * @param top       上辺のY軸の位置\r\n     */\n    setMaxScreenRect(left, right, bottom, top) {\n      this._maxLeft = left;\n      this._maxRight = right;\n      this._maxTop = top;\n      this._maxBottom = bottom;\n    }\n\n    /**\r\n     * 最大拡大率の設定\r\n     * @param maxScale 最大拡大率\r\n     */\n    setMaxScale(maxScale) {\n      this._maxScale = maxScale;\n    }\n\n    /**\r\n     * 最小拡大率の設定\r\n     * @param minScale 最小拡大率\r\n     */\n    setMinScale(minScale) {\n      this._minScale = minScale;\n    }\n\n    /**\r\n     * 最大拡大率の取得\r\n     * @return 最大拡大率\r\n     */\n    getMaxScale() {\n      return this._maxScale;\n    }\n\n    /**\r\n     * 最小拡大率の取得\r\n     * @return 最小拡大率\r\n     */\n    getMinScale() {\n      return this._minScale;\n    }\n\n    /**\r\n     * 拡大率が最大になっているかを確認する\r\n     *\r\n     * @return true 拡大率は最大\r\n     * @return false 拡大率は最大ではない\r\n     */\n    isMaxScale() {\n      return this.getScaleX() >= this._maxScale;\n    }\n\n    /**\r\n     * 拡大率が最小になっているかを確認する\r\n     *\r\n     * @return true 拡大率は最小\r\n     * @return false 拡大率は最小ではない\r\n     */\n    isMinScale() {\n      return this.getScaleX() <= this._minScale;\n    }\n\n    /**\r\n     * デバイスに対応する論理座標の左辺のＸ軸位置を取得する\r\n     * @return デバイスに対応する論理座標の左辺のX軸位置\r\n     */\n    getScreenLeft() {\n      return this._screenLeft;\n    }\n\n    /**\r\n     * デバイスに対応する論理座標の右辺のＸ軸位置を取得する\r\n     * @return デバイスに対応する論理座標の右辺のX軸位置\r\n     */\n    getScreenRight() {\n      return this._screenRight;\n    }\n\n    /**\r\n     * デバイスに対応する論理座標の下辺のY軸位置を取得する\r\n     * @return デバイスに対応する論理座標の下辺のY軸位置\r\n     */\n    getScreenBottom() {\n      return this._screenBottom;\n    }\n\n    /**\r\n     * デバイスに対応する論理座標の上辺のY軸位置を取得する\r\n     * @return デバイスに対応する論理座標の上辺のY軸位置\r\n     */\n    getScreenTop() {\n      return this._screenTop;\n    }\n\n    /**\r\n     * 左辺のX軸位置の最大値の取得\r\n     * @return 左辺のX軸位置の最大値\r\n     */\n    getMaxLeft() {\n      return this._maxLeft;\n    }\n\n    /**\r\n     * 右辺のX軸位置の最大値の取得\r\n     * @return 右辺のX軸位置の最大値\r\n     */\n    getMaxRight() {\n      return this._maxRight;\n    }\n\n    /**\r\n     * 下辺のY軸位置の最大値の取得\r\n     * @return 下辺のY軸位置の最大値\r\n     */\n    getMaxBottom() {\n      return this._maxBottom;\n    }\n\n    /**\r\n     * 上辺のY軸位置の最大値の取得\r\n     * @return 上辺のY軸位置の最大値\r\n     */\n    getMaxTop() {\n      return this._maxTop;\n    }\n\n    // 拡大率の最小値\n  }\n  _Live2DCubismFramework.CubismViewMatrix = CubismViewMatrix;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismmatrix44","CubismMatrix44","_Live2DCubismFramework","CubismViewMatrix","constructor","_screenLeft","_screenRight","_screenTop","_screenBottom","_maxLeft","_maxRight","_maxTop","_maxBottom","_maxScale","_minScale","adjustTranslate","x","y","_tr","tr1","Float32Array","multiply","adjustScale","cx","cy","scale","maxScale","getMaxScale","minScale","getMinScale","targetScale","tr2","tr3","setScreenRect","left","right","bottom","top","setMaxScreenRect","setMaxScale","setMinScale","isMaxScale","getScaleX","isMinScale","getScreenLeft","getScreenRight","getScreenBottom","getScreenTop","getMaxLeft","getMaxRight","getMaxBottom","getMaxTop"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/math/cubismviewmatrix.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismmatrix44 } from './cubismmatrix44';\r\nimport CubismMatrix44 = cubismmatrix44.CubismMatrix44;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * カメラの位置変更に使うと便利な4x4行列\r\n   *\r\n   * カメラの位置変更に使うと便利な4x4行列のクラス。\r\n   */\r\n  export class CubismViewMatrix extends CubismMatrix44 {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      super();\r\n      this._screenLeft = 0.0;\r\n      this._screenRight = 0.0;\r\n      this._screenTop = 0.0;\r\n      this._screenBottom = 0.0;\r\n      this._maxLeft = 0.0;\r\n      this._maxRight = 0.0;\r\n      this._maxTop = 0.0;\r\n      this._maxBottom = 0.0;\r\n      this._maxScale = 0.0;\r\n      this._minScale = 0.0;\r\n    }\r\n\r\n    /**\r\n     * 移動を調整\r\n     *\r\n     * @param x X軸の移動量\r\n     * @param y Y軸の移動量\r\n     */\r\n    public adjustTranslate(x: number, y: number): void {\r\n      if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\r\n        x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\r\n      }\r\n\r\n      if (\r\n        this._tr[0] * this._maxRight + (this._tr[12] + x) <\r\n        this._screenRight\r\n      ) {\r\n        x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\r\n      }\r\n\r\n      if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\r\n        y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\r\n      }\r\n\r\n      if (\r\n        this._tr[5] * this._maxBottom + (this._tr[13] + y) >\r\n        this._screenBottom\r\n      ) {\r\n        y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\r\n      }\r\n\r\n      const tr1: Float32Array = new Float32Array([\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        x,\r\n        y,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n    }\r\n\r\n    /**\r\n     * 拡大率を調整\r\n     *\r\n     * @param cx 拡大を行うX軸の中心位置\r\n     * @param cy 拡大を行うY軸の中心位置\r\n     * @param scale 拡大率\r\n     */\r\n    public adjustScale(cx: number, cy: number, scale: number): void {\r\n      const maxScale: number = this.getMaxScale();\r\n      const minScale: number = this.getMinScale();\r\n\r\n      const targetScale = scale * this._tr[0];\r\n\r\n      if (targetScale < minScale) {\r\n        if (this._tr[0] > 0.0) {\r\n          scale = minScale / this._tr[0];\r\n        }\r\n      } else if (targetScale > maxScale) {\r\n        if (this._tr[0] > 0.0) {\r\n          scale = maxScale / this._tr[0];\r\n        }\r\n      }\r\n\r\n      const tr1: Float32Array = new Float32Array([\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        cx,\r\n        cy,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      const tr2: Float32Array = new Float32Array([\r\n        scale,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        scale,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      const tr3: Float32Array = new Float32Array([\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n        0.0,\r\n        -cx,\r\n        -cy,\r\n        0.0,\r\n        1.0\r\n      ]);\r\n\r\n      CubismMatrix44.multiply(tr3, this._tr, this._tr);\r\n      CubismMatrix44.multiply(tr2, this._tr, this._tr);\r\n      CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n    }\r\n\r\n    /**\r\n     * デバイスに対応する論理座養生の範囲の設定\r\n     *\r\n     * @param left      左辺のX軸の位置\r\n     * @param right     右辺のX軸の位置\r\n     * @param bottom    下辺のY軸の位置\r\n     * @param top       上辺のY軸の位置\r\n     */\r\n    public setScreenRect(\r\n      left: number,\r\n      right: number,\r\n      bottom: number,\r\n      top: number\r\n    ): void {\r\n      this._screenLeft = left;\r\n      this._screenRight = right;\r\n      this._screenBottom = bottom;\r\n      this._screenTop = top;\r\n    }\r\n\r\n    /**\r\n     * デバイスに対応する論理座標上の移動可能範囲の設定\r\n     * @param left      左辺のX軸の位置\r\n     * @param right     右辺のX軸の位置\r\n     * @param bottom    下辺のY軸の位置\r\n     * @param top       上辺のY軸の位置\r\n     */\r\n    public setMaxScreenRect(\r\n      left: number,\r\n      right: number,\r\n      bottom: number,\r\n      top: number\r\n    ): void {\r\n      this._maxLeft = left;\r\n      this._maxRight = right;\r\n      this._maxTop = top;\r\n      this._maxBottom = bottom;\r\n    }\r\n\r\n    /**\r\n     * 最大拡大率の設定\r\n     * @param maxScale 最大拡大率\r\n     */\r\n    public setMaxScale(maxScale: number): void {\r\n      this._maxScale = maxScale;\r\n    }\r\n\r\n    /**\r\n     * 最小拡大率の設定\r\n     * @param minScale 最小拡大率\r\n     */\r\n    public setMinScale(minScale: number): void {\r\n      this._minScale = minScale;\r\n    }\r\n\r\n    /**\r\n     * 最大拡大率の取得\r\n     * @return 最大拡大率\r\n     */\r\n    public getMaxScale(): number {\r\n      return this._maxScale;\r\n    }\r\n\r\n    /**\r\n     * 最小拡大率の取得\r\n     * @return 最小拡大率\r\n     */\r\n    public getMinScale(): number {\r\n      return this._minScale;\r\n    }\r\n\r\n    /**\r\n     * 拡大率が最大になっているかを確認する\r\n     *\r\n     * @return true 拡大率は最大\r\n     * @return false 拡大率は最大ではない\r\n     */\r\n    public isMaxScale(): boolean {\r\n      return this.getScaleX() >= this._maxScale;\r\n    }\r\n\r\n    /**\r\n     * 拡大率が最小になっているかを確認する\r\n     *\r\n     * @return true 拡大率は最小\r\n     * @return false 拡大率は最小ではない\r\n     */\r\n    public isMinScale(): boolean {\r\n      return this.getScaleX() <= this._minScale;\r\n    }\r\n\r\n    /**\r\n     * デバイスに対応する論理座標の左辺のＸ軸位置を取得する\r\n     * @return デバイスに対応する論理座標の左辺のX軸位置\r\n     */\r\n    public getScreenLeft(): number {\r\n      return this._screenLeft;\r\n    }\r\n\r\n    /**\r\n     * デバイスに対応する論理座標の右辺のＸ軸位置を取得する\r\n     * @return デバイスに対応する論理座標の右辺のX軸位置\r\n     */\r\n    public getScreenRight(): number {\r\n      return this._screenRight;\r\n    }\r\n\r\n    /**\r\n     * デバイスに対応する論理座標の下辺のY軸位置を取得する\r\n     * @return デバイスに対応する論理座標の下辺のY軸位置\r\n     */\r\n    public getScreenBottom(): number {\r\n      return this._screenBottom;\r\n    }\r\n\r\n    /**\r\n     * デバイスに対応する論理座標の上辺のY軸位置を取得する\r\n     * @return デバイスに対応する論理座標の上辺のY軸位置\r\n     */\r\n    public getScreenTop(): number {\r\n      return this._screenTop;\r\n    }\r\n\r\n    /**\r\n     * 左辺のX軸位置の最大値の取得\r\n     * @return 左辺のX軸位置の最大値\r\n     */\r\n    public getMaxLeft(): number {\r\n      return this._maxLeft;\r\n    }\r\n\r\n    /**\r\n     * 右辺のX軸位置の最大値の取得\r\n     * @return 右辺のX軸位置の最大値\r\n     */\r\n    public getMaxRight(): number {\r\n      return this._maxRight;\r\n    }\r\n\r\n    /**\r\n     * 下辺のY軸位置の最大値の取得\r\n     * @return 下辺のY軸位置の最大値\r\n     */\r\n    public getMaxBottom(): number {\r\n      return this._maxBottom;\r\n    }\r\n\r\n    /**\r\n     * 上辺のY軸位置の最大値の取得\r\n     * @return 上辺のY軸位置の最大値\r\n     */\r\n    public getMaxTop(): number {\r\n      return this._maxTop;\r\n    }\r\n\r\n    private _screenLeft: number; // デバイスに対応する論理座標上の範囲（左辺X軸位置）\r\n    private _screenRight: number; // デバイスに対応する論理座標上の範囲（右辺X軸位置）\r\n    private _screenTop: number; // デバイスに対応する論理座標上の範囲（上辺Y軸位置）\r\n    private _screenBottom: number; // デバイスに対応する論理座標上の範囲（下辺Y軸位置）\r\n    private _maxLeft: number; // 論理座標上の移動可能範囲（左辺X軸位置）\r\n    private _maxRight: number; // 論理座標上の移動可能範囲（右辺X軸位置）\r\n    private _maxTop: number; // 論理座標上の移動可能範囲（上辺Y軸位置）\r\n    private _maxBottom: number; // 論理座標上の移動可能範囲（下辺Y軸位置）\r\n    private _maxScale: number; // 拡大率の最大値\r\n    private _minScale: number; // 拡大率の最小値\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}