{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 物理演算の適用先の種類\n */\nexport let CubismPhysicsTargetType = /*#__PURE__*/function (CubismPhysicsTargetType) {\n  CubismPhysicsTargetType[CubismPhysicsTargetType[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\n  return CubismPhysicsTargetType;\n}({}); // パラメータに対して適用\n\n/**\n * 物理演算の入力の種類\n */\nexport let CubismPhysicsSource = /*#__PURE__*/function (CubismPhysicsSource) {\n  CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\n  CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\n  CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\n  return CubismPhysicsSource;\n}({}); // 角度から\n\n/**\n * @brief 物理演算で使用する外部の力\n *\n * 物理演算で使用する外部の力。\n */\nexport class PhysicsJsonEffectiveForces {\n  constructor() {\n    this.gravity = void 0;\n    // 重力\n    this.wind = void 0;\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n\n  // 風\n}\n\n/**\n * 物理演算のパラメータ情報\n */\nexport class CubismPhysicsParameter {\n  constructor() {\n    this.id = void 0;\n    // パラメータ\n    this.targetType = void 0;\n  } // 適用先の種類\n}\n\n/**\n * 物理演算の正規化情報\n */\nexport class CubismPhysicsNormalization {\n  constructor() {\n    this.minimum = void 0;\n    // 最大値\n    this.maximum = void 0;\n    // 最小値\n    this.defalut = void 0;\n  } // デフォルト値\n}\n\n/**\n * 物理演算の演算委使用する物理点の情報\n */\nexport class CubismPhysicsParticle {\n  constructor() {\n    this.initialPosition = void 0;\n    // 初期位置\n    this.mobility = void 0;\n    // 動きやすさ\n    this.delay = void 0;\n    // 遅れ\n    this.acceleration = void 0;\n    // 加速度\n    this.radius = void 0;\n    // 距離\n    this.position = void 0;\n    // 現在の位置\n    this.lastPosition = void 0;\n    // 最後の位置\n    this.lastGravity = void 0;\n    // 最後の重力\n    this.force = void 0;\n    // 現在かかっている力\n    this.velocity = void 0;\n    this.initialPosition = new CubismVector2(0, 0);\n    this.position = new CubismVector2(0, 0);\n    this.lastPosition = new CubismVector2(0, 0);\n    this.lastGravity = new CubismVector2(0, 0);\n    this.force = new CubismVector2(0, 0);\n    this.velocity = new CubismVector2(0, 0);\n  }\n\n  // 現在の速度\n}\n\n/**\n * 物理演算の物理点の管理\n */\nexport class CubismPhysicsSubRig {\n  constructor() {\n    this.inputCount = void 0;\n    // 入力の個数\n    this.outputCount = void 0;\n    // 出力の個数\n    this.particleCount = void 0;\n    // 物理点の個数\n    this.baseInputIndex = void 0;\n    // 入力の最初のインデックス\n    this.baseOutputIndex = void 0;\n    // 出力の最初のインデックス\n    this.baseParticleIndex = void 0;\n    // 物理点の最初のインデックス\n    this.normalizationPosition = void 0;\n    // 正規化された位置\n    this.normalizationAngle = void 0;\n    this.normalizationPosition = new CubismPhysicsNormalization();\n    this.normalizationAngle = new CubismPhysicsNormalization();\n  }\n\n  // 正規化された角度\n}\n\n/**\n * 正規化されたパラメータの取得関数の宣言\n * @param targetTranslation     // 演算結果の移動値\n * @param targetAngle           // 演算結果の角度\n * @param value                 // パラメータの値\n * @param parameterMinimunValue // パラメータの最小値\n * @param parameterMaximumValue // パラメータの最大値\n * @param parameterDefaultValue // パラメータのデフォルト値\n * @param normalizationPosition // 正規化された位置\n * @param normalizationAngle    // 正規化された角度\n * @param isInverted            // 値が反転されているか？\n * @param weight                // 重み\n */\n\n/**\n * 物理演算の値の取得関数の宣言\n * @param translation 移動値\n * @param particles 物理点のリスト\n * @param isInverted 値が反映されているか\n * @param parentGravity 重力\n * @return 値\n */\n\n/**\n * 物理演算のスケールの取得関数の宣言\n * @param translationScale 移動値のスケール\n * @param angleScale    角度のスケール\n * @return スケール値\n */\n\n/**\n * 物理演算の入力情報\n */\nexport class CubismPhysicsInput {\n  constructor() {\n    this.source = void 0;\n    // 入力元のパラメータ\n    this.sourceParameterIndex = void 0;\n    // 入力元のパラメータのインデックス\n    this.weight = void 0;\n    // 重み\n    this.type = void 0;\n    // 入力の種類\n    this.reflect = void 0;\n    // 値が反転されているかどうか\n    this.getNormalizedParameterValue = void 0;\n    this.source = new CubismPhysicsParameter();\n  }\n\n  // 正規化されたパラメータ値の取得関数\n}\n\n/**\n * @brief 物理演算の出力情報\n *\n * 物理演算の出力情報。\n */\nexport class CubismPhysicsOutput {\n  constructor() {\n    this.destination = void 0;\n    // 出力先のパラメータ\n    this.destinationParameterIndex = void 0;\n    // 出力先のパラメータのインデックス\n    this.vertexIndex = void 0;\n    // 振り子のインデックス\n    this.translationScale = void 0;\n    // 移動値のスケール\n    this.angleScale = void 0;\n    // 角度のスケール\n    this.weight = void 0;\n    // 重み\n    this.type = void 0;\n    // 出力の種類\n    this.reflect = void 0;\n    // 値が反転されているかどうか\n    this.valueBelowMinimum = void 0;\n    // 最小値を下回った時の値\n    this.valueExceededMaximum = void 0;\n    // 最大値をこえた時の値\n    this.getValue = void 0;\n    // 物理演算の値の取得関数\n    this.getScale = void 0;\n    this.destination = new CubismPhysicsParameter();\n    this.translationScale = new CubismVector2(0, 0);\n  }\n\n  // 物理演算のスケール値の取得関数\n}\n\n/**\n * @brief 物理演算のデータ\n *\n * 物理演算のデータ。\n */\nexport class CubismPhysicsRig {\n  constructor() {\n    this.subRigCount = void 0;\n    // 物理演算の物理点の個数\n    this.settings = void 0;\n    // 物理演算の物理点の管理のリスト\n    this.inputs = void 0;\n    // 物理演算の入力のリスト\n    this.outputs = void 0;\n    // 物理演算の出力のリスト\n    this.particles = void 0;\n    // 物理演算の物理点のリスト\n    this.gravity = void 0;\n    // 重力\n    this.wind = void 0;\n    // 風\n    this.fps = void 0;\n    this.settings = new csmVector();\n    this.inputs = new csmVector();\n    this.outputs = new csmVector();\n    this.particles = new csmVector();\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n    this.fps = 0.0;\n  }\n\n  //物理演算動作FPS\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsinternal';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismPhysicsInput = _Live2DCubismFramework.CubismPhysicsInput = $.CubismPhysicsInput;\n  const CubismPhysicsNormalization = _Live2DCubismFramework.CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  const CubismPhysicsOutput = _Live2DCubismFramework.CubismPhysicsOutput = $.CubismPhysicsOutput;\n  const CubismPhysicsParameter = _Live2DCubismFramework.CubismPhysicsParameter = $.CubismPhysicsParameter;\n  const CubismPhysicsParticle = _Live2DCubismFramework.CubismPhysicsParticle = $.CubismPhysicsParticle;\n  const CubismPhysicsRig = _Live2DCubismFramework.CubismPhysicsRig = $.CubismPhysicsRig;\n  const CubismPhysicsSource = _Live2DCubismFramework.CubismPhysicsSource = $.CubismPhysicsSource;\n  const CubismPhysicsSubRig = _Live2DCubismFramework.CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  const CubismPhysicsTargetType = _Live2DCubismFramework.CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  const PhysicsJsonEffectiveForces = _Live2DCubismFramework.PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismVector2","csmVector","CubismPhysicsTargetType","CubismPhysicsSource","PhysicsJsonEffectiveForces","constructor","gravity","wind","CubismPhysicsParameter","id","targetType","CubismPhysicsNormalization","minimum","maximum","defalut","CubismPhysicsParticle","initialPosition","mobility","delay","acceleration","radius","position","lastPosition","lastGravity","force","velocity","CubismPhysicsSubRig","inputCount","outputCount","particleCount","baseInputIndex","baseOutputIndex","baseParticleIndex","normalizationPosition","normalizationAngle","CubismPhysicsInput","source","sourceParameterIndex","weight","type","reflect","getNormalizedParameterValue","CubismPhysicsOutput","destination","destinationParameterIndex","vertexIndex","translationScale","angleScale","valueBelowMinimum","valueExceededMaximum","getValue","getScale","CubismPhysicsRig","subRigCount","settings","inputs","outputs","particles","fps","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Samples/TypeScript/Demo/Framework/src/physics/cubismphysicsinternal.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 物理演算の適用先の種類\n */\nexport enum CubismPhysicsTargetType {\n  CubismPhysicsTargetType_Parameter, // パラメータに対して適用\n}\n\n/**\n * 物理演算の入力の種類\n */\nexport enum CubismPhysicsSource {\n  CubismPhysicsSource_X, // X軸の位置から\n  CubismPhysicsSource_Y, // Y軸の位置から\n  CubismPhysicsSource_Angle, // 角度から\n}\n\n/**\n * @brief 物理演算で使用する外部の力\n *\n * 物理演算で使用する外部の力。\n */\nexport class PhysicsJsonEffectiveForces {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n  gravity: CubismVector2; // 重力\n  wind: CubismVector2; // 風\n}\n\n/**\n * 物理演算のパラメータ情報\n */\nexport class CubismPhysicsParameter {\n  id: CubismIdHandle; // パラメータ\n  targetType: CubismPhysicsTargetType; // 適用先の種類\n}\n\n/**\n * 物理演算の正規化情報\n */\nexport class CubismPhysicsNormalization {\n  minimum: number; // 最大値\n  maximum: number; // 最小値\n  defalut: number; // デフォルト値\n}\n\n/**\n * 物理演算の演算委使用する物理点の情報\n */\nexport class CubismPhysicsParticle {\n  constructor() {\n    this.initialPosition = new CubismVector2(0, 0);\n    this.position = new CubismVector2(0, 0);\n    this.lastPosition = new CubismVector2(0, 0);\n    this.lastGravity = new CubismVector2(0, 0);\n    this.force = new CubismVector2(0, 0);\n    this.velocity = new CubismVector2(0, 0);\n  }\n\n  initialPosition: CubismVector2; // 初期位置\n  mobility: number; // 動きやすさ\n  delay: number; // 遅れ\n  acceleration: number; // 加速度\n  radius: number; // 距離\n  position: CubismVector2; // 現在の位置\n  lastPosition: CubismVector2; // 最後の位置\n  lastGravity: CubismVector2; // 最後の重力\n  force: CubismVector2; // 現在かかっている力\n  velocity: CubismVector2; // 現在の速度\n}\n\n/**\n * 物理演算の物理点の管理\n */\nexport class CubismPhysicsSubRig {\n  constructor() {\n    this.normalizationPosition = new CubismPhysicsNormalization();\n    this.normalizationAngle = new CubismPhysicsNormalization();\n  }\n  inputCount: number; // 入力の個数\n  outputCount: number; // 出力の個数\n  particleCount: number; // 物理点の個数\n  baseInputIndex: number; // 入力の最初のインデックス\n  baseOutputIndex: number; // 出力の最初のインデックス\n  baseParticleIndex: number; // 物理点の最初のインデックス\n  normalizationPosition: CubismPhysicsNormalization; // 正規化された位置\n  normalizationAngle: CubismPhysicsNormalization; // 正規化された角度\n}\n\n/**\n * 正規化されたパラメータの取得関数の宣言\n * @param targetTranslation     // 演算結果の移動値\n * @param targetAngle           // 演算結果の角度\n * @param value                 // パラメータの値\n * @param parameterMinimunValue // パラメータの最小値\n * @param parameterMaximumValue // パラメータの最大値\n * @param parameterDefaultValue // パラメータのデフォルト値\n * @param normalizationPosition // 正規化された位置\n * @param normalizationAngle    // 正規化された角度\n * @param isInverted            // 値が反転されているか？\n * @param weight                // 重み\n */\nexport interface normalizedPhysicsParameterValueGetter {\n  (\n    targetTranslation: CubismVector2,\n    targetAngle: { angle: number },\n    value: number,\n    parameterMinimunValue: number,\n    parameterMaximumValue: number,\n    parameterDefaultValue: number,\n    normalizationPosition: CubismPhysicsNormalization,\n    normalizationAngle: CubismPhysicsNormalization,\n    isInverted: boolean,\n    weight: number\n  ): void;\n}\n\n/**\n * 物理演算の値の取得関数の宣言\n * @param translation 移動値\n * @param particles 物理点のリスト\n * @param isInverted 値が反映されているか\n * @param parentGravity 重力\n * @return 値\n */\nexport interface physicsValueGetter {\n  (\n    translation: CubismVector2,\n    particles: CubismPhysicsParticle[],\n    particleIndex: number,\n    isInverted: boolean,\n    parentGravity: CubismVector2\n  ): number;\n}\n\n/**\n * 物理演算のスケールの取得関数の宣言\n * @param translationScale 移動値のスケール\n * @param angleScale    角度のスケール\n * @return スケール値\n */\nexport interface physicsScaleGetter {\n  (translationScale: CubismVector2, angleScale: number): number;\n}\n\n/**\n * 物理演算の入力情報\n */\nexport class CubismPhysicsInput {\n  constructor() {\n    this.source = new CubismPhysicsParameter();\n  }\n  source: CubismPhysicsParameter; // 入力元のパラメータ\n  sourceParameterIndex: number; // 入力元のパラメータのインデックス\n  weight: number; // 重み\n  type: number; // 入力の種類\n  reflect: boolean; // 値が反転されているかどうか\n  getNormalizedParameterValue: normalizedPhysicsParameterValueGetter; // 正規化されたパラメータ値の取得関数\n}\n\n/**\n * @brief 物理演算の出力情報\n *\n * 物理演算の出力情報。\n */\nexport class CubismPhysicsOutput {\n  constructor() {\n    this.destination = new CubismPhysicsParameter();\n    this.translationScale = new CubismVector2(0, 0);\n  }\n\n  destination: CubismPhysicsParameter; // 出力先のパラメータ\n  destinationParameterIndex: number; // 出力先のパラメータのインデックス\n  vertexIndex: number; // 振り子のインデックス\n  translationScale: CubismVector2; // 移動値のスケール\n  angleScale: number; // 角度のスケール\n  weight: number; // 重み\n  type: CubismPhysicsSource; // 出力の種類\n  reflect: boolean; // 値が反転されているかどうか\n  valueBelowMinimum: number; // 最小値を下回った時の値\n  valueExceededMaximum: number; // 最大値をこえた時の値\n  getValue: physicsValueGetter; // 物理演算の値の取得関数\n  getScale: physicsScaleGetter; // 物理演算のスケール値の取得関数\n}\n\n/**\n * @brief 物理演算のデータ\n *\n * 物理演算のデータ。\n */\nexport class CubismPhysicsRig {\n  constructor() {\n    this.settings = new csmVector<CubismPhysicsSubRig>();\n    this.inputs = new csmVector<CubismPhysicsInput>();\n    this.outputs = new csmVector<CubismPhysicsOutput>();\n    this.particles = new csmVector<CubismPhysicsParticle>();\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n    this.fps = 0.0;\n  }\n\n  subRigCount: number; // 物理演算の物理点の個数\n  settings: csmVector<CubismPhysicsSubRig>; // 物理演算の物理点の管理のリスト\n  inputs: csmVector<CubismPhysicsInput>; // 物理演算の入力のリスト\n  outputs: csmVector<CubismPhysicsOutput>; // 物理演算の出力のリスト\n  particles: csmVector<CubismPhysicsParticle>; // 物理演算の物理点のリスト\n  gravity: CubismVector2; // 重力\n  wind: CubismVector2; // 風\n  fps: number; //物理演算動作FPS\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsinternal';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysicsInput = $.CubismPhysicsInput;\n  export type CubismPhysicsInput = $.CubismPhysicsInput;\n  export const CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  export type CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  export const CubismPhysicsOutput = $.CubismPhysicsOutput;\n  export type CubismPhysicsOutput = $.CubismPhysicsOutput;\n  export const CubismPhysicsParameter = $.CubismPhysicsParameter;\n  export type CubismPhysicsParameter = $.CubismPhysicsParameter;\n  export const CubismPhysicsParticle = $.CubismPhysicsParticle;\n  export type CubismPhysicsParticle = $.CubismPhysicsParticle;\n  export const CubismPhysicsRig = $.CubismPhysicsRig;\n  export type CubismPhysicsRig = $.CubismPhysicsRig;\n  export const CubismPhysicsSource = $.CubismPhysicsSource;\n  export type CubismPhysicsSource = $.CubismPhysicsSource;\n  export const CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  export type CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  export const CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  export type CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  export const PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n  export type PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n  export type normalizedPhysicsParameterValueGetter =\n    $.normalizedPhysicsParameterValueGetter;\n  export type physicsScaleGetter = $.physicsScaleGetter;\n  export type physicsValueGetter = $.physicsValueGetter;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}