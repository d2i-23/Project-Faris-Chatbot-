{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nimport { Live2DCubismFramework as cubismmotionmanager } from '../motion/cubismmotionmanager';\nimport { Live2DCubismFramework as cubismtargetpoint } from '../math/cubismtargetpoint';\nimport { Live2DCubismFramework as cubismmodelmatrix } from '../math/cubismmodelmatrix';\nimport { Live2DCubismFramework as cubismmoc } from './cubismmoc';\nimport { Live2DCubismFramework as cubismmodel } from './cubismmodel';\nimport { Live2DCubismFramework as acubismmotion } from '../motion/acubismmotion';\nimport { Live2DCubismFramework as cubismmotion } from '../motion/cubismmotion';\nimport { Live2DCubismFramework as cubismexpressionmotion } from '../motion/cubismexpressionmotion';\nimport { Live2DCubismFramework as cubismpose } from '../effect/cubismpose';\nimport { Live2DCubismFramework as cubismmodeluserdata } from './cubismmodeluserdata';\nimport { Live2DCubismFramework as cubismphysics } from '../physics/cubismphysics';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\nimport { Live2DCubismFramework as cubismmotionqueuemanager } from '../motion/cubismmotionqueuemanager';\nimport { Live2DCubismFramework as cubismbreath } from '../effect/cubismbreath';\nimport { Live2DCubismFramework as cubismeyeblink } from '../effect/cubismeyeblink';\nimport { Live2DCubismFramework as cubismrenderer_webgl } from '../rendering/cubismrenderer_webgl';\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\nvar CubismRenderer_WebGL = cubismrenderer_webgl.CubismRenderer_WebGL;\nvar CubismEyeBlink = cubismeyeblink.CubismEyeBlink;\nvar CubismBreath = cubismbreath.CubismBreath;\nvar CubismMotionQueueManager = cubismmotionqueuemanager.CubismMotionQueueManager;\nvar csmString = csmstring.csmString;\nvar Constant = cubismframework.Constant;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismPhysics = cubismphysics.CubismPhysics;\nvar CubismModelUserData = cubismmodeluserdata.CubismModelUserData;\nvar CubismPose = cubismpose.CubismPose;\nvar CubismExpressionMotion = cubismexpressionmotion.CubismExpressionMotion;\nvar CubismMotion = cubismmotion.CubismMotion;\nvar ACubismMotion = acubismmotion.ACubismMotion;\nvar FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\nvar CubismModel = cubismmodel.CubismModel;\nvar CubismMoc = cubismmoc.CubismMoc;\nvar CubismModelMatrix = cubismmodelmatrix.CubismModelMatrix;\nvar CubismTargetPoint = cubismtargetpoint.CubismTargetPoint;\nvar CubismMotionManager = cubismmotionmanager.CubismMotionManager;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class CubismUserModel {\n    /**\r\n     * 初期化状態の取得\r\n     *\r\n     * 初期化されている状態か？\r\n     *\r\n     * @return true     初期化されている\r\n     * @return false    初期化されていない\r\n     */\n    isInitialized() {\n      return this._initialized;\n    }\n\n    /**\r\n     * 初期化状態の設定\r\n     *\r\n     * 初期化状態を設定する。\r\n     *\r\n     * @param v 初期化状態\r\n     */\n    setInitialized(v) {\n      this._initialized = v;\n    }\n\n    /**\r\n     * 更新状態の取得\r\n     *\r\n     * 更新されている状態か？\r\n     *\r\n     * @return true     更新されている\r\n     * @return false    更新されていない\r\n     */\n    isUpdating() {\n      return this._updating;\n    }\n\n    /**\r\n     * 更新状態の設定\r\n     *\r\n     * 更新状態を設定する\r\n     *\r\n     * @param v 更新状態\r\n     */\n    setUpdating(v) {\n      this._updating = v;\n    }\n\n    /**\r\n     * マウスドラッグ情報の設定\r\n     * @param ドラッグしているカーソルのX位置\r\n     * @param ドラッグしているカーソルのY位置\r\n     */\n    setDragging(x, y) {\n      this._dragManager.set(x, y);\n    }\n\n    /**\r\n     * 加速度の情報を設定する\r\n     * @param x X軸方向の加速度\r\n     * @param y Y軸方向の加速度\r\n     * @param z Z軸方向の加速度\r\n     */\n    setAcceleration(x, y, z) {\n      this._accelerationX = x;\n      this._accelerationY = y;\n      this._accelerationZ = z;\n    }\n\n    /**\r\n     * モデル行列を取得する\r\n     * @return モデル行列\r\n     */\n    getModelMatrix() {\n      return this._modelMatrix;\n    }\n\n    /**\r\n     * 不透明度の設定\r\n     * @param a 不透明度\r\n     */\n    setOpacity(a) {\n      this._opacity = a;\n    }\n\n    /**\r\n     * 不透明度の取得\r\n     * @return 不透明度\r\n     */\n    getOpacity() {\n      return this._opacity;\n    }\n\n    /**\r\n     * モデルデータを読み込む\r\n     *\r\n     * @param buffer    moc3ファイルが読み込まれているバッファ\r\n     */\n    loadModel(buffer) {\n      this._moc = CubismMoc.create(buffer);\n      this._model = this._moc.createModel();\n      this._model.saveParameters();\n      if (this._moc == null || this._model == null) {\n        CubismLogError('Failed to CreateModel().');\n        return;\n      }\n      this._modelMatrix = new CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());\n    }\n\n    /**\r\n     * モーションデータを読み込む\r\n     * @param buffer motion3.jsonファイルが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     * @param name モーションの名前\r\n     * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n     * @return モーションクラス\r\n     */\n\n    /**\r\n     * 表情データの読み込み\r\n     * @param buffer expファイルが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     * @param name 表情の名前\r\n     */\n    loadExpression(buffer, size, name) {\n      return CubismExpressionMotion.create(buffer, size);\n    }\n\n    /**\r\n     * ポーズデータの読み込み\r\n     * @param buffer pose3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\n    loadPose(buffer, size) {\n      this._pose = CubismPose.create(buffer, size);\n    }\n\n    /**\r\n     * モデルに付属するユーザーデータを読み込む\r\n     * @param buffer userdata3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\n    loadUserData(buffer, size) {\n      this._modelUserData = CubismModelUserData.create(buffer, size);\n    }\n\n    /**\r\n     * 物理演算データの読み込み\r\n     * @param buffer  physics3.jsonが読み込まれているバッファ\r\n     * @param size    バッファのサイズ\r\n     */\n    loadPhysics(buffer, size) {\n      this._physics = CubismPhysics.create(buffer, size);\n    }\n\n    /**\r\n     * 当たり判定の取得\r\n     * @param drawableId 検証したいDrawableのID\r\n     * @param pointX X位置\r\n     * @param pointY Y位置\r\n     * @return true ヒットしている\r\n     * @return false ヒットしていない\r\n     */\n    isHit(drawableId, pointX, pointY) {\n      const drawIndex = this._model.getDrawableIndex(drawableId);\n      if (drawIndex < 0) {\n        return false; // 存在しない場合はfalse\n      }\n\n      const count = this._model.getDrawableVertexCount(drawIndex);\n      const vertices = this._model.getDrawableVertices(drawIndex);\n      let left = vertices[0];\n      let right = vertices[0];\n      let top = vertices[1];\n      let bottom = vertices[1];\n      for (let j = 1; j < count; ++j) {\n        const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\n        const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\n        if (x < left) {\n          left = x; // Min x\n        }\n\n        if (x > right) {\n          right = x; // Max x\n        }\n\n        if (y < top) {\n          top = y; // Min y\n        }\n\n        if (y > bottom) {\n          bottom = y; // Max y\n        }\n      }\n\n      const tx = this._modelMatrix.invertTransformX(pointX);\n      const ty = this._modelMatrix.invertTransformY(pointY);\n      return left <= tx && tx <= right && top <= ty && ty <= bottom;\n    }\n\n    /**\r\n     * モデルの取得\r\n     * @return モデル\r\n     */\n    getModel() {\n      return this._model;\n    }\n\n    /**\r\n     * レンダラの取得\r\n     * @return レンダラ\r\n     */\n    getRenderer() {\n      return this._renderer;\n    }\n\n    /**\r\n     * レンダラを作成して初期化を実行する\r\n     */\n    createRenderer() {\n      if (this._renderer) {\n        this.deleteRenderer();\n      }\n      this._renderer = new CubismRenderer_WebGL();\n      this._renderer.initialize(this._model);\n    }\n\n    /**\r\n     * レンダラの解放\r\n     */\n    deleteRenderer() {\n      if (this._renderer != null) {\n        this._renderer.release();\n        this._renderer = null;\n      }\n    }\n\n    /**\r\n     * イベント発火時の標準処理\r\n     *\r\n     * Eventが再生処理時にあった場合の処理をする。\r\n     * 継承で上書きすることを想定している。\r\n     * 上書きしない場合はログ出力をする。\r\n     *\r\n     * @param eventValue 発火したイベントの文字列データ\r\n     */\n    motionEventFired(eventValue) {\n      CubismLogInfo('{0}', eventValue.s);\n    }\n\n    /**\r\n     * イベント用のコールバック\r\n     *\r\n     * CubismMotionQueueManagerにイベント用に登録するためのCallback。\r\n     * CubismUserModelの継承先のEventFiredを呼ぶ。\r\n     *\r\n     * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\r\n     * @param eventValue 発火したイベントの文字列データ\r\n     * @param customData CubismUserModelを継承したインスタンスを想定\r\n     */\n    static cubismDefaultMotionEventCallback(caller, eventValue, customData) {\n      const model = customData;\n      if (model != null) {\n        model.motionEventFired(eventValue);\n      }\n    }\n\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this.loadMotion = (buffer, size, name, onFinishedMotionHandler) => CubismMotion.create(buffer, size, onFinishedMotionHandler);\n      this._moc = void 0;\n      // Mocデータ\n      this._model = void 0;\n      // Modelインスタンス\n      this._motionManager = void 0;\n      // モーション管理\n      this._expressionManager = void 0;\n      // 表情管理\n      this._eyeBlink = void 0;\n      // 自動まばたき\n      this._breath = void 0;\n      // 呼吸\n      this._modelMatrix = void 0;\n      // モデル行列\n      this._pose = void 0;\n      // ポーズ管理\n      this._dragManager = void 0;\n      // マウスドラッグ\n      this._physics = void 0;\n      // 物理演算\n      this._modelUserData = void 0;\n      // ユーザーデータ\n      this._initialized = void 0;\n      // 初期化されたかどうか\n      this._updating = void 0;\n      // 更新されたかどうか\n      this._opacity = void 0;\n      // 不透明度\n      this._lipsync = void 0;\n      // リップシンクするかどうか\n      this._lastLipSyncValue = void 0;\n      // 最後のリップシンクの制御地\n      this._dragX = void 0;\n      // マウスドラッグのX位置\n      this._dragY = void 0;\n      // マウスドラッグのY位置\n      this._accelerationX = void 0;\n      // X軸方向の加速度\n      this._accelerationY = void 0;\n      // Y軸方向の加速度\n      this._accelerationZ = void 0;\n      // Z軸方向の加速度\n      this._debugMode = void 0;\n      // デバッグモードかどうか\n      this._renderer = void 0;\n      // 各変数初期化\n      this._moc = null;\n      this._model = null;\n      this._motionManager = null;\n      this._expressionManager = null;\n      this._eyeBlink = null;\n      this._breath = null;\n      this._modelMatrix = null;\n      this._pose = null;\n      this._dragManager = null;\n      this._physics = null;\n      this._modelUserData = null;\n      this._initialized = false;\n      this._updating = false;\n      this._opacity = 1.0;\n      this._lipsync = true;\n      this._lastLipSyncValue = 0.0;\n      this._dragX = 0.0;\n      this._dragY = 0.0;\n      this._accelerationX = 0.0;\n      this._accelerationY = 0.0;\n      this._accelerationZ = 0.0;\n      this._debugMode = false;\n      this._renderer = null;\n\n      // モーションマネージャーを作成\n      this._motionManager = new CubismMotionManager();\n      this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);\n\n      // 表情マネージャーを作成\n      this._expressionManager = new CubismMotionManager();\n\n      // ドラッグによるアニメーション\n      this._dragManager = new CubismTargetPoint();\n    }\n\n    /**\r\n     * デストラクタに相当する処理\r\n     */\n    release() {\n      if (this._motionManager != null) {\n        this._motionManager.release();\n        this._motionManager = null;\n      }\n      if (this._expressionManager != null) {\n        this._expressionManager.release();\n        this._expressionManager = null;\n      }\n      if (this._moc != null) {\n        this._moc.deleteModel(this._model);\n        this._moc.release();\n        this._moc = null;\n      }\n      this._modelMatrix = null;\n      CubismPose.delete(this._pose);\n      CubismEyeBlink.delete(this._eyeBlink);\n      CubismBreath.delete(this._breath);\n      this._dragManager = null;\n      CubismPhysics.delete(this._physics);\n      CubismModelUserData.delete(this._modelUserData);\n      this.deleteRenderer();\n    }\n\n    // レンダラ\n  }\n  _Live2DCubismFramework.CubismUserModel = CubismUserModel;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismframework","cubismmotionmanager","cubismtargetpoint","cubismmodelmatrix","cubismmoc","cubismmodel","acubismmotion","cubismmotion","cubismexpressionmotion","cubismpose","cubismmodeluserdata","cubismphysics","cubismid","csmstring","cubismmotionqueuemanager","cubismbreath","cubismeyeblink","cubismrenderer_webgl","CubismLogError","CubismLogInfo","CubismRenderer_WebGL","CubismEyeBlink","CubismBreath","CubismMotionQueueManager","csmString","Constant","CubismIdHandle","CubismPhysics","CubismModelUserData","CubismPose","CubismExpressionMotion","CubismMotion","ACubismMotion","FinishedMotionCallback","CubismModel","CubismMoc","CubismModelMatrix","CubismTargetPoint","CubismMotionManager","_Live2DCubismFramework","CubismUserModel","isInitialized","_initialized","setInitialized","v","isUpdating","_updating","setUpdating","setDragging","x","y","_dragManager","set","setAcceleration","z","_accelerationX","_accelerationY","_accelerationZ","getModelMatrix","_modelMatrix","setOpacity","a","_opacity","getOpacity","loadModel","buffer","_moc","create","_model","createModel","saveParameters","getCanvasWidth","getCanvasHeight","loadExpression","size","name","loadPose","_pose","loadUserData","_modelUserData","loadPhysics","_physics","isHit","drawableId","pointX","pointY","drawIndex","getDrawableIndex","count","getDrawableVertexCount","vertices","getDrawableVertices","left","right","top","bottom","j","vertexOffset","vertexStep","tx","invertTransformX","ty","invertTransformY","getModel","getRenderer","_renderer","createRenderer","deleteRenderer","initialize","release","motionEventFired","eventValue","s","cubismDefaultMotionEventCallback","caller","customData","model","constructor","loadMotion","onFinishedMotionHandler","_motionManager","_expressionManager","_eyeBlink","_breath","_lipsync","_lastLipSyncValue","_dragX","_dragY","_debugMode","setEventCallback","deleteModel","delete"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/model/cubismusermodel.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport { Live2DCubismFramework as cubismmotionmanager } from '../motion/cubismmotionmanager';\r\nimport { Live2DCubismFramework as cubismtargetpoint } from '../math/cubismtargetpoint';\r\nimport { Live2DCubismFramework as cubismmodelmatrix } from '../math/cubismmodelmatrix';\r\nimport { Live2DCubismFramework as cubismmoc } from './cubismmoc';\r\nimport { Live2DCubismFramework as cubismmodel } from './cubismmodel';\r\nimport { Live2DCubismFramework as acubismmotion } from '../motion/acubismmotion';\r\nimport { Live2DCubismFramework as cubismmotion } from '../motion/cubismmotion';\r\nimport { Live2DCubismFramework as cubismexpressionmotion } from '../motion/cubismexpressionmotion';\r\nimport { Live2DCubismFramework as cubismpose } from '../effect/cubismpose';\r\nimport { Live2DCubismFramework as cubismmodeluserdata } from './cubismmodeluserdata';\r\nimport { Live2DCubismFramework as cubismphysics } from '../physics/cubismphysics';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as csmstring } from '../type/csmstring';\r\nimport { Live2DCubismFramework as cubismmotionqueuemanager } from '../motion/cubismmotionqueuemanager';\r\nimport { Live2DCubismFramework as cubismbreath } from '../effect/cubismbreath';\r\nimport { Live2DCubismFramework as cubismeyeblink } from '../effect/cubismeyeblink';\r\nimport { Live2DCubismFramework as cubismrenderer_webgl } from '../rendering/cubismrenderer_webgl';\r\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\r\nimport CubismRenderer_WebGL = cubismrenderer_webgl.CubismRenderer_WebGL;\r\nimport CubismEyeBlink = cubismeyeblink.CubismEyeBlink;\r\nimport CubismBreath = cubismbreath.CubismBreath;\r\nimport CubismMotionQueueManager = cubismmotionqueuemanager.CubismMotionQueueManager;\r\nimport csmString = csmstring.csmString;\r\nimport Constant = cubismframework.Constant;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismPhysics = cubismphysics.CubismPhysics;\r\nimport CubismModelUserData = cubismmodeluserdata.CubismModelUserData;\r\nimport CubismPose = cubismpose.CubismPose;\r\nimport CubismExpressionMotion = cubismexpressionmotion.CubismExpressionMotion;\r\nimport CubismMotion = cubismmotion.CubismMotion;\r\nimport ACubismMotion = acubismmotion.ACubismMotion;\r\nimport FinishedMotionCallback = acubismmotion.FinishedMotionCallback;\r\nimport CubismModel = cubismmodel.CubismModel;\r\nimport CubismMoc = cubismmoc.CubismMoc;\r\nimport CubismModelMatrix = cubismmodelmatrix.CubismModelMatrix;\r\nimport CubismTargetPoint = cubismtargetpoint.CubismTargetPoint;\r\nimport CubismMotionManager = cubismmotionmanager.CubismMotionManager;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * ユーザーが実際に使用するモデル\r\n   *\r\n   * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。\r\n   */\r\n  export class CubismUserModel {\r\n    /**\r\n     * 初期化状態の取得\r\n     *\r\n     * 初期化されている状態か？\r\n     *\r\n     * @return true     初期化されている\r\n     * @return false    初期化されていない\r\n     */\r\n    public isInitialized(): boolean {\r\n      return this._initialized;\r\n    }\r\n\r\n    /**\r\n     * 初期化状態の設定\r\n     *\r\n     * 初期化状態を設定する。\r\n     *\r\n     * @param v 初期化状態\r\n     */\r\n    public setInitialized(v: boolean): void {\r\n      this._initialized = v;\r\n    }\r\n\r\n    /**\r\n     * 更新状態の取得\r\n     *\r\n     * 更新されている状態か？\r\n     *\r\n     * @return true     更新されている\r\n     * @return false    更新されていない\r\n     */\r\n    public isUpdating(): boolean {\r\n      return this._updating;\r\n    }\r\n\r\n    /**\r\n     * 更新状態の設定\r\n     *\r\n     * 更新状態を設定する\r\n     *\r\n     * @param v 更新状態\r\n     */\r\n    public setUpdating(v: boolean): void {\r\n      this._updating = v;\r\n    }\r\n\r\n    /**\r\n     * マウスドラッグ情報の設定\r\n     * @param ドラッグしているカーソルのX位置\r\n     * @param ドラッグしているカーソルのY位置\r\n     */\r\n    public setDragging(x: number, y: number): void {\r\n      this._dragManager.set(x, y);\r\n    }\r\n\r\n    /**\r\n     * 加速度の情報を設定する\r\n     * @param x X軸方向の加速度\r\n     * @param y Y軸方向の加速度\r\n     * @param z Z軸方向の加速度\r\n     */\r\n    public setAcceleration(x: number, y: number, z: number): void {\r\n      this._accelerationX = x;\r\n      this._accelerationY = y;\r\n      this._accelerationZ = z;\r\n    }\r\n\r\n    /**\r\n     * モデル行列を取得する\r\n     * @return モデル行列\r\n     */\r\n    public getModelMatrix(): CubismModelMatrix {\r\n      return this._modelMatrix;\r\n    }\r\n\r\n    /**\r\n     * 不透明度の設定\r\n     * @param a 不透明度\r\n     */\r\n    public setOpacity(a: number): void {\r\n      this._opacity = a;\r\n    }\r\n\r\n    /**\r\n     * 不透明度の取得\r\n     * @return 不透明度\r\n     */\r\n    public getOpacity(): number {\r\n      return this._opacity;\r\n    }\r\n\r\n    /**\r\n     * モデルデータを読み込む\r\n     *\r\n     * @param buffer    moc3ファイルが読み込まれているバッファ\r\n     */\r\n    public loadModel(buffer: ArrayBuffer) {\r\n      this._moc = CubismMoc.create(buffer);\r\n      this._model = this._moc.createModel();\r\n      this._model.saveParameters();\r\n\r\n      if (this._moc == null || this._model == null) {\r\n        CubismLogError('Failed to CreateModel().');\r\n        return;\r\n      }\r\n\r\n      this._modelMatrix = new CubismModelMatrix(\r\n        this._model.getCanvasWidth(),\r\n        this._model.getCanvasHeight()\r\n      );\r\n    }\r\n\r\n    /**\r\n     * モーションデータを読み込む\r\n     * @param buffer motion3.jsonファイルが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     * @param name モーションの名前\r\n     * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\r\n     * @return モーションクラス\r\n     */\r\n    public loadMotion = (\r\n      buffer: ArrayBuffer,\r\n      size: number,\r\n      name: string,\r\n      onFinishedMotionHandler?: FinishedMotionCallback\r\n    ) => CubismMotion.create(buffer, size, onFinishedMotionHandler);\r\n\r\n    /**\r\n     * 表情データの読み込み\r\n     * @param buffer expファイルが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     * @param name 表情の名前\r\n     */\r\n    public loadExpression(\r\n      buffer: ArrayBuffer,\r\n      size: number,\r\n      name: string\r\n    ): ACubismMotion {\r\n      return CubismExpressionMotion.create(buffer, size);\r\n    }\r\n\r\n    /**\r\n     * ポーズデータの読み込み\r\n     * @param buffer pose3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\r\n    public loadPose(buffer: ArrayBuffer, size: number): void {\r\n      this._pose = CubismPose.create(buffer, size);\r\n    }\r\n\r\n    /**\r\n     * モデルに付属するユーザーデータを読み込む\r\n     * @param buffer userdata3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\r\n    public loadUserData(buffer: ArrayBuffer, size: number): void {\r\n      this._modelUserData = CubismModelUserData.create(buffer, size);\r\n    }\r\n\r\n    /**\r\n     * 物理演算データの読み込み\r\n     * @param buffer  physics3.jsonが読み込まれているバッファ\r\n     * @param size    バッファのサイズ\r\n     */\r\n    public loadPhysics(buffer: ArrayBuffer, size: number): void {\r\n      this._physics = CubismPhysics.create(buffer, size);\r\n    }\r\n\r\n    /**\r\n     * 当たり判定の取得\r\n     * @param drawableId 検証したいDrawableのID\r\n     * @param pointX X位置\r\n     * @param pointY Y位置\r\n     * @return true ヒットしている\r\n     * @return false ヒットしていない\r\n     */\r\n    public isHit(\r\n      drawableId: CubismIdHandle,\r\n      pointX: number,\r\n      pointY: number\r\n    ): boolean {\r\n      const drawIndex: number = this._model.getDrawableIndex(drawableId);\r\n\r\n      if (drawIndex < 0) {\r\n        return false; // 存在しない場合はfalse\r\n      }\r\n\r\n      const count: number = this._model.getDrawableVertexCount(drawIndex);\r\n      const vertices: Float32Array = this._model.getDrawableVertices(drawIndex);\r\n\r\n      let left: number = vertices[0];\r\n      let right: number = vertices[0];\r\n      let top: number = vertices[1];\r\n      let bottom: number = vertices[1];\r\n\r\n      for (let j = 1; j < count; ++j) {\r\n        const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\r\n        const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\r\n\r\n        if (x < left) {\r\n          left = x; // Min x\r\n        }\r\n\r\n        if (x > right) {\r\n          right = x; // Max x\r\n        }\r\n\r\n        if (y < top) {\r\n          top = y; // Min y\r\n        }\r\n\r\n        if (y > bottom) {\r\n          bottom = y; // Max y\r\n        }\r\n      }\r\n\r\n      const tx: number = this._modelMatrix.invertTransformX(pointX);\r\n      const ty: number = this._modelMatrix.invertTransformY(pointY);\r\n\r\n      return left <= tx && tx <= right && top <= ty && ty <= bottom;\r\n    }\r\n\r\n    /**\r\n     * モデルの取得\r\n     * @return モデル\r\n     */\r\n    public getModel(): CubismModel {\r\n      return this._model;\r\n    }\r\n\r\n    /**\r\n     * レンダラの取得\r\n     * @return レンダラ\r\n     */\r\n    public getRenderer(): CubismRenderer_WebGL {\r\n      return this._renderer;\r\n    }\r\n\r\n    /**\r\n     * レンダラを作成して初期化を実行する\r\n     */\r\n    public createRenderer(): void {\r\n      if (this._renderer) {\r\n        this.deleteRenderer();\r\n      }\r\n\r\n      this._renderer = new CubismRenderer_WebGL();\r\n      this._renderer.initialize(this._model);\r\n    }\r\n\r\n    /**\r\n     * レンダラの解放\r\n     */\r\n    public deleteRenderer(): void {\r\n      if (this._renderer != null) {\r\n        this._renderer.release();\r\n        this._renderer = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * イベント発火時の標準処理\r\n     *\r\n     * Eventが再生処理時にあった場合の処理をする。\r\n     * 継承で上書きすることを想定している。\r\n     * 上書きしない場合はログ出力をする。\r\n     *\r\n     * @param eventValue 発火したイベントの文字列データ\r\n     */\r\n    public motionEventFired(eventValue: csmString): void {\r\n      CubismLogInfo('{0}', eventValue.s);\r\n    }\r\n\r\n    /**\r\n     * イベント用のコールバック\r\n     *\r\n     * CubismMotionQueueManagerにイベント用に登録するためのCallback。\r\n     * CubismUserModelの継承先のEventFiredを呼ぶ。\r\n     *\r\n     * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\r\n     * @param eventValue 発火したイベントの文字列データ\r\n     * @param customData CubismUserModelを継承したインスタンスを想定\r\n     */\r\n    public static cubismDefaultMotionEventCallback(\r\n      caller: CubismMotionQueueManager,\r\n      eventValue: csmString,\r\n      customData: CubismUserModel\r\n    ): void {\r\n      const model: CubismUserModel = customData;\r\n\r\n      if (model != null) {\r\n        model.motionEventFired(eventValue);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      // 各変数初期化\r\n      this._moc = null;\r\n      this._model = null;\r\n      this._motionManager = null;\r\n      this._expressionManager = null;\r\n      this._eyeBlink = null;\r\n      this._breath = null;\r\n      this._modelMatrix = null;\r\n      this._pose = null;\r\n      this._dragManager = null;\r\n      this._physics = null;\r\n      this._modelUserData = null;\r\n      this._initialized = false;\r\n      this._updating = false;\r\n      this._opacity = 1.0;\r\n      this._lipsync = true;\r\n      this._lastLipSyncValue = 0.0;\r\n      this._dragX = 0.0;\r\n      this._dragY = 0.0;\r\n      this._accelerationX = 0.0;\r\n      this._accelerationY = 0.0;\r\n      this._accelerationZ = 0.0;\r\n      this._debugMode = false;\r\n      this._renderer = null;\r\n\r\n      // モーションマネージャーを作成\r\n      this._motionManager = new CubismMotionManager();\r\n      this._motionManager.setEventCallback(\r\n        CubismUserModel.cubismDefaultMotionEventCallback,\r\n        this\r\n      );\r\n\r\n      // 表情マネージャーを作成\r\n      this._expressionManager = new CubismMotionManager();\r\n\r\n      // ドラッグによるアニメーション\r\n      this._dragManager = new CubismTargetPoint();\r\n    }\r\n\r\n    /**\r\n     * デストラクタに相当する処理\r\n     */\r\n    public release() {\r\n      if (this._motionManager != null) {\r\n        this._motionManager.release();\r\n        this._motionManager = null;\r\n      }\r\n\r\n      if (this._expressionManager != null) {\r\n        this._expressionManager.release();\r\n        this._expressionManager = null;\r\n      }\r\n\r\n      if (this._moc != null) {\r\n        this._moc.deleteModel(this._model);\r\n        this._moc.release();\r\n        this._moc = null;\r\n      }\r\n\r\n      this._modelMatrix = null;\r\n\r\n      CubismPose.delete(this._pose);\r\n      CubismEyeBlink.delete(this._eyeBlink);\r\n      CubismBreath.delete(this._breath);\r\n\r\n      this._dragManager = null;\r\n\r\n      CubismPhysics.delete(this._physics);\r\n      CubismModelUserData.delete(this._modelUserData);\r\n\r\n      this.deleteRenderer();\r\n    }\r\n\r\n    protected _moc: CubismMoc; // Mocデータ\r\n    protected _model: CubismModel; // Modelインスタンス\r\n\r\n    protected _motionManager: CubismMotionManager; // モーション管理\r\n    protected _expressionManager: CubismMotionManager; // 表情管理\r\n    protected _eyeBlink: CubismEyeBlink; // 自動まばたき\r\n    protected _breath: CubismBreath; // 呼吸\r\n    protected _modelMatrix: CubismModelMatrix; // モデル行列\r\n    protected _pose: CubismPose; // ポーズ管理\r\n    protected _dragManager: CubismTargetPoint; // マウスドラッグ\r\n    protected _physics: CubismPhysics; // 物理演算\r\n    protected _modelUserData: CubismModelUserData; // ユーザーデータ\r\n\r\n    protected _initialized: boolean; // 初期化されたかどうか\r\n    protected _updating: boolean; // 更新されたかどうか\r\n    protected _opacity: number; // 不透明度\r\n    protected _lipsync: boolean; // リップシンクするかどうか\r\n    protected _lastLipSyncValue: number; // 最後のリップシンクの制御地\r\n    protected _dragX: number; // マウスドラッグのX位置\r\n    protected _dragY: number; // マウスドラッグのY位置\r\n    protected _accelerationX: number; // X軸方向の加速度\r\n    protected _accelerationY: number; // Y軸方向の加速度\r\n    protected _accelerationZ: number; // Z軸方向の加速度\r\n    protected _debugMode: boolean; // デバッグモードかどうか\r\n\r\n    private _renderer: CubismRenderer_WebGL; // レンダラ\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}