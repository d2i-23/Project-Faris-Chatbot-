{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { CubismLogDebug } from '../utils/cubismdebug';\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  class csmPair {\n    /**\r\n     * コンストラクタ\r\n     * @param key Keyとしてセットする値\r\n     * @param value Valueとしてセットする値\r\n     */\n    constructor(key, value) {\n      this.first = void 0;\n      // keyとして用いる変数\n      this.second = void 0;\n      this.first = key == undefined ? null : key;\n      this.second = value == undefined ? null : value;\n    }\n\n    // valueとして用いる変数\n  }\n  _Live2DCubismFramework.csmPair = csmPair;\n  class csmMap {\n    /**\r\n     * 引数付きコンストラクタ\r\n     * @param size 初期化時点で確保するサイズ\r\n     */\n    constructor(size) {\n      // コンテナの初期化のデフォルトサイズ\n      this._keyValues = void 0;\n      // key-valueペアの配列\n      this._dummyValue = void 0;\n      // 空の値を返す為のダミー\n      this._size = void 0;\n      if (size != undefined) {\n        if (size < 1) {\n          this._keyValues = [];\n          this._dummyValue = null;\n          this._size = 0;\n        } else {\n          this._keyValues = new Array(size);\n          this._size = size;\n        }\n      } else {\n        this._keyValues = [];\n        this._dummyValue = null;\n        this._size = 0;\n      }\n    }\n\n    /**\r\n     * デストラクタ\r\n     */\n    release() {\n      this.clear();\n    }\n\n    /**\r\n     * キーを追加する\r\n     * @param key 新たに追加するキー\r\n     */\n    appendKey(key) {\n      // 新しくKey/Valueのペアを作る\n      this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\n      // 新しいkey/valueのインデックスは_size\n\n      this._keyValues[this._size] = new csmPair(key);\n      this._size += 1;\n    }\n\n    /**\r\n     * 添字演算子[key]のオーバーロード(get)\r\n     * @param key 添字から特定されるValue値\r\n     */\n    getValue(key) {\n      let found = -1;\n      for (let i = 0; i < this._size; i++) {\n        if (this._keyValues[i].first == key) {\n          found = i;\n          break;\n        }\n      }\n      if (found >= 0) {\n        return this._keyValues[found].second;\n      } else {\n        this.appendKey(key); // 新規キーを追加\n        return this._keyValues[this._size - 1].second;\n      }\n    }\n\n    /**\r\n     * 添字演算子[key]のオーバーロード(set)\r\n     * @param key 添字から特定されるValue値\r\n     * @param value 代入するValue値\r\n     */\n    setValue(key, value) {\n      let found = -1;\n      for (let i = 0; i < this._size; i++) {\n        if (this._keyValues[i].first == key) {\n          found = i;\n          break;\n        }\n      }\n      if (found >= 0) {\n        this._keyValues[found].second = value;\n      } else {\n        this.appendKey(key); // 新規キーを追加\n        this._keyValues[this._size - 1].second = value;\n      }\n    }\n\n    /**\r\n     * 引数で渡したKeyを持つ要素が存在するか\r\n     * @param key 存在を確認するkey\r\n     * @return true 引数で渡したkeyを持つ要素が存在する\r\n     * @return false 引数で渡したkeyを持つ要素が存在しない\r\n     */\n    isExist(key) {\n      for (let i = 0; i < this._size; i++) {\n        if (this._keyValues[i].first == key) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\r\n     * keyValueのポインタを全て解放する\r\n     */\n    clear() {\n      this._keyValues = void 0;\n      this._keyValues = null;\n      this._keyValues = [];\n      this._size = 0;\n    }\n\n    /**\r\n     * コンテナのサイズを取得する\r\n     *\r\n     * @return コンテナのサイズ\r\n     */\n    getSize() {\n      return this._size;\n    }\n\n    /**\r\n     * コンテナのキャパシティを確保する\r\n     * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\r\n     * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\r\n     */\n    prepareCapacity(newSize, fitToSize) {\n      if (newSize > this._keyValues.length) {\n        if (this._keyValues.length == 0) {\n          if (!fitToSize && newSize < csmMap.DefaultSize) newSize = csmMap.DefaultSize;\n          this._keyValues.length = newSize;\n        } else {\n          if (!fitToSize && newSize < this._keyValues.length * 2) newSize = this._keyValues.length * 2;\n          this._keyValues.length = newSize;\n        }\n      }\n    }\n\n    /**\r\n     * コンテナの先頭要素を返す\r\n     */\n    begin() {\n      const ite = new iterator(this, 0);\n      return ite;\n    }\n\n    /**\r\n     * コンテナの終端要素を返す\r\n     */\n    end() {\n      const ite = new iterator(this, this._size); // 終了\n      return ite;\n    }\n\n    /**\r\n     * コンテナから要素を削除する\r\n     *\r\n     * @param ite 削除する要素\r\n     */\n    erase(ite) {\n      const index = ite._index;\n      if (index < 0 || this._size <= index) {\n        return ite; // 削除範囲外\n      }\n\n      // 削除\n      this._keyValues.splice(index, 1);\n      --this._size;\n      const ite2 = new iterator(this, index); // 終了\n      return ite2;\n    }\n\n    /**\r\n     * コンテナの値を32ビット符号付き整数型でダンプする\r\n     */\n    dumpAsInt() {\n      for (let i = 0; i < this._size; i++) {\n        CubismLogDebug('{0} ,', this._keyValues[i]);\n        CubismLogDebug('\\n');\n      }\n    }\n\n    // コンテナの要素数\n  }\n  csmMap.DefaultSize = 10;\n  _Live2DCubismFramework.csmMap = csmMap;\n  class iterator {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor(v, idx) {\n      this._index = void 0;\n      // コンテナのインデックス値\n      this._map = void 0;\n      this._map = v != undefined ? v : new csmMap();\n      this._index = idx != undefined ? idx : 0;\n    }\n\n    /**\r\n     * =演算子のオーバーロード\r\n     */\n    set(ite) {\n      this._index = ite._index;\n      this._map = ite._map;\n      return this;\n    }\n\n    /**\r\n     * 前置き++演算子のオーバーロード\r\n     */\n    preIncrement() {\n      ++this._index;\n      return this;\n    }\n\n    /**\r\n     * 前置き--演算子のオーバーロード\r\n     */\n    preDecrement() {\n      --this._index;\n      return this;\n    }\n\n    /**\r\n     * 後置き++演算子のオーバーロード\r\n     */\n    increment() {\n      const iteold = new iterator(this._map, this._index++); // 古い値を保存\n      this._map = iteold._map;\n      this._index = iteold._index;\n      return this;\n    }\n\n    /**\r\n     * 後置き--演算子のオーバーロード\r\n     */\n    decrement() {\n      const iteold = new iterator(this._map, this._index); // 古い値を保存\n      this._map = iteold._map;\n      this._index = iteold._index;\n      return this;\n    }\n\n    /**\r\n     * *演算子のオーバーロード\r\n     */\n    ptr() {\n      return this._map._keyValues[this._index];\n    }\n\n    /**\r\n     * !=演算\r\n     */\n    notEqual(ite) {\n      return this._index != ite._index || this._map != ite._map;\n    }\n\n    // コンテナ\n  }\n  _Live2DCubismFramework.iterator = iterator;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismLogDebug","Live2DCubismFramework","_Live2DCubismFramework","csmPair","constructor","key","value","first","second","undefined","csmMap","size","_keyValues","_dummyValue","_size","Array","release","clear","appendKey","prepareCapacity","getValue","found","i","setValue","isExist","getSize","newSize","fitToSize","length","DefaultSize","begin","ite","iterator","end","erase","index","_index","splice","ite2","dumpAsInt","v","idx","_map","set","preIncrement","preDecrement","increment","iteold","decrement","ptr","notEqual"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/type/csmmap.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { CubismLogDebug } from '../utils/cubismdebug';\r\n\r\nexport namespace Live2DCubismFramework {\r\n  /**\r\n   * Key-Valueのペアを定義するクラス\r\n   * csmMapクラスの内部データで使用する。\r\n   */\r\n  export class csmPair<_KeyT, _ValT> {\r\n    /**\r\n     * コンストラクタ\r\n     * @param key Keyとしてセットする値\r\n     * @param value Valueとしてセットする値\r\n     */\r\n    public constructor(key?: _KeyT, value?: _ValT) {\r\n      this.first = key == undefined ? null : key;\r\n\r\n      this.second = value == undefined ? null : value;\r\n    }\r\n\r\n    public first: _KeyT; // keyとして用いる変数\r\n    public second: _ValT; // valueとして用いる変数\r\n  }\r\n\r\n  /**\r\n   * マップ型\r\n   */\r\n  export class csmMap<_KeyT, _ValT> {\r\n    /**\r\n     * 引数付きコンストラクタ\r\n     * @param size 初期化時点で確保するサイズ\r\n     */\r\n    public constructor(size?: number) {\r\n      if (size != undefined) {\r\n        if (size < 1) {\r\n          this._keyValues = [];\r\n          this._dummyValue = null;\r\n          this._size = 0;\r\n        } else {\r\n          this._keyValues = new Array(size);\r\n          this._size = size;\r\n        }\r\n      } else {\r\n        this._keyValues = [];\r\n        this._dummyValue = null;\r\n        this._size = 0;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * デストラクタ\r\n     */\r\n    public release() {\r\n      this.clear();\r\n    }\r\n\r\n    /**\r\n     * キーを追加する\r\n     * @param key 新たに追加するキー\r\n     */\r\n    public appendKey(key: _KeyT): void {\r\n      // 新しくKey/Valueのペアを作る\r\n      this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\r\n      // 新しいkey/valueのインデックスは_size\r\n\r\n      this._keyValues[this._size] = new csmPair<_KeyT, _ValT>(key);\r\n      this._size += 1;\r\n    }\r\n\r\n    /**\r\n     * 添字演算子[key]のオーバーロード(get)\r\n     * @param key 添字から特定されるValue値\r\n     */\r\n    public getValue(key: _KeyT): _ValT {\r\n      let found = -1;\r\n\r\n      for (let i = 0; i < this._size; i++) {\r\n        if (this._keyValues[i].first == key) {\r\n          found = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (found >= 0) {\r\n        return this._keyValues[found].second;\r\n      } else {\r\n        this.appendKey(key); // 新規キーを追加\r\n        return this._keyValues[this._size - 1].second;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 添字演算子[key]のオーバーロード(set)\r\n     * @param key 添字から特定されるValue値\r\n     * @param value 代入するValue値\r\n     */\r\n    public setValue(key: _KeyT, value: _ValT): void {\r\n      let found = -1;\r\n\r\n      for (let i = 0; i < this._size; i++) {\r\n        if (this._keyValues[i].first == key) {\r\n          found = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (found >= 0) {\r\n        this._keyValues[found].second = value;\r\n      } else {\r\n        this.appendKey(key); // 新規キーを追加\r\n        this._keyValues[this._size - 1].second = value;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * 引数で渡したKeyを持つ要素が存在するか\r\n     * @param key 存在を確認するkey\r\n     * @return true 引数で渡したkeyを持つ要素が存在する\r\n     * @return false 引数で渡したkeyを持つ要素が存在しない\r\n     */\r\n    public isExist(key: _KeyT): boolean {\r\n      for (let i = 0; i < this._size; i++) {\r\n        if (this._keyValues[i].first == key) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * keyValueのポインタを全て解放する\r\n     */\r\n    public clear(): void {\r\n      this._keyValues = void 0;\r\n      this._keyValues = null;\r\n      this._keyValues = [];\r\n\r\n      this._size = 0;\r\n    }\r\n\r\n    /**\r\n     * コンテナのサイズを取得する\r\n     *\r\n     * @return コンテナのサイズ\r\n     */\r\n    public getSize(): number {\r\n      return this._size;\r\n    }\r\n\r\n    /**\r\n     * コンテナのキャパシティを確保する\r\n     * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\r\n     * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\r\n     */\r\n    public prepareCapacity(newSize: number, fitToSize: boolean): void {\r\n      if (newSize > this._keyValues.length) {\r\n        if (this._keyValues.length == 0) {\r\n          if (!fitToSize && newSize < csmMap.DefaultSize)\r\n            newSize = csmMap.DefaultSize;\r\n          this._keyValues.length = newSize;\r\n        } else {\r\n          if (!fitToSize && newSize < this._keyValues.length * 2)\r\n            newSize = this._keyValues.length * 2;\r\n          this._keyValues.length = newSize;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * コンテナの先頭要素を返す\r\n     */\r\n    public begin(): iterator<_KeyT, _ValT> {\r\n      const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(this, 0);\r\n      return ite;\r\n    }\r\n\r\n    /**\r\n     * コンテナの終端要素を返す\r\n     */\r\n    public end(): iterator<_KeyT, _ValT> {\r\n      const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\r\n        this,\r\n        this._size\r\n      ); // 終了\r\n      return ite;\r\n    }\r\n\r\n    /**\r\n     * コンテナから要素を削除する\r\n     *\r\n     * @param ite 削除する要素\r\n     */\r\n    public erase(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\r\n      const index: number = ite._index;\r\n      if (index < 0 || this._size <= index) {\r\n        return ite; // 削除範囲外\r\n      }\r\n\r\n      // 削除\r\n      this._keyValues.splice(index, 1);\r\n      --this._size;\r\n\r\n      const ite2: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\r\n        this,\r\n        index\r\n      ); // 終了\r\n      return ite2;\r\n    }\r\n\r\n    /**\r\n     * コンテナの値を32ビット符号付き整数型でダンプする\r\n     */\r\n    public dumpAsInt() {\r\n      for (let i = 0; i < this._size; i++) {\r\n        CubismLogDebug('{0} ,', this._keyValues[i]);\r\n        CubismLogDebug('\\n');\r\n      }\r\n    }\r\n\r\n    public static readonly DefaultSize = 10; // コンテナの初期化のデフォルトサイズ\r\n    public _keyValues: csmPair<_KeyT, _ValT>[]; // key-valueペアの配列\r\n    public _dummyValue: _ValT; // 空の値を返す為のダミー\r\n    public _size: number; // コンテナの要素数\r\n  }\r\n\r\n  /**\r\n   * csmMap<T>のイテレータ\r\n   */\r\n  export class iterator<_KeyT, _ValT> {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    constructor(v?: csmMap<_KeyT, _ValT>, idx?: number) {\r\n      this._map = v != undefined ? v : new csmMap<_KeyT, _ValT>();\r\n\r\n      this._index = idx != undefined ? idx : 0;\r\n    }\r\n\r\n    /**\r\n     * =演算子のオーバーロード\r\n     */\r\n    public set(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\r\n      this._index = ite._index;\r\n      this._map = ite._map;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 前置き++演算子のオーバーロード\r\n     */\r\n    public preIncrement(): iterator<_KeyT, _ValT> {\r\n      ++this._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 前置き--演算子のオーバーロード\r\n     */\r\n    public preDecrement(): iterator<_KeyT, _ValT> {\r\n      --this._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 後置き++演算子のオーバーロード\r\n     */\r\n    public increment(): iterator<_KeyT, _ValT> {\r\n      const iteold = new iterator<_KeyT, _ValT>(this._map, this._index++); // 古い値を保存\r\n      this._map = iteold._map;\r\n      this._index = iteold._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * 後置き--演算子のオーバーロード\r\n     */\r\n    public decrement(): iterator<_KeyT, _ValT> {\r\n      const iteold = new iterator<_KeyT, _ValT>(this._map, this._index); // 古い値を保存\r\n      this._map = iteold._map;\r\n      this._index = iteold._index;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * *演算子のオーバーロード\r\n     */\r\n    public ptr(): csmPair<_KeyT, _ValT> {\r\n      return this._map._keyValues[this._index];\r\n    }\r\n\r\n    /**\r\n     * !=演算\r\n     */\r\n    public notEqual(ite: iterator<_KeyT, _ValT>): boolean {\r\n      return this._index != ite._index || this._map != ite._map;\r\n    }\r\n\r\n    _index: number; // コンテナのインデックス値\r\n    _map: csmMap<_KeyT, _ValT>; // コンテナ\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}