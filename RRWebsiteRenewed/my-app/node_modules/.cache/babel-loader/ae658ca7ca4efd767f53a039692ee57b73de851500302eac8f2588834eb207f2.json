{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\n\n/** モーション再生終了コールバック関数定義 */\n\n/**\n * モーションの抽象基底クラス\n *\n * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\n */\nexport class ACubismMotion {\n  /**\n   * インスタンスの破棄\n   */\n  static delete(motion) {\n    motion.release();\n    motion = null;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    /**\n     * モーション再生終了コールバックの登録\n     *\n     * モーション再生終了コールバックを登録する。\n     * isFinishedフラグを設定するタイミングで呼び出される。\n     * 以下の状態の際には呼び出されない:\n     *   1. 再生中のモーションが「ループ」として設定されているとき\n     *   2. コールバックが登録されていない時\n     *\n     * @param onFinishedMotionHandler モーション再生終了コールバック関数\n     */\n    this.setFinishedMotionHandler = onFinishedMotionHandler => this._onFinishedMotion = onFinishedMotionHandler;\n    /**\n     * モーション再生終了コールバックの取得\n     *\n     * モーション再生終了コールバックを取得する。\n     *\n     * @return 登録されているモーション再生終了コールバック関数\n     */\n    this.getFinishedMotionHandler = () => this._onFinishedMotion;\n    this._fadeInSeconds = void 0;\n    // フェードインにかかる時間[秒]\n    this._fadeOutSeconds = void 0;\n    // フェードアウトにかかる時間[秒]\n    this._weight = void 0;\n    // モーションの重み\n    this._offsetSeconds = void 0;\n    // モーション再生の開始時間[秒]\n    this._firedEventValues = void 0;\n    // モーション再生終了コールバック関数\n    this._onFinishedMotion = void 0;\n    this._fadeInSeconds = -1.0;\n    this._fadeOutSeconds = -1.0;\n    this._weight = 1.0;\n    this._offsetSeconds = 0.0; // 再生の開始時刻\n    this._firedEventValues = new csmVector();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._weight = 0.0;\n  }\n\n  /**\n   * モデルのパラメータ\n   * @param model 対象のモデル\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  updateParameters(model, motionQueueEntry, userTimeSeconds) {\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n      return;\n    }\n    if (!motionQueueEntry.isStarted()) {\n      motionQueueEntry.setIsStarted(true);\n      motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\n      motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\n\n      const duration = this.getDuration();\n      if (motionQueueEntry.getEndTime() < 0) {\n        // 開始していないうちに終了設定している場合がある。\n        motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\n        // duration == -1 の場合はループする\n      }\n    }\n\n    let fadeWeight = this._weight; // 現在の値と掛け合わせる割合\n\n    //---- フェードイン・アウトの処理 ----\n    // 単純なサイン関数でイージングする\n    const fadeIn = this._fadeInSeconds == 0.0 ? 1.0 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\n    const fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0 ? 1.0 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n    CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\n\n    //---- 全てのパラメータIDをループする ----\n    this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\n\n    // 後処理\n    // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\n    if (motionQueueEntry.getEndTime() > 0 && motionQueueEntry.getEndTime() < userTimeSeconds) {\n      motionQueueEntry.setIsFinished(true); // 終了\n    }\n  }\n\n  /**\n   * フェードインの時間を設定する\n   * @param fadeInSeconds フェードインにかかる時間[秒]\n   */\n  setFadeInTime(fadeInSeconds) {\n    this._fadeInSeconds = fadeInSeconds;\n  }\n\n  /**\n   * フェードアウトの時間を設定する\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  setFadeOutTime(fadeOutSeconds) {\n    this._fadeOutSeconds = fadeOutSeconds;\n  }\n\n  /**\n   * フェードアウトにかかる時間の取得\n   * @return フェードアウトにかかる時間[秒]\n   */\n  getFadeOutTime() {\n    return this._fadeOutSeconds;\n  }\n\n  /**\n   * フェードインにかかる時間の取得\n   * @return フェードインにかかる時間[秒]\n   */\n  getFadeInTime() {\n    return this._fadeInSeconds;\n  }\n\n  /**\n   * モーション適用の重みの設定\n   * @param weight 重み（0.0 - 1.0）\n   */\n  setWeight(weight) {\n    this._weight = weight;\n  }\n\n  /**\n   * モーション適用の重みの取得\n   * @return 重み（0.0 - 1.0）\n   */\n  getWeight() {\n    return this._weight;\n  }\n\n  /**\n   * モーションの長さの取得\n   * @return モーションの長さ[秒]\n   *\n   * @note ループの時は「-1」。\n   *       ループでない場合は、オーバーライドする。\n   *       正の値の時は取得される時間で終了する。\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\n   */\n  getDuration() {\n    return -1.0;\n  }\n\n  /**\n   * モーションのループ1回分の長さの取得\n   * @return モーションのループ一回分の長さ[秒]\n   *\n   * @note ループしない場合は、getDuration()と同じ値を返す\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\n   */\n  getLoopDuration() {\n    return -1.0;\n  }\n\n  /**\n   * モーション再生の開始時刻の設定\n   * @param offsetSeconds モーション再生の開始時刻[秒]\n   */\n  setOffsetTime(offsetSeconds) {\n    this._offsetSeconds = offsetSeconds;\n  }\n\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds 今回の再生時間[秒]\n   */\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n    return this._firedEventValues;\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @return true モデルへパラメータ値の反映あり\n   * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\n   */\n\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @returns true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  isExistModelOpacity() {\n    return false;\n  }\n\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @returns success:透明度のカーブのインデックス\n   */\n  getModelOpacityIndex() {\n    return -1;\n  }\n\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @returns success:透明度のId\n   */\n  getModelOpacityId(index) {\n    return null;\n  }\n\n  /**\n   * 指定時間の透明度の値を返す\n   *\n   * @returns success:モーションの現在時間におけるOpacityの値\n   *\n   * @note  更新後の値を取るにはUpdateParameters() の後に呼び出す。\n   */\n  getModelOpacityValue() {\n    return 1.0;\n  }\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './acubismmotion';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const ACubismMotion = _Live2DCubismFramework.ACubismMotion = $.ACubismMotion;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismMath","csmVector","CSM_ASSERT","ACubismMotion","delete","motion","release","constructor","setFinishedMotionHandler","onFinishedMotionHandler","_onFinishedMotion","getFinishedMotionHandler","_fadeInSeconds","_fadeOutSeconds","_weight","_offsetSeconds","_firedEventValues","updateParameters","model","motionQueueEntry","userTimeSeconds","isAvailable","isFinished","isStarted","setIsStarted","setStartTime","setFadeInStartTime","duration","getDuration","getEndTime","setEndTime","getStartTime","fadeWeight","fadeIn","getEasingSine","getFadeInStartTime","fadeOut","setState","doUpdateParameters","setIsFinished","setFadeInTime","fadeInSeconds","setFadeOutTime","fadeOutSeconds","getFadeOutTime","getFadeInTime","setWeight","weight","getWeight","getLoopDuration","setOffsetTime","offsetSeconds","getFiredEvent","beforeCheckTimeSeconds","motionTimeSeconds","isExistModelOpacity","getModelOpacityIndex","getModelOpacityId","index","getModelOpacityValue","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Samples/TypeScript/Demo/Framework/src/motion/acubismmotion.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\n/** モーション再生終了コールバック関数定義 */\nexport type FinishedMotionCallback = (self: ACubismMotion) => void;\n\n/**\n * モーションの抽象基底クラス\n *\n * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\n */\nexport abstract class ACubismMotion {\n  /**\n   * インスタンスの破棄\n   */\n  public static delete(motion: ACubismMotion): void {\n    motion.release();\n    motion = null;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._fadeInSeconds = -1.0;\n    this._fadeOutSeconds = -1.0;\n    this._weight = 1.0;\n    this._offsetSeconds = 0.0; // 再生の開始時刻\n    this._firedEventValues = new csmVector<csmString>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._weight = 0.0;\n  }\n\n  /**\n   * モデルのパラメータ\n   * @param model 対象のモデル\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  public updateParameters(\n    model: CubismModel,\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ): void {\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n      return;\n    }\n\n    if (!motionQueueEntry.isStarted()) {\n      motionQueueEntry.setIsStarted(true);\n      motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\n      motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\n\n      const duration: number = this.getDuration();\n\n      if (motionQueueEntry.getEndTime() < 0) {\n        // 開始していないうちに終了設定している場合がある。\n        motionQueueEntry.setEndTime(\n          duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration\n        );\n        // duration == -1 の場合はループする\n      }\n    }\n\n    let fadeWeight: number = this._weight; // 現在の値と掛け合わせる割合\n\n    //---- フェードイン・アウトの処理 ----\n    // 単純なサイン関数でイージングする\n    const fadeIn: number =\n      this._fadeInSeconds == 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n              this._fadeInSeconds\n          );\n\n    const fadeOut: number =\n      this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\n              this._fadeOutSeconds\n          );\n\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\n\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n\n    CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\n\n    //---- 全てのパラメータIDをループする ----\n    this.doUpdateParameters(\n      model,\n      userTimeSeconds,\n      fadeWeight,\n      motionQueueEntry\n    );\n\n    // 後処理\n    // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\n    if (\n      motionQueueEntry.getEndTime() > 0 &&\n      motionQueueEntry.getEndTime() < userTimeSeconds\n    ) {\n      motionQueueEntry.setIsFinished(true); // 終了\n    }\n  }\n\n  /**\n   * フェードインの時間を設定する\n   * @param fadeInSeconds フェードインにかかる時間[秒]\n   */\n  public setFadeInTime(fadeInSeconds: number): void {\n    this._fadeInSeconds = fadeInSeconds;\n  }\n\n  /**\n   * フェードアウトの時間を設定する\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  public setFadeOutTime(fadeOutSeconds: number): void {\n    this._fadeOutSeconds = fadeOutSeconds;\n  }\n\n  /**\n   * フェードアウトにかかる時間の取得\n   * @return フェードアウトにかかる時間[秒]\n   */\n  public getFadeOutTime(): number {\n    return this._fadeOutSeconds;\n  }\n\n  /**\n   * フェードインにかかる時間の取得\n   * @return フェードインにかかる時間[秒]\n   */\n  public getFadeInTime(): number {\n    return this._fadeInSeconds;\n  }\n\n  /**\n   * モーション適用の重みの設定\n   * @param weight 重み（0.0 - 1.0）\n   */\n  public setWeight(weight: number): void {\n    this._weight = weight;\n  }\n\n  /**\n   * モーション適用の重みの取得\n   * @return 重み（0.0 - 1.0）\n   */\n  public getWeight(): number {\n    return this._weight;\n  }\n\n  /**\n   * モーションの長さの取得\n   * @return モーションの長さ[秒]\n   *\n   * @note ループの時は「-1」。\n   *       ループでない場合は、オーバーライドする。\n   *       正の値の時は取得される時間で終了する。\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\n   */\n  public getDuration(): number {\n    return -1.0;\n  }\n\n  /**\n   * モーションのループ1回分の長さの取得\n   * @return モーションのループ一回分の長さ[秒]\n   *\n   * @note ループしない場合は、getDuration()と同じ値を返す\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\n   */\n  public getLoopDuration(): number {\n    return -1.0;\n  }\n\n  /**\n   * モーション再生の開始時刻の設定\n   * @param offsetSeconds モーション再生の開始時刻[秒]\n   */\n  public setOffsetTime(offsetSeconds: number): void {\n    this._offsetSeconds = offsetSeconds;\n  }\n\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds 今回の再生時間[秒]\n   */\n  public getFiredEvent(\n    beforeCheckTimeSeconds: number,\n    motionTimeSeconds: number\n  ): csmVector<csmString> {\n    return this._firedEventValues;\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @return true モデルへパラメータ値の反映あり\n   * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\n   */\n  public abstract doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    weight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void;\n\n  /**\n   * モーション再生終了コールバックの登録\n   *\n   * モーション再生終了コールバックを登録する。\n   * isFinishedフラグを設定するタイミングで呼び出される。\n   * 以下の状態の際には呼び出されない:\n   *   1. 再生中のモーションが「ループ」として設定されているとき\n   *   2. コールバックが登録されていない時\n   *\n   * @param onFinishedMotionHandler モーション再生終了コールバック関数\n   */\n  public setFinishedMotionHandler = (\n    onFinishedMotionHandler: FinishedMotionCallback\n  ) => (this._onFinishedMotion = onFinishedMotionHandler);\n\n  /**\n   * モーション再生終了コールバックの取得\n   *\n   * モーション再生終了コールバックを取得する。\n   *\n   * @return 登録されているモーション再生終了コールバック関数\n   */\n  public getFinishedMotionHandler = () => this._onFinishedMotion;\n\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @returns true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  public isExistModelOpacity(): boolean {\n    return false;\n  }\n\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @returns success:透明度のカーブのインデックス\n   */\n  public getModelOpacityIndex(): number {\n    return -1;\n  }\n\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @returns success:透明度のId\n   */\n  public getModelOpacityId(index: number): CubismIdHandle {\n    return null;\n  }\n\n  /**\n   * 指定時間の透明度の値を返す\n   *\n   * @returns success:モーションの現在時間におけるOpacityの値\n   *\n   * @note  更新後の値を取るにはUpdateParameters() の後に呼び出す。\n   */\n  protected getModelOpacityValue(): number {\n    return 1.0;\n  }\n\n  public _fadeInSeconds: number; // フェードインにかかる時間[秒]\n  public _fadeOutSeconds: number; // フェードアウトにかかる時間[秒]\n  public _weight: number; // モーションの重み\n  public _offsetSeconds: number; // モーション再生の開始時間[秒]\n\n  public _firedEventValues: csmVector<csmString>;\n\n  // モーション再生終了コールバック関数\n  public _onFinishedMotion?: FinishedMotionCallback;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './acubismmotion';\nimport { CubismIdHandle } from '../id/cubismid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const ACubismMotion = $.ACubismMotion;\n  export type ACubismMotion = $.ACubismMotion;\n  export type FinishedMotionCallback = $.FinishedMotionCallback;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}