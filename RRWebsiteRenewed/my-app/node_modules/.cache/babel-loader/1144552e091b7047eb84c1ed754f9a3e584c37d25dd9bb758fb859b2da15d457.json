{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\nimport { Live2DCubismFramework as cubismvector2 } from '../math/cubismvector2';\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\nvar CubismFramework = cubismframework.CubismFramework;\nvar CubismIdHandle = cubismid.CubismIdHandle;\nvar CubismVector2 = cubismvector2.CubismVector2;\nvar CubismJson = cubismjson.CubismJson;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  // JSON keys\n  const Position = 'Position';\n  const X = 'X';\n  const Y = 'Y';\n  const Angle = 'Angle';\n  const Type = 'Type';\n  const Id = 'Id';\n\n  // Meta\n  const Meta = 'Meta';\n  const EffectiveForces = 'EffectiveForces';\n  const TotalInputCount = 'TotalInputCount';\n  const TotalOutputCount = 'TotalOutputCount';\n  const PhysicsSettingCount = 'PhysicsSettingCount';\n  const Gravity = 'Gravity';\n  const Wind = 'Wind';\n  const VertexCount = 'VertexCount';\n\n  // PhysicsSettings\n  const PhysicsSettings = 'PhysicsSettings';\n  const Normalization = 'Normalization';\n  const Minimum = 'Minimum';\n  const Maximum = 'Maximum';\n  const Default = 'Default';\n  const Reflect = 'Reflect';\n  const Weight = 'Weight';\n\n  // Input\n  const Input = 'Input';\n  const Source = 'Source';\n\n  // Output\n  const Output = 'Output';\n  const Scale = 'Scale';\n  const VertexIndex = 'VertexIndex';\n  const Destination = 'Destination';\n\n  // Particle\n  const Vertices = 'Vertices';\n  const Mobility = 'Mobility';\n  const Delay = 'Delay';\n  const Radius = 'Radius';\n  const Acceleration = 'Acceleration';\n\n  /**\r\n   * physics3.jsonのコンテナ。\r\n   */\n  class CubismPhysicsJson {\n    /**\r\n     * コンストラクタ\r\n     * @param buffer physics3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\n    constructor(buffer, size) {\n      this._json = void 0;\n      this._json = CubismJson.create(buffer, size);\n    }\n\n    /**\r\n     * デストラクタ相当の処理\r\n     */\n    release() {\n      CubismJson.delete(this._json);\n    }\n\n    /**\r\n     * 重力の取得\r\n     * @return 重力\r\n     */\n    getGravity() {\n      const ret = new CubismVector2(0, 0);\n      ret.x = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(X).toFloat();\n      ret.y = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(Y).toFloat();\n      return ret;\n    }\n\n    /**\r\n     * 風の取得\r\n     * @return 風\r\n     */\n    getWind() {\n      const ret = new CubismVector2(0, 0);\n      ret.x = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(X).toFloat();\n      ret.y = this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(Y).toFloat();\n      return ret;\n    }\n\n    /**\r\n     * 物理店の管理の個数の取得\r\n     * @return 物理店の管理の個数\r\n     */\n    getSubRigCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(PhysicsSettingCount).toInt();\n    }\n\n    /**\r\n     * 入力の総合計の取得\r\n     * @return 入力の総合計\r\n     */\n    getTotalInputCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(TotalInputCount).toInt();\n    }\n\n    /**\r\n     * 出力の総合計の取得\r\n     * @return 出力の総合計\r\n     */\n    getTotalOutputCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(TotalOutputCount).toInt();\n    }\n\n    /**\r\n     * 物理点の個数の取得\r\n     * @return 物理点の個数\r\n     */\n    getVertexCount() {\n      return this._json.getRoot().getValueByString(Meta).getValueByString(VertexCount).toInt();\n    }\n\n    /**\r\n     * 正規化された位置の最小値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された位置の最小値\r\n     */\n    getNormalizationPositionMinimumValue(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Position).getValueByString(Minimum).toFloat();\n    }\n\n    /**\r\n     * 正規化された位置の最大値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された位置の最大値\r\n     */\n    getNormalizationPositionMaximumValue(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Position).getValueByString(Maximum).toFloat();\n    }\n\n    /**\r\n     * 正規化された位置のデフォルト値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された位置のデフォルト値\r\n     */\n    getNormalizationPositionDefaultValue(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Position).getValueByString(Default).toFloat();\n    }\n\n    /**\r\n     * 正規化された角度の最小値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された角度の最小値\r\n     */\n    getNormalizationAngleMinimumValue(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Angle).getValueByString(Minimum).toFloat();\n    }\n\n    /**\r\n     * 正規化された角度の最大値の取得\r\n     * @param physicsSettingIndex\r\n     * @return 正規化された角度の最大値\r\n     */\n    getNormalizationAngleMaximumValue(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Angle).getValueByString(Maximum).toFloat();\n    }\n\n    /**\r\n     * 正規化された角度のデフォルト値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された角度のデフォルト値\r\n     */\n    getNormalizationAngleDefaultValue(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Normalization).getValueByString(Angle).getValueByString(Default).toFloat();\n    }\n\n    /**\r\n     * 入力の個数の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 入力の個数\r\n     */\n    getInputCount(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getVector().getSize();\n    }\n\n    /**\r\n     * 入力の重みの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力の重み\r\n     */\n    getInputWeight(physicsSettingIndex, inputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Weight).toFloat();\n    }\n\n    /**\r\n     * 入力の反転の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力の反転\r\n     */\n    getInputReflect(physicsSettingIndex, inputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Reflect).toBoolean();\n    }\n\n    /**\r\n     * 入力の種類の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力の種類\r\n     */\n    getInputType(physicsSettingIndex, inputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Type).getRawString();\n    }\n\n    /**\r\n     * 入力元のIDの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力元のID\r\n     */\n    getInputSourceId(physicsSettingIndex, inputIndex) {\n      return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Input).getValueByIndex(inputIndex).getValueByString(Source).getValueByString(Id).getRawString());\n    }\n\n    /**\r\n     * 出力の個数の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 出力の個数\r\n     */\n    getOutputCount(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getVector().getSize();\n    }\n\n    /**\r\n     * 出力の物理点のインデックスの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の物理点のインデックス\r\n     */\n    getOutputVertexIndex(physicsSettingIndex, outputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(VertexIndex).toInt();\n    }\n\n    /**\r\n     * 出力の角度のスケールを取得する\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の角度のスケール\r\n     */\n    getOutputAngleScale(physicsSettingIndex, outputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Scale).toFloat();\n    }\n\n    /**\r\n     * 出力の重みの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の重み\r\n     */\n    getOutputWeight(physicsSettingIndex, outputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Weight).toFloat();\n    }\n\n    /**\r\n     * 出力先のIDの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力先のID\r\n     */\n    getOutputDestinationId(physicsSettingIndex, outputIndex) {\n      return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Destination).getValueByString(Id).getRawString());\n    }\n\n    /**\r\n     * 出力の種類の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の種類\r\n     */\n    getOutputType(physicsSettingIndex, outputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Type).getRawString();\n    }\n\n    /**\r\n     * 出力の反転の取得\r\n     * @param physicsSettingIndex 物理演算のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の反転\r\n     */\n    getOutputReflect(physicsSettingIndex, outputIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Output).getValueByIndex(outputIndex).getValueByString(Reflect).toBoolean();\n    }\n\n    /**\r\n     * 物理点の個数の取得\r\n     * @param physicsSettingIndex 物理演算男設定のインデックス\r\n     * @return 物理点の個数\r\n     */\n    getParticleCount(physicsSettingIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getVector().getSize();\n    }\n\n    /**\r\n     * 物理点の動きやすさの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の動きやすさ\r\n     */\n    getParticleMobility(physicsSettingIndex, vertexIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Mobility).toFloat();\n    }\n\n    /**\r\n     * 物理点の遅れの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の遅れ\r\n     */\n    getParticleDelay(physicsSettingIndex, vertexIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Delay).toFloat();\n    }\n\n    /**\r\n     * 物理点の加速度の取得\r\n     * @param physicsSettingIndex 物理演算の設定\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の加速度\r\n     */\n    getParticleAcceleration(physicsSettingIndex, vertexIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Acceleration).toFloat();\n    }\n\n    /**\r\n     * 物理点の距離の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の距離\r\n     */\n    getParticleRadius(physicsSettingIndex, vertexIndex) {\n      return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Radius).toInt();\n    }\n\n    /**\r\n     * 物理点の位置の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexInde 物理点のインデックス\r\n     * @return 物理点の位置\r\n     */\n    getParticlePosition(physicsSettingIndex, vertexIndex) {\n      const ret = new CubismVector2(0, 0);\n      ret.x = this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Position).getValueByString(X).toFloat();\n      ret.y = this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(physicsSettingIndex).getValueByString(Vertices).getValueByIndex(vertexIndex).getValueByString(Position).getValueByString(Y).toFloat();\n      return ret;\n    }\n\n    // physics3.jsonデータ\n  }\n  _Live2DCubismFramework.CubismPhysicsJson = CubismPhysicsJson;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismjson","cubismvector2","cubismid","cubismframework","CubismFramework","CubismIdHandle","CubismVector2","CubismJson","_Live2DCubismFramework","Position","X","Y","Angle","Type","Id","Meta","EffectiveForces","TotalInputCount","TotalOutputCount","PhysicsSettingCount","Gravity","Wind","VertexCount","PhysicsSettings","Normalization","Minimum","Maximum","Default","Reflect","Weight","Input","Source","Output","Scale","VertexIndex","Destination","Vertices","Mobility","Delay","Radius","Acceleration","CubismPhysicsJson","constructor","buffer","size","_json","create","release","delete","getGravity","ret","x","getRoot","getValueByString","toFloat","y","getWind","getSubRigCount","toInt","getTotalInputCount","getTotalOutputCount","getVertexCount","getNormalizationPositionMinimumValue","physicsSettingIndex","getValueByIndex","getNormalizationPositionMaximumValue","getNormalizationPositionDefaultValue","getNormalizationAngleMinimumValue","getNormalizationAngleMaximumValue","getNormalizationAngleDefaultValue","getInputCount","getVector","getSize","getInputWeight","inputIndex","getInputReflect","toBoolean","getInputType","getRawString","getInputSourceId","getIdManager","getId","getOutputCount","getOutputVertexIndex","outputIndex","getOutputAngleScale","getOutputWeight","getOutputDestinationId","getOutputType","getOutputReflect","getParticleCount","getParticleMobility","vertexIndex","getParticleDelay","getParticleAcceleration","getParticleRadius","getParticlePosition"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/physics/cubismphysicsjson.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismjson } from '../utils/cubismjson';\r\nimport { Live2DCubismFramework as cubismvector2 } from '../math/cubismvector2';\r\nimport { Live2DCubismFramework as cubismid } from '../id/cubismid';\r\nimport { Live2DCubismFramework as cubismframework } from '../live2dcubismframework';\r\nimport CubismFramework = cubismframework.CubismFramework;\r\nimport CubismIdHandle = cubismid.CubismIdHandle;\r\nimport CubismVector2 = cubismvector2.CubismVector2;\r\nimport CubismJson = cubismjson.CubismJson;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  // JSON keys\r\n  const Position = 'Position';\r\n  const X = 'X';\r\n  const Y = 'Y';\r\n  const Angle = 'Angle';\r\n  const Type = 'Type';\r\n  const Id = 'Id';\r\n\r\n  // Meta\r\n  const Meta = 'Meta';\r\n  const EffectiveForces = 'EffectiveForces';\r\n  const TotalInputCount = 'TotalInputCount';\r\n  const TotalOutputCount = 'TotalOutputCount';\r\n  const PhysicsSettingCount = 'PhysicsSettingCount';\r\n  const Gravity = 'Gravity';\r\n  const Wind = 'Wind';\r\n  const VertexCount = 'VertexCount';\r\n\r\n  // PhysicsSettings\r\n  const PhysicsSettings = 'PhysicsSettings';\r\n  const Normalization = 'Normalization';\r\n  const Minimum = 'Minimum';\r\n  const Maximum = 'Maximum';\r\n  const Default = 'Default';\r\n  const Reflect = 'Reflect';\r\n  const Weight = 'Weight';\r\n\r\n  // Input\r\n  const Input = 'Input';\r\n  const Source = 'Source';\r\n\r\n  // Output\r\n  const Output = 'Output';\r\n  const Scale = 'Scale';\r\n  const VertexIndex = 'VertexIndex';\r\n  const Destination = 'Destination';\r\n\r\n  // Particle\r\n  const Vertices = 'Vertices';\r\n  const Mobility = 'Mobility';\r\n  const Delay = 'Delay';\r\n  const Radius = 'Radius';\r\n  const Acceleration = 'Acceleration';\r\n\r\n  /**\r\n   * physics3.jsonのコンテナ。\r\n   */\r\n  export class CubismPhysicsJson {\r\n    /**\r\n     * コンストラクタ\r\n     * @param buffer physics3.jsonが読み込まれているバッファ\r\n     * @param size バッファのサイズ\r\n     */\r\n    public constructor(buffer: ArrayBuffer, size: number) {\r\n      this._json = CubismJson.create(buffer, size);\r\n    }\r\n\r\n    /**\r\n     * デストラクタ相当の処理\r\n     */\r\n    public release(): void {\r\n      CubismJson.delete(this._json);\r\n    }\r\n\r\n    /**\r\n     * 重力の取得\r\n     * @return 重力\r\n     */\r\n    public getGravity(): CubismVector2 {\r\n      const ret: CubismVector2 = new CubismVector2(0, 0);\r\n      ret.x = this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(EffectiveForces)\r\n        .getValueByString(Gravity)\r\n        .getValueByString(X)\r\n        .toFloat();\r\n      ret.y = this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(EffectiveForces)\r\n        .getValueByString(Gravity)\r\n        .getValueByString(Y)\r\n        .toFloat();\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * 風の取得\r\n     * @return 風\r\n     */\r\n    public getWind(): CubismVector2 {\r\n      const ret: CubismVector2 = new CubismVector2(0, 0);\r\n      ret.x = this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(EffectiveForces)\r\n        .getValueByString(Wind)\r\n        .getValueByString(X)\r\n        .toFloat();\r\n      ret.y = this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(EffectiveForces)\r\n        .getValueByString(Wind)\r\n        .getValueByString(Y)\r\n        .toFloat();\r\n      return ret;\r\n    }\r\n\r\n    /**\r\n     * 物理店の管理の個数の取得\r\n     * @return 物理店の管理の個数\r\n     */\r\n    public getSubRigCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(PhysicsSettingCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * 入力の総合計の取得\r\n     * @return 入力の総合計\r\n     */\r\n    public getTotalInputCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(TotalInputCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * 出力の総合計の取得\r\n     * @return 出力の総合計\r\n     */\r\n    public getTotalOutputCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(TotalOutputCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * 物理点の個数の取得\r\n     * @return 物理点の個数\r\n     */\r\n    public getVertexCount(): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(Meta)\r\n        .getValueByString(VertexCount)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * 正規化された位置の最小値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された位置の最小値\r\n     */\r\n    public getNormalizationPositionMinimumValue(\r\n      physicsSettingIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Normalization)\r\n        .getValueByString(Position)\r\n        .getValueByString(Minimum)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 正規化された位置の最大値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された位置の最大値\r\n     */\r\n    public getNormalizationPositionMaximumValue(\r\n      physicsSettingIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Normalization)\r\n        .getValueByString(Position)\r\n        .getValueByString(Maximum)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 正規化された位置のデフォルト値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された位置のデフォルト値\r\n     */\r\n    public getNormalizationPositionDefaultValue(\r\n      physicsSettingIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Normalization)\r\n        .getValueByString(Position)\r\n        .getValueByString(Default)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 正規化された角度の最小値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された角度の最小値\r\n     */\r\n    public getNormalizationAngleMinimumValue(\r\n      physicsSettingIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Normalization)\r\n        .getValueByString(Angle)\r\n        .getValueByString(Minimum)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 正規化された角度の最大値の取得\r\n     * @param physicsSettingIndex\r\n     * @return 正規化された角度の最大値\r\n     */\r\n    public getNormalizationAngleMaximumValue(\r\n      physicsSettingIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Normalization)\r\n        .getValueByString(Angle)\r\n        .getValueByString(Maximum)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 正規化された角度のデフォルト値の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 正規化された角度のデフォルト値\r\n     */\r\n    public getNormalizationAngleDefaultValue(\r\n      physicsSettingIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Normalization)\r\n        .getValueByString(Angle)\r\n        .getValueByString(Default)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 入力の個数の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 入力の個数\r\n     */\r\n    public getInputCount(physicsSettingIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Input)\r\n        .getVector()\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * 入力の重みの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力の重み\r\n     */\r\n    public getInputWeight(\r\n      physicsSettingIndex: number,\r\n      inputIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Input)\r\n        .getValueByIndex(inputIndex)\r\n        .getValueByString(Weight)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 入力の反転の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力の反転\r\n     */\r\n    public getInputReflect(\r\n      physicsSettingIndex: number,\r\n      inputIndex: number\r\n    ): boolean {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Input)\r\n        .getValueByIndex(inputIndex)\r\n        .getValueByString(Reflect)\r\n        .toBoolean();\r\n    }\r\n\r\n    /**\r\n     * 入力の種類の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力の種類\r\n     */\r\n    public getInputType(\r\n      physicsSettingIndex: number,\r\n      inputIndex: number\r\n    ): string {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Input)\r\n        .getValueByIndex(inputIndex)\r\n        .getValueByString(Type)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * 入力元のIDの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param inputIndex 入力のインデックス\r\n     * @return 入力元のID\r\n     */\r\n    public getInputSourceId(\r\n      physicsSettingIndex: number,\r\n      inputIndex: number\r\n    ): CubismIdHandle {\r\n      return CubismFramework.getIdManager().getId(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(PhysicsSettings)\r\n          .getValueByIndex(physicsSettingIndex)\r\n          .getValueByString(Input)\r\n          .getValueByIndex(inputIndex)\r\n          .getValueByString(Source)\r\n          .getValueByString(Id)\r\n          .getRawString()\r\n      );\r\n    }\r\n\r\n    /**\r\n     * 出力の個数の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @return 出力の個数\r\n     */\r\n    public getOutputCount(physicsSettingIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getVector()\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * 出力の物理点のインデックスの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の物理点のインデックス\r\n     */\r\n    public getOutputVertexIndex(\r\n      physicsSettingIndex: number,\r\n      outputIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(VertexIndex)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * 出力の角度のスケールを取得する\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の角度のスケール\r\n     */\r\n    public getOutputAngleScale(\r\n      physicsSettingIndex: number,\r\n      outputIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(Scale)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 出力の重みの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の重み\r\n     */\r\n    public getOutputWeight(\r\n      physicsSettingIndex: number,\r\n      outputIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(Weight)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 出力先のIDの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力先のID\r\n     */\r\n    public getOutputDestinationId(\r\n      physicsSettingIndex: number,\r\n      outputIndex: number\r\n    ): CubismIdHandle {\r\n      return CubismFramework.getIdManager().getId(\r\n        this._json\r\n          .getRoot()\r\n          .getValueByString(PhysicsSettings)\r\n          .getValueByIndex(physicsSettingIndex)\r\n          .getValueByString(Output)\r\n          .getValueByIndex(outputIndex)\r\n          .getValueByString(Destination)\r\n          .getValueByString(Id)\r\n          .getRawString()\r\n      );\r\n    }\r\n\r\n    /**\r\n     * 出力の種類の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の種類\r\n     */\r\n    public getOutputType(\r\n      physicsSettingIndex: number,\r\n      outputIndex: number\r\n    ): string {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(Type)\r\n        .getRawString();\r\n    }\r\n\r\n    /**\r\n     * 出力の反転の取得\r\n     * @param physicsSettingIndex 物理演算のインデックス\r\n     * @param outputIndex 出力のインデックス\r\n     * @return 出力の反転\r\n     */\r\n    public getOutputReflect(\r\n      physicsSettingIndex: number,\r\n      outputIndex: number\r\n    ): boolean {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Output)\r\n        .getValueByIndex(outputIndex)\r\n        .getValueByString(Reflect)\r\n        .toBoolean();\r\n    }\r\n\r\n    /**\r\n     * 物理点の個数の取得\r\n     * @param physicsSettingIndex 物理演算男設定のインデックス\r\n     * @return 物理点の個数\r\n     */\r\n    public getParticleCount(physicsSettingIndex: number): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getVector()\r\n        .getSize();\r\n    }\r\n\r\n    /**\r\n     * 物理点の動きやすさの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の動きやすさ\r\n     */\r\n    public getParticleMobility(\r\n      physicsSettingIndex: number,\r\n      vertexIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getValueByIndex(vertexIndex)\r\n        .getValueByString(Mobility)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 物理点の遅れの取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の遅れ\r\n     */\r\n    public getParticleDelay(\r\n      physicsSettingIndex: number,\r\n      vertexIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getValueByIndex(vertexIndex)\r\n        .getValueByString(Delay)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 物理点の加速度の取得\r\n     * @param physicsSettingIndex 物理演算の設定\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の加速度\r\n     */\r\n    public getParticleAcceleration(\r\n      physicsSettingIndex: number,\r\n      vertexIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getValueByIndex(vertexIndex)\r\n        .getValueByString(Acceleration)\r\n        .toFloat();\r\n    }\r\n\r\n    /**\r\n     * 物理点の距離の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexIndex 物理点のインデックス\r\n     * @return 物理点の距離\r\n     */\r\n    public getParticleRadius(\r\n      physicsSettingIndex: number,\r\n      vertexIndex: number\r\n    ): number {\r\n      return this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getValueByIndex(vertexIndex)\r\n        .getValueByString(Radius)\r\n        .toInt();\r\n    }\r\n\r\n    /**\r\n     * 物理点の位置の取得\r\n     * @param physicsSettingIndex 物理演算の設定のインデックス\r\n     * @param vertexInde 物理点のインデックス\r\n     * @return 物理点の位置\r\n     */\r\n    public getParticlePosition(\r\n      physicsSettingIndex: number,\r\n      vertexIndex: number\r\n    ): CubismVector2 {\r\n      const ret: CubismVector2 = new CubismVector2(0, 0);\r\n      ret.x = this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getValueByIndex(vertexIndex)\r\n        .getValueByString(Position)\r\n        .getValueByString(X)\r\n        .toFloat();\r\n      ret.y = this._json\r\n        .getRoot()\r\n        .getValueByString(PhysicsSettings)\r\n        .getValueByIndex(physicsSettingIndex)\r\n        .getValueByString(Vertices)\r\n        .getValueByIndex(vertexIndex)\r\n        .getValueByString(Position)\r\n        .getValueByString(Y)\r\n        .toFloat();\r\n      return ret;\r\n    }\r\n\r\n    _json: CubismJson; // physics3.jsonデータ\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}