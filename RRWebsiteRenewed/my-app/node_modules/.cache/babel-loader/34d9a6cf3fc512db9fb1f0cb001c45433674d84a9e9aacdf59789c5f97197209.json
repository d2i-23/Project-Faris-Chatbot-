{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { csmVector } from '../Framework/src/type/csmvector';\nimport * as LAppDefine from './lappdefine';\nimport { canvas } from './lappdelegate';\nimport { LAppModel } from './lappmodel';\nimport { LAppPal } from './lapppal';\nexport let s_instance = null;\n\n/**\n * サンプルアプリケーションにおいてCubismModelを管理するクラス\n * モデル生成と破棄、タップイベントの処理、モデル切り替えを行う。\n */\nexport class LAppLive2DManager {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   */\n  static getInstance() {\n    if (s_instance == null) {\n      s_instance = new LAppLive2DManager();\n    }\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   */\n  static releaseInstance() {\n    if (s_instance != null) {\n      s_instance = void 0;\n    }\n    s_instance = null;\n  }\n\n  /**\n   * 現在のシーンで保持しているモデルを返す。\n   *\n   * @param no モデルリストのインデックス値\n   * @return モデルのインスタンスを返す。インデックス値が範囲外の場合はNULLを返す。\n   */\n  getModel(no) {\n    if (no < this._models.getSize()) {\n      return this._models.at(no);\n    }\n    return null;\n  }\n\n  /**\n   * 現在のシーンで保持しているすべてのモデルを解放する\n   */\n  releaseAllModel() {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      this._models.at(i).release();\n      this._models.set(i, null);\n    }\n    this._models.clear();\n  }\n\n  /**\n   * 画面をドラッグした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  onDrag(x, y) {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      const model = this.getModel(i);\n      if (model) {\n        model.setDragging(x, y);\n      }\n    }\n  }\n\n  /**\n   * 画面をタップした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  onTap(x, y) {\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(`[APP]tap point: {x: ${x.toFixed(2)} y: ${y.toFixed(2)}}`);\n    }\n    for (let i = 0; i < this._models.getSize(); i++) {\n      if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\n        if (LAppDefine.DebugLogEnable) {\n          LAppPal.printMessage(`[APP]hit area: [${LAppDefine.HitAreaNameHead}]`);\n        }\n        this._models.at(i).setRandomExpression();\n      } else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {\n        if (LAppDefine.DebugLogEnable) {\n          LAppPal.printMessage(`[APP]hit area: [${LAppDefine.HitAreaNameBody}]`);\n        }\n        this._models.at(i).startRandomMotion(LAppDefine.MotionGroupTapBody, LAppDefine.PriorityNormal, this._finishedMotion);\n      }\n    }\n  }\n\n  //! Custom function here\n  onSpeak(path) {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      this._models.at(i).startSpeaking(path);\n    }\n  }\n  setExpression(path) {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      this._models.at(i).startSpeaking(path);\n    }\n  }\n\n  /**\n   * 画面を更新するときの処理\n   * モデルの更新処理及び描画処理を行う\n   */\n  onUpdate() {\n    //! Gets updated constantly\n    const {\n      width,\n      height\n    } = canvas;\n    const modelCount = this._models.getSize();\n    for (let i = 0; i < modelCount; ++i) {\n      const projection = new CubismMatrix44();\n      const model = this.getModel(i);\n      if (model.getModel()) {\n        if (model.getModel().getCanvasWidth() > 1.0 && width < height) {\n          // 横に長いモデルを縦長ウィンドウに表示する際モデルの横サイズでscaleを算出する\n          model.getModelMatrix().setWidth(2.0);\n          projection.scale(1.0, width / height);\n        } else {\n          projection.scale(height / width, 1.0);\n        }\n\n        // 必要があればここで乗算\n        if (this._viewMatrix != null) {\n          projection.multiplyByMatrix(this._viewMatrix);\n        }\n      }\n      model.update();\n      model.draw(projection); // 参照渡しなのでprojectionは変質する。\n    }\n  }\n\n  /**\n   * 次のシーンに切りかえる\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   */\n  nextScene() {\n    const no = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;\n    this.changeScene(no);\n  }\n\n  /**\n   * シーンを切り替える\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   */\n  changeScene(index) {\n    this._sceneIndex = index;\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(`[APP]model index: ${this._sceneIndex}`);\n    }\n\n    // ModelDir[]に保持したディレクトリ名から\n    // model3.jsonのパスを決定する。\n    // ディレクトリ名とmodel3.jsonの名前を一致させておくこと。\n    const model = LAppDefine.ModelDir[index];\n    const modelPath = LAppDefine.ResourcesPath + model + '/';\n    let modelJsonName = LAppDefine.ModelDir[index];\n    modelJsonName += '.model3.json';\n    this.releaseAllModel();\n    this._models.pushBack(new LAppModel());\n    this._models.at(0).loadAssets(modelPath, modelJsonName);\n  }\n  setViewMatrix(m) {\n    for (let i = 0; i < 16; i++) {\n      this._viewMatrix.getArray()[i] = m.getArray()[i];\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._viewMatrix = void 0;\n    // モデル描画に用いるview行列\n    this._models = void 0;\n    // モデルインスタンスのコンテナ\n    this._sceneIndex = void 0;\n    // 表示するシーンのインデックス値\n    // モーション再生終了のコールバック関数\n    this._finishedMotion = self => {\n      LAppPal.printMessage('Motion Finished:');\n      console.log(self);\n    };\n    this._viewMatrix = new CubismMatrix44();\n    this._models = new csmVector();\n    this._sceneIndex = 0;\n    this.changeScene(this._sceneIndex);\n  }\n}","map":{"version":3,"names":["CubismMatrix44","csmVector","LAppDefine","canvas","LAppModel","LAppPal","s_instance","LAppLive2DManager","getInstance","releaseInstance","getModel","no","_models","getSize","at","releaseAllModel","i","release","set","clear","onDrag","x","y","model","setDragging","onTap","DebugLogEnable","printMessage","toFixed","hitTest","HitAreaNameHead","setRandomExpression","HitAreaNameBody","startRandomMotion","MotionGroupTapBody","PriorityNormal","_finishedMotion","onSpeak","path","startSpeaking","setExpression","onUpdate","width","height","modelCount","projection","getCanvasWidth","getModelMatrix","setWidth","scale","_viewMatrix","multiplyByMatrix","update","draw","nextScene","_sceneIndex","ModelDirSize","changeScene","index","ModelDir","modelPath","ResourcesPath","modelJsonName","pushBack","loadAssets","setViewMatrix","m","getArray","constructor","self","console","log"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/src/lapplive2dmanager.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { ACubismMotion } from '../Framework/src/motion/acubismmotion';\nimport { csmVector } from '../Framework/src/type/csmvector';\n\nimport * as LAppDefine from './lappdefine';\nimport { canvas } from './lappdelegate';\nimport { LAppModel } from './lappmodel';\nimport { LAppPal } from './lapppal';\n\nexport let s_instance: LAppLive2DManager = null;\n\n/**\n * サンプルアプリケーションにおいてCubismModelを管理するクラス\n * モデル生成と破棄、タップイベントの処理、モデル切り替えを行う。\n */\nexport class LAppLive2DManager {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   */\n  public static getInstance(): LAppLive2DManager {\n    if (s_instance == null) {\n      s_instance = new LAppLive2DManager();\n    }\n\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   */\n  public static releaseInstance(): void {\n    if (s_instance != null) {\n      s_instance = void 0;\n    }\n    \n    s_instance = null;\n  }\n\n  /**\n   * 現在のシーンで保持しているモデルを返す。\n   *\n   * @param no モデルリストのインデックス値\n   * @return モデルのインスタンスを返す。インデックス値が範囲外の場合はNULLを返す。\n   */\n  public getModel(no: number): LAppModel {\n    if (no < this._models.getSize()) {\n      return this._models.at(no);\n    }\n\n    return null;\n  }\n\n  /**\n   * 現在のシーンで保持しているすべてのモデルを解放する\n   */\n  public releaseAllModel(): void {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      this._models.at(i).release();\n      this._models.set(i, null);\n    }\n\n    this._models.clear();\n  }\n\n  /**\n   * 画面をドラッグした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  public onDrag(x: number, y: number): void {\n    for (let i = 0; i < this._models.getSize(); i++) {\n      const model: LAppModel = this.getModel(i);\n\n      if (model) {\n        model.setDragging(x, y);\n      }\n    }\n  }\n\n  /**\n   * 画面をタップした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  public onTap(x: number, y: number): void {\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(\n        `[APP]tap point: {x: ${x.toFixed(2)} y: ${y.toFixed(2)}}`\n      );\n    }\n\n    for (let i = 0; i < this._models.getSize(); i++) {\n      if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\n        if (LAppDefine.DebugLogEnable) {\n          LAppPal.printMessage(\n            `[APP]hit area: [${LAppDefine.HitAreaNameHead}]`\n          );\n        }\n        this._models.at(i).setRandomExpression();\n      } else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {\n        if (LAppDefine.DebugLogEnable) {\n          LAppPal.printMessage(\n            `[APP]hit area: [${LAppDefine.HitAreaNameBody}]`\n          );\n        }\n        this._models\n          .at(i)\n          .startRandomMotion(\n            LAppDefine.MotionGroupTapBody,\n            LAppDefine.PriorityNormal,\n            this._finishedMotion\n          );\n      }\n    }\n  }\n\n  //! Custom function here\n  public onSpeak(path: string): void{\n    for (let i = 0; i < this._models.getSize(); i++) {\n      this._models.at(i).startSpeaking(path)\n    }\n  }\n\n  public setExpression(path: string): void{\n    for (let i = 0; i < this._models.getSize(); i++) {\n      this._models.at(i).startSpeaking(path)\n    }\n  }\n\n\n  /**\n   * 画面を更新するときの処理\n   * モデルの更新処理及び描画処理を行う\n   */\n  public onUpdate(): void {\n    //! Gets updated constantly\n    const { width, height } = canvas;\n\n    const modelCount: number = this._models.getSize();\n\n    for (let i = 0; i < modelCount; ++i) {\n      const projection: CubismMatrix44 = new CubismMatrix44();\n      const model: LAppModel = this.getModel(i);\n\n      if (model.getModel()) {\n        if (model.getModel().getCanvasWidth() > 1.0 && width < height) {\n          // 横に長いモデルを縦長ウィンドウに表示する際モデルの横サイズでscaleを算出する\n          model.getModelMatrix().setWidth(2.0);\n          projection.scale(1.0, width / height);\n        } else {\n          projection.scale(height / width, 1.0);\n        }\n\n        // 必要があればここで乗算\n        if (this._viewMatrix != null) {\n          projection.multiplyByMatrix(this._viewMatrix);\n        }\n      }\n\n      model.update();\n      model.draw(projection); // 参照渡しなのでprojectionは変質する。\n    }\n  }\n\n  /**\n   * 次のシーンに切りかえる\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   */\n  public nextScene(): void {\n    const no: number = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;\n    this.changeScene(no);\n  }\n\n  /**\n   * シーンを切り替える\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   */\n  public changeScene(index: number): void {\n    this._sceneIndex = index;\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(`[APP]model index: ${this._sceneIndex}`);\n    }\n\n    // ModelDir[]に保持したディレクトリ名から\n    // model3.jsonのパスを決定する。\n    // ディレクトリ名とmodel3.jsonの名前を一致させておくこと。\n    const model: string = LAppDefine.ModelDir[index];\n    const modelPath: string = LAppDefine.ResourcesPath + model + '/';\n    let modelJsonName: string = LAppDefine.ModelDir[index];\n    modelJsonName += '.model3.json';\n\n    this.releaseAllModel();\n    this._models.pushBack(new LAppModel());\n    this._models.at(0).loadAssets(modelPath, modelJsonName);\n  }\n\n  public setViewMatrix(m: CubismMatrix44) {\n    for (let i = 0; i < 16; i++) {\n      this._viewMatrix.getArray()[i] = m.getArray()[i];\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._viewMatrix = new CubismMatrix44();\n    this._models = new csmVector<LAppModel>();\n    this._sceneIndex = 0;\n    this.changeScene(this._sceneIndex);\n  }\n\n  _viewMatrix: CubismMatrix44; // モデル描画に用いるview行列\n  _models: csmVector<LAppModel>; // モデルインスタンスのコンテナ\n  _sceneIndex: number; // 表示するシーンのインデックス値\n  // モーション再生終了のコールバック関数\n  _finishedMotion = (self: ACubismMotion): void => {\n    LAppPal.printMessage('Motion Finished:');\n    console.log(self);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}