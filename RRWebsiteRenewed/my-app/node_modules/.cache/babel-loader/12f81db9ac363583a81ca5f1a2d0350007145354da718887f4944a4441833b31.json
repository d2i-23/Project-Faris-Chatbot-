{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismVector2 } from './cubismvector2';\n\n/**\n * 数値計算などに使用するユーティリティクラス\n */\nexport class CubismMath {\n  /**\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\n   *\n   * @param value 収められる値\n   * @param min   範囲の最小値\n   * @param max   範囲の最大値\n   * @return 最小値と最大値の範囲に収めた値\n   */\n  static range(value, min, max) {\n    if (value < min) {\n      value = min;\n    } else if (value > max) {\n      value = max;\n    }\n    return value;\n  }\n\n  /**\n   * サイン関数の値を求める\n   *\n   * @param x 角度値（ラジアン）\n   * @return サイン関数sin(x)の値\n   */\n  static sin(x) {\n    return Math.sin(x);\n  }\n\n  /**\n   * コサイン関数の値を求める\n   *\n   * @param x 角度値(ラジアン)\n   * @return コサイン関数cos(x)の値\n   */\n  static cos(x) {\n    return Math.cos(x);\n  }\n\n  /**\n   * 値の絶対値を求める\n   *\n   * @param x 絶対値を求める値\n   * @return 値の絶対値\n   */\n  static abs(x) {\n    return Math.abs(x);\n  }\n\n  /**\n   * 平方根(ルート)を求める\n   * @param x -> 平方根を求める値\n   * @return 値の平方根\n   */\n  static sqrt(x) {\n    return Math.sqrt(x);\n  }\n\n  /**\n   * 立方根を求める\n   * @param x -> 立方根を求める値\n   * @return 値の立方根\n   */\n  static cbrt(x) {\n    if (x === 0) {\n      return x;\n    }\n    let cx = x;\n    const isNegativeNumber = cx < 0;\n    if (isNegativeNumber) {\n      cx = -cx;\n    }\n    let ret;\n    if (cx === Infinity) {\n      ret = Infinity;\n    } else {\n      ret = Math.exp(Math.log(cx) / 3);\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\n    }\n    return isNegativeNumber ? -ret : ret;\n  }\n\n  /**\n   * イージング処理されたサインを求める\n   * フェードイン・アウト時のイージングに利用できる\n   *\n   * @param value イージングを行う値\n   * @return イージング処理されたサイン値\n   */\n  static getEasingSine(value) {\n    if (value < 0.0) {\n      return 0.0;\n    } else if (value > 1.0) {\n      return 1.0;\n    }\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\n  }\n\n  /**\n   * 大きい方の値を返す\n   *\n   * @param left 左辺の値\n   * @param right 右辺の値\n   * @return 大きい方の値\n   */\n  static max(left, right) {\n    return left > right ? left : right;\n  }\n\n  /**\n   * 小さい方の値を返す\n   *\n   * @param left  左辺の値\n   * @param right 右辺の値\n   * @return 小さい方の値\n   */\n  static min(left, right) {\n    return left > right ? right : left;\n  }\n\n  /**\n   * 角度値をラジアン値に変換する\n   *\n   * @param degrees   角度値\n   * @return 角度値から変換したラジアン値\n   */\n  static degreesToRadian(degrees) {\n    return degrees / 180.0 * Math.PI;\n  }\n\n  /**\n   * ラジアン値を角度値に変換する\n   *\n   * @param radian    ラジアン値\n   * @return ラジアン値から変換した角度値\n   */\n  static radianToDegrees(radian) {\n    return radian * 180.0 / Math.PI;\n  }\n\n  /**\n   * ２つのベクトルからラジアン値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return ラジアン値から求めた方向ベクトル\n   */\n  static directionToRadian(from, to) {\n    const q1 = Math.atan2(to.y, to.x);\n    const q2 = Math.atan2(from.y, from.x);\n    let ret = q1 - q2;\n    while (ret < -Math.PI) {\n      ret += Math.PI * 2.0;\n    }\n    while (ret > Math.PI) {\n      ret -= Math.PI * 2.0;\n    }\n    return ret;\n  }\n\n  /**\n   * ２つのベクトルから角度値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return 角度値から求めた方向ベクトル\n   */\n  static directionToDegrees(from, to) {\n    const radian = this.directionToRadian(from, to);\n    let degree = this.radianToDegrees(radian);\n    if (to.x - from.x > 0.0) {\n      degree = -degree;\n    }\n    return degree;\n  }\n\n  /**\n   * ラジアン値を方向ベクトルに変換する。\n   *\n   * @param totalAngle    ラジアン値\n   * @return ラジアン値から変換した方向ベクトル\n   */\n\n  static radianToDirection(totalAngle) {\n    const ret = new CubismVector2();\n    ret.x = this.sin(totalAngle);\n    ret.y = this.cos(totalAngle);\n    return ret;\n  }\n\n  /**\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\n   * a * x^2 + b * x + c = 0\n   *\n   * @param   a -> 二次項の係数値\n   * @param   b -> 一次項の係数値\n   * @param   c -> 定数項の値\n   * @return  二次方程式の解\n   */\n  static quadraticEquation(a, b, c) {\n    if (this.abs(a) < CubismMath.Epsilon) {\n      if (this.abs(b) < CubismMath.Epsilon) {\n        return -c;\n      }\n      return -c / b;\n    }\n    return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\n  }\n\n  /**\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\n   * 重解になったときには0.0～1.0の値になる解を返す。\n   *\n   * a * x^3 + b * x^2 + c * x + d = 0\n   *\n   * @param   a -> 三次項の係数値\n   * @param   b -> 二次項の係数値\n   * @param   c -> 一次項の係数値\n   * @param   d -> 定数項の値\n   * @return  0.0～1.0の間にある解\n   */\n  static cardanoAlgorithmForBezier(a, b, c, d) {\n    if (this.sqrt(a) < CubismMath.Epsilon) {\n      return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\n    }\n    const ba = b / a;\n    const ca = c / a;\n    const da = d / a;\n    const p = (3.0 * ca - ba * ba) / 3.0;\n    const p3 = p / 3.0;\n    const q = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\n    const q2 = q / 2.0;\n    const discriminant = q2 * q2 + p3 * p3 * p3;\n    const center = 0.5;\n    const threshold = center + 0.01;\n    if (discriminant < 0.0) {\n      const mp3 = -p / 3.0;\n      const mp33 = mp3 * mp3 * mp3;\n      const r = this.sqrt(mp33);\n      const t = -q / (2.0 * r);\n      const cosphi = this.range(t, -1.0, 1.0);\n      const phi = Math.acos(cosphi);\n      const crtr = this.cbrt(r);\n      const t1 = 2.0 * crtr;\n      const root1 = t1 * this.cos(phi / 3.0) - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n      const root2 = t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\n      if (this.abs(root2 - center) < threshold) {\n        return this.range(root2, 0.0, 1.0);\n      }\n      const root3 = t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\n      return this.range(root3, 0.0, 1.0);\n    }\n    if (discriminant == 0.0) {\n      let u1;\n      if (q2 < 0.0) {\n        u1 = this.cbrt(-q2);\n      } else {\n        u1 = -this.cbrt(q2);\n      }\n      const root1 = 2.0 * u1 - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n      const root2 = -u1 - ba / 3.0;\n      return this.range(root2, 0.0, 1.0);\n    }\n    const sd = this.sqrt(discriminant);\n    const u1 = this.cbrt(sd - q2);\n    const v1 = this.cbrt(sd + q2);\n    const root1 = u1 - v1 - ba / 3.0;\n    return this.range(root1, 0.0, 1.0);\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {}\n}\n\n// Namespace definition for compatibility.\nCubismMath.Epsilon = 0.00001;\nimport * as $ from './cubismmath';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const CubismMath = _Live2DCubismFramework.CubismMath = $.CubismMath;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["CubismVector2","CubismMath","range","value","min","max","sin","x","Math","cos","abs","sqrt","cbrt","cx","isNegativeNumber","ret","Infinity","exp","log","getEasingSine","PI","left","right","degreesToRadian","degrees","radianToDegrees","radian","directionToRadian","from","to","q1","atan2","y","q2","directionToDegrees","degree","radianToDirection","totalAngle","quadraticEquation","a","b","c","Epsilon","cardanoAlgorithmForBezier","d","ba","ca","da","p","p3","q","discriminant","center","threshold","mp3","mp33","r","t","cosphi","phi","acos","crtr","t1","root1","root2","root3","u1","sd","v1","constructor","$","Live2DCubismFramework","_Live2DCubismFramework"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/Framework/src/math/cubismmath.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismVector2 } from './cubismvector2';\n\n/**\n * 数値計算などに使用するユーティリティクラス\n */\nexport class CubismMath {\n  static readonly Epsilon: number = 0.00001;\n\n  /**\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\n   *\n   * @param value 収められる値\n   * @param min   範囲の最小値\n   * @param max   範囲の最大値\n   * @return 最小値と最大値の範囲に収めた値\n   */\n  static range(value: number, min: number, max: number): number {\n    if (value < min) {\n      value = min;\n    } else if (value > max) {\n      value = max;\n    }\n\n    return value;\n  }\n\n  /**\n   * サイン関数の値を求める\n   *\n   * @param x 角度値（ラジアン）\n   * @return サイン関数sin(x)の値\n   */\n  static sin(x: number): number {\n    return Math.sin(x);\n  }\n\n  /**\n   * コサイン関数の値を求める\n   *\n   * @param x 角度値(ラジアン)\n   * @return コサイン関数cos(x)の値\n   */\n  static cos(x: number): number {\n    return Math.cos(x);\n  }\n\n  /**\n   * 値の絶対値を求める\n   *\n   * @param x 絶対値を求める値\n   * @return 値の絶対値\n   */\n  static abs(x: number): number {\n    return Math.abs(x);\n  }\n\n  /**\n   * 平方根(ルート)を求める\n   * @param x -> 平方根を求める値\n   * @return 値の平方根\n   */\n  static sqrt(x: number): number {\n    return Math.sqrt(x);\n  }\n\n  /**\n   * 立方根を求める\n   * @param x -> 立方根を求める値\n   * @return 値の立方根\n   */\n  static cbrt(x: number): number {\n    if (x === 0) {\n      return x;\n    }\n\n    let cx: number = x;\n    const isNegativeNumber: boolean = cx < 0;\n\n    if (isNegativeNumber) {\n      cx = -cx;\n    }\n\n    let ret: number;\n    if (cx === Infinity) {\n      ret = Infinity;\n    } else {\n      ret = Math.exp(Math.log(cx) / 3);\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\n    }\n    return isNegativeNumber ? -ret : ret;\n  }\n\n  /**\n   * イージング処理されたサインを求める\n   * フェードイン・アウト時のイージングに利用できる\n   *\n   * @param value イージングを行う値\n   * @return イージング処理されたサイン値\n   */\n  static getEasingSine(value: number): number {\n    if (value < 0.0) {\n      return 0.0;\n    } else if (value > 1.0) {\n      return 1.0;\n    }\n\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\n  }\n\n  /**\n   * 大きい方の値を返す\n   *\n   * @param left 左辺の値\n   * @param right 右辺の値\n   * @return 大きい方の値\n   */\n  static max(left: number, right: number): number {\n    return left > right ? left : right;\n  }\n\n  /**\n   * 小さい方の値を返す\n   *\n   * @param left  左辺の値\n   * @param right 右辺の値\n   * @return 小さい方の値\n   */\n  static min(left: number, right: number): number {\n    return left > right ? right : left;\n  }\n\n  /**\n   * 角度値をラジアン値に変換する\n   *\n   * @param degrees   角度値\n   * @return 角度値から変換したラジアン値\n   */\n  static degreesToRadian(degrees: number): number {\n    return (degrees / 180.0) * Math.PI;\n  }\n\n  /**\n   * ラジアン値を角度値に変換する\n   *\n   * @param radian    ラジアン値\n   * @return ラジアン値から変換した角度値\n   */\n  static radianToDegrees(radian: number): number {\n    return (radian * 180.0) / Math.PI;\n  }\n\n  /**\n   * ２つのベクトルからラジアン値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return ラジアン値から求めた方向ベクトル\n   */\n  static directionToRadian(from: CubismVector2, to: CubismVector2): number {\n    const q1: number = Math.atan2(to.y, to.x);\n    const q2: number = Math.atan2(from.y, from.x);\n\n    let ret: number = q1 - q2;\n\n    while (ret < -Math.PI) {\n      ret += Math.PI * 2.0;\n    }\n\n    while (ret > Math.PI) {\n      ret -= Math.PI * 2.0;\n    }\n\n    return ret;\n  }\n\n  /**\n   * ２つのベクトルから角度値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return 角度値から求めた方向ベクトル\n   */\n  static directionToDegrees(from: CubismVector2, to: CubismVector2): number {\n    const radian: number = this.directionToRadian(from, to);\n    let degree: number = this.radianToDegrees(radian);\n\n    if (to.x - from.x > 0.0) {\n      degree = -degree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * ラジアン値を方向ベクトルに変換する。\n   *\n   * @param totalAngle    ラジアン値\n   * @return ラジアン値から変換した方向ベクトル\n   */\n\n  static radianToDirection(totalAngle: number): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2();\n\n    ret.x = this.sin(totalAngle);\n    ret.y = this.cos(totalAngle);\n\n    return ret;\n  }\n\n  /**\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\n   * a * x^2 + b * x + c = 0\n   *\n   * @param   a -> 二次項の係数値\n   * @param   b -> 一次項の係数値\n   * @param   c -> 定数項の値\n   * @return  二次方程式の解\n   */\n  static quadraticEquation(a: number, b: number, c: number): number {\n    if (this.abs(a) < CubismMath.Epsilon) {\n      if (this.abs(b) < CubismMath.Epsilon) {\n        return -c;\n      }\n      return -c / b;\n    }\n\n    return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\n  }\n\n  /**\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\n   * 重解になったときには0.0～1.0の値になる解を返す。\n   *\n   * a * x^3 + b * x^2 + c * x + d = 0\n   *\n   * @param   a -> 三次項の係数値\n   * @param   b -> 二次項の係数値\n   * @param   c -> 一次項の係数値\n   * @param   d -> 定数項の値\n   * @return  0.0～1.0の間にある解\n   */\n  static cardanoAlgorithmForBezier(\n    a: number,\n    b: number,\n    c: number,\n    d: number\n  ): number {\n    if (this.sqrt(a) < CubismMath.Epsilon) {\n      return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\n    }\n\n    const ba: number = b / a;\n    const ca: number = c / a;\n    const da: number = d / a;\n\n    const p: number = (3.0 * ca - ba * ba) / 3.0;\n    const p3: number = p / 3.0;\n    const q: number = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\n    const q2: number = q / 2.0;\n    const discriminant: number = q2 * q2 + p3 * p3 * p3;\n\n    const center = 0.5;\n    const threshold: number = center + 0.01;\n\n    if (discriminant < 0.0) {\n      const mp3: number = -p / 3.0;\n      const mp33: number = mp3 * mp3 * mp3;\n      const r: number = this.sqrt(mp33);\n      const t: number = -q / (2.0 * r);\n      const cosphi: number = this.range(t, -1.0, 1.0);\n      const phi: number = Math.acos(cosphi);\n      const crtr: number = this.cbrt(r);\n      const t1: number = 2.0 * crtr;\n\n      const root1: number = t1 * this.cos(phi / 3.0) - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n\n      const root2: number =\n        t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\n      if (this.abs(root2 - center) < threshold) {\n        return this.range(root2, 0.0, 1.0);\n      }\n\n      const root3: number =\n        t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\n      return this.range(root3, 0.0, 1.0);\n    }\n\n    if (discriminant == 0.0) {\n      let u1: number;\n      if (q2 < 0.0) {\n        u1 = this.cbrt(-q2);\n      } else {\n        u1 = -this.cbrt(q2);\n      }\n\n      const root1: number = 2.0 * u1 - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n\n      const root2: number = -u1 - ba / 3.0;\n      return this.range(root2, 0.0, 1.0);\n    }\n\n    const sd: number = this.sqrt(discriminant);\n    const u1: number = this.cbrt(sd - q2);\n    const v1: number = this.cbrt(sd + q2);\n    const root1: number = u1 - v1 - ba / 3.0;\n    return this.range(root1, 0.0, 1.0);\n  }\n\n  /**\n   * コンストラクタ\n   */\n  private constructor() {}\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmath';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMath = $.CubismMath;\n  export type CubismMath = $.CubismMath;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}