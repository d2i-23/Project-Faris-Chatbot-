{"ast":null,"code":"/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport 'whatwg-fetch';\nimport { CubismDefaultParameterId } from '../Framework/src/cubismdefaultparameterid';\nimport { CubismModelSettingJson } from '../Framework/src/cubismmodelsettingjson';\nimport { BreathParameterData, CubismBreath } from '../Framework/src/effect/cubismbreath';\nimport { CubismEyeBlink } from '../Framework/src/effect/cubismeyeblink';\nimport { CubismFramework } from '../Framework/src/live2dcubismframework';\nimport { CubismUserModel } from '../Framework/src/model/cubismusermodel';\nimport { ACubismMotion } from '../Framework/src/motion/acubismmotion';\nimport { InvalidMotionQueueEntryHandleValue } from '../Framework/src/motion/cubismmotionqueuemanager';\nimport { csmMap } from '../Framework/src/type/csmmap';\nimport { csmVector } from '../Framework/src/type/csmvector';\nimport { CSM_ASSERT, CubismLogError, CubismLogInfo } from '../Framework/src/utils/cubismdebug';\nimport * as LAppDefine from './lappdefine';\nimport { canvas, frameBuffer, gl, LAppDelegate } from './lappdelegate';\nimport { LAppPal } from './lapppal';\nimport { LAppWavFileHandler } from './lappwavfilehandler';\nimport { CubismMoc } from '../Framework/src/model/cubismmoc';\nvar LoadStep = /*#__PURE__*/function (LoadStep) {\n  LoadStep[LoadStep[\"LoadAssets\"] = 0] = \"LoadAssets\";\n  LoadStep[LoadStep[\"LoadModel\"] = 1] = \"LoadModel\";\n  LoadStep[LoadStep[\"WaitLoadModel\"] = 2] = \"WaitLoadModel\";\n  LoadStep[LoadStep[\"LoadExpression\"] = 3] = \"LoadExpression\";\n  LoadStep[LoadStep[\"WaitLoadExpression\"] = 4] = \"WaitLoadExpression\";\n  LoadStep[LoadStep[\"LoadPhysics\"] = 5] = \"LoadPhysics\";\n  LoadStep[LoadStep[\"WaitLoadPhysics\"] = 6] = \"WaitLoadPhysics\";\n  LoadStep[LoadStep[\"LoadPose\"] = 7] = \"LoadPose\";\n  LoadStep[LoadStep[\"WaitLoadPose\"] = 8] = \"WaitLoadPose\";\n  LoadStep[LoadStep[\"SetupEyeBlink\"] = 9] = \"SetupEyeBlink\";\n  LoadStep[LoadStep[\"SetupBreath\"] = 10] = \"SetupBreath\";\n  LoadStep[LoadStep[\"LoadUserData\"] = 11] = \"LoadUserData\";\n  LoadStep[LoadStep[\"WaitLoadUserData\"] = 12] = \"WaitLoadUserData\";\n  LoadStep[LoadStep[\"SetupEyeBlinkIds\"] = 13] = \"SetupEyeBlinkIds\";\n  LoadStep[LoadStep[\"SetupLipSyncIds\"] = 14] = \"SetupLipSyncIds\";\n  LoadStep[LoadStep[\"SetupLayout\"] = 15] = \"SetupLayout\";\n  LoadStep[LoadStep[\"LoadMotion\"] = 16] = \"LoadMotion\";\n  LoadStep[LoadStep[\"WaitLoadMotion\"] = 17] = \"WaitLoadMotion\";\n  LoadStep[LoadStep[\"CompleteInitialize\"] = 18] = \"CompleteInitialize\";\n  LoadStep[LoadStep[\"CompleteSetupModel\"] = 19] = \"CompleteSetupModel\";\n  LoadStep[LoadStep[\"LoadTexture\"] = 20] = \"LoadTexture\";\n  LoadStep[LoadStep[\"WaitLoadTexture\"] = 21] = \"WaitLoadTexture\";\n  LoadStep[LoadStep[\"CompleteSetup\"] = 22] = \"CompleteSetup\";\n  return LoadStep;\n}(LoadStep || {});\n/**\n * ユーザーが実際に使用するモデルの実装クラス<br>\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\n */\nexport class LAppModel extends CubismUserModel {\n  /**\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\n   * @param dir\n   * @param fileName\n   */\n  loadAssets(dir, fileName) {\n    this._modelHomeDir = dir;\n    var request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'location': `${this._modelHomeDir}${fileName}`\n      })\n    };\n    fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n      const setting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);\n\n      // ステートを更新\n      this._state = LoadStep.LoadModel;\n\n      // 結果を保存\n      this.setupModel(setting);\n    });\n  }\n\n  /**\n   * model3.jsonからモデルを生成する。\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\n   *\n   * @param setting ICubismModelSettingのインスタンス\n   */\n  setupModel(setting) {\n    this._updating = true;\n    this._initialized = false;\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'location': `${this._modelHomeDir}${modelFileName}`\n        })\n      };\n      fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        this.loadModel(arrayBuffer, this._mocConsistency);\n        this._state = LoadStep.LoadExpression;\n\n        // callback\n        loadCubismExpression();\n      });\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = () => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count = this._modelSetting.getExpressionCount();\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName = this._modelSetting.getExpressionFileName(i);\n          var request = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              'location': `${this._modelHomeDir}${expressionFileName}`\n            })\n          };\n          fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n            const motion = this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);\n            if (this._expressions.getValue(expressionName) != null) {\n              ACubismMotion.delete(this._expressions.getValue(expressionName));\n              this._expressions.setValue(expressionName, null);\n            }\n            this._expressions.setValue(expressionName, motion);\n            this._expressionCount++;\n            if (this._expressionCount >= count) {\n              this._state = LoadStep.LoadPhysics;\n\n              // callback\n              loadCubismPhysics();\n            }\n          });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = () => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'location': `${this._modelHomeDir}${physicsFileName}`\n          })\n        };\n        fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.LoadPose;\n\n          // callback\n          loadCubismPose();\n        });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = () => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'location': `${this._modelHomeDir}${poseFileName}`\n          })\n        };\n        fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.SetupEyeBlink;\n\n          // callback\n          setupEyeBlink();\n        });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = () => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = () => {\n      this._breath = CubismBreath.create();\n      const breathParameters = new csmVector();\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));\n      breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.5, 0.5, 3.2345, 1));\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = () => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'location': `${this._modelHomeDir}${userDataFile}`\n          })\n        };\n        fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n          this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n          this._state = LoadStep.SetupEyeBlinkIds;\n\n          // callback\n          setupEyeBlinkIds();\n        });\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = () => {\n      const eyeBlinkIdCount = this._modelSetting.getEyeBlinkParameterCount();\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(this._modelSetting.getEyeBlinkParameterId(i));\n      }\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = () => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = () => {\n      const layout = new csmMap();\n      if (this._modelSetting == null || this._modelMatrix == null) {\n        CubismLogError('Failed to setupLayout().');\n        return;\n      }\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = () => {\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group = [];\n      const motionGroupCount = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n        this._updating = false;\n        this._initialized = true;\n        this.createRenderer();\n        this.setupTextures();\n        this.getRenderer().startUp(gl);\n      }\n    };\n  }\n\n  /**\n   * テクスチャユニットにテクスチャをロードする\n   */\n  setupTextures() {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount = this._modelSetting.getTextureCount();\n      for (let modelTextureNumber = 0; modelTextureNumber < textureCount; modelTextureNumber++) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          console.log('getTextureFileName null');\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        let texturePath = this._modelSetting.getTextureFileName(modelTextureNumber);\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        const onLoad = textureInfo => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n          this._textureCount++;\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\n   * レンダラを再構築する\n   */\n  reloadRenderer() {\n    this.deleteRenderer();\n    this.createRenderer();\n    this.setupTextures();\n  }\n\n  /**\n   * 更新\n   */\n  update() {\n    if (this._state != LoadStep.CompleteSetup) return;\n    const deltaTimeSeconds = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      // モーションの再生がない場合、待機モーションの中からランダムで再生する\n      this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\n    } else {\n      motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds); // モーションを更新\n    }\n\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      let value = 0.0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      this._wavFileHandler.update(deltaTimeSeconds);\n      value = this._wavFileHandler.getRms();\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n    this._model.update();\n  }\n\n  /**\n   * 引数で指定したモーションの再生を開始する\n   * @param group モーショングループ名\n   * @param no グループ内の番号\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  startMotion(group, no, priority, onFinishedMotionHandler) {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion = this._motions.getValue(name);\n    let autoDelete = false;\n    if (motion == null) {\n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'location': `${this._modelHomeDir}${motionFileName}`\n        })\n      };\n      fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        motion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);\n        let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, no);\n        if (fadeTime >= 0.0) {\n          motion.setFadeInTime(fadeTime);\n        }\n        fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\n        if (fadeTime >= 0.0) {\n          motion.setFadeOutTime(fadeTime);\n        }\n        motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        autoDelete = true; // 終了時にメモリから削除\n      });\n    } else {\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n\n    //!voice\n    const voice = this._modelSetting.getMotionSoundFileName(group, no);\n    if (voice.localeCompare('') != 0) {\n      let path = voice;\n      path = this._modelHomeDir + path;\n      this._wavFileHandler.start(path);\n    }\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\n    }\n    return this._motionManager.startMotionPriority(motion, autoDelete, priority);\n  }\n  /**\n   * ランダムに選ばれたモーションの再生を開始する。\n   * @param group モーショングループ名\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  startRandomMotion(group, priority, onFinishedMotionHandler) {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    const no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\n  }\n\n  /**\n   * 引数で指定した表情モーションをセットする\n   *\n   * @param expressionId 表情モーションのID\n   */\n  setExpression(expressionId) {\n    const motion = this._expressions.getValue(expressionId);\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n    if (motion != null) {\n      this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\n   * ランダムに選ばれた表情モーションをセットする\n   */\n  setRandomExpression() {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n    const no = Math.floor(Math.random() * this._expressions.getSize());\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name = this._expressions._keyValues[i].first;\n        console.log(name);\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * イベントの発火を受け取る\n   */\n  motionEventFired(eventValue) {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\n   * 当たり判定テスト\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\n   *\n   * @param hitArenaName  当たり判定をテストする対象のID\n   * @param x             判定を行うX座標\n   * @param y             判定を行うY座標\n   */\n  hitTest(hitArenaName, x, y) {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n    const count = this._modelSetting.getHitAreasCount();\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * モーションデータをグループ名から一括でロードする。\n   * モーションデータの名前は内部でModelSettingから取得する。\n   *\n   * @param group モーションデータのグループ名\n   */\n  preLoadMotionGroup(group) {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]load motion: ${motionFileName} => [${name}]`);\n      }\n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'location': `${this._modelHomeDir}${motionFileName}`\n        })\n      };\n      fetch('/Resources', request).then(response => response.arrayBuffer()).then(arrayBuffer => {\n        const tmpMotion = this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name);\n        let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, i);\n        if (fadeTime >= 0.0) {\n          tmpMotion.setFadeInTime(fadeTime);\n        }\n        fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\n        if (fadeTime >= 0.0) {\n          tmpMotion.setFadeOutTime(fadeTime);\n        }\n        tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n        if (this._motions.getValue(name) != null) {\n          ACubismMotion.delete(this._motions.getValue(name));\n        }\n        this._motions.setValue(name, tmpMotion);\n        this._motionCount++;\n        if (this._motionCount >= this._allMotionCount) {\n          this._state = LoadStep.LoadTexture;\n\n          // 全てのモーションを停止する\n          this._motionManager.stopAllMotions();\n          this._updating = false;\n          this._initialized = true;\n          this.createRenderer();\n          this.setupTextures();\n          this.getRenderer().startUp(gl);\n        }\n      });\n    }\n  }\n\n  /**\n   * すべてのモーションデータを解放する。\n   */\n  releaseMotions() {\n    this._motions.clear();\n  }\n\n  /**\n   * 全ての表情データを解放する。\n   */\n  releaseExpressions() {\n    this._expressions.clear();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  doDraw() {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const viewport = [0, 0, canvas.width, canvas.height];\n    this.getRenderer().setRenderState(frameBuffer, viewport);\n    this.getRenderer().drawModel();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  draw(matrix) {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n      this.getRenderer().setMvpMatrix(matrix);\n      this.doDraw();\n    }\n  }\n  async hasMocConsistencyFromFile() {\n    CSM_ASSERT(this._modelSetting.getModelFileName().localeCompare(``));\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'location': `${this._modelHomeDir}${modelFileName}`\n        })\n      };\n      const response = await fetch('/Resources', request);\n      const arrayBuffer = await response.arrayBuffer();\n      this._consistency = CubismMoc.hasMocConsistency(arrayBuffer);\n      if (!this._consistency) {\n        CubismLogInfo('Inconsistent MOC3.');\n      } else {\n        CubismLogInfo('Consistent MOC3.');\n      }\n      return this._consistency;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    this.public = void 0;\n    this._modelSetting = void 0;\n    // モデルセッティング情報\n    this._modelHomeDir = void 0;\n    // モデルセッティングが置かれたディレクトリ\n    this._userTimeSeconds = void 0;\n    // デルタ時間の積算値[秒]\n    this._eyeBlinkIds = void 0;\n    // モデルに設定された瞬き機能用パラメータID\n    this._lipSyncIds = void 0;\n    // モデルに設定されたリップシンク機能用パラメータID\n    this._motions = void 0;\n    // 読み込まれているモーションのリスト\n    this._expressions = void 0;\n    // 読み込まれている表情のリスト\n    this._hitArea = void 0;\n    this._userArea = void 0;\n    this._idParamAngleX = void 0;\n    // パラメータID: ParamAngleX\n    this._idParamAngleY = void 0;\n    // パラメータID: ParamAngleY\n    this._idParamAngleZ = void 0;\n    // パラメータID: ParamAngleZ\n    this._idParamEyeBallX = void 0;\n    // パラメータID: ParamEyeBallX\n    this._idParamEyeBallY = void 0;\n    // パラメータID: ParamEyeBAllY\n    this._idParamBodyAngleX = void 0;\n    // パラメータID: ParamBodyAngleX\n    this._state = void 0;\n    // 現在のステータス管理用\n    this._expressionCount = void 0;\n    // 表情データカウント\n    this._textureCount = void 0;\n    // テクスチャカウント\n    this._motionCount = void 0;\n    // モーションデータカウント\n    this._allMotionCount = void 0;\n    // モーション総数\n    this._wavFileHandler = void 0;\n    //wavファイルハンドラ\n    this._consistency = void 0;\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n    this._eyeBlinkIds = new csmVector();\n    this._lipSyncIds = new csmVector();\n    this._motions = new csmMap();\n    this._expressions = new csmMap();\n    this._hitArea = new csmVector();\n    this._userArea = new csmVector();\n    this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);\n    this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);\n    if (LAppDefine.MOCConsistencyValidationEnable) {\n      this._mocConsistency = true;\n    }\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n    this._wavFileHandler = new LAppWavFileHandler();\n    this._consistency = false;\n  }\n\n  // MOC3一貫性チェック管理用\n}","map":{"version":3,"names":["CubismDefaultParameterId","CubismModelSettingJson","BreathParameterData","CubismBreath","CubismEyeBlink","CubismFramework","CubismUserModel","ACubismMotion","InvalidMotionQueueEntryHandleValue","csmMap","csmVector","CSM_ASSERT","CubismLogError","CubismLogInfo","LAppDefine","canvas","frameBuffer","gl","LAppDelegate","LAppPal","LAppWavFileHandler","CubismMoc","LoadStep","LAppModel","loadAssets","dir","fileName","_modelHomeDir","request","method","headers","body","JSON","stringify","fetch","then","response","arrayBuffer","setting","byteLength","_state","LoadModel","setupModel","_updating","_initialized","_modelSetting","getModelFileName","modelFileName","loadModel","_mocConsistency","LoadExpression","loadCubismExpression","WaitLoadModel","printMessage","getExpressionCount","count","i","expressionName","getExpressionName","expressionFileName","getExpressionFileName","motion","loadExpression","_expressions","getValue","delete","setValue","_expressionCount","LoadPhysics","loadCubismPhysics","WaitLoadExpression","getPhysicsFileName","physicsFileName","loadPhysics","LoadPose","loadCubismPose","WaitLoadPhysics","getPoseFileName","poseFileName","loadPose","SetupEyeBlink","setupEyeBlink","WaitLoadPose","getEyeBlinkParameterCount","_eyeBlink","create","SetupBreath","setupBreath","_breath","breathParameters","pushBack","_idParamAngleX","_idParamAngleY","_idParamAngleZ","_idParamBodyAngleX","getIdManager","getId","ParamBreath","setParameters","LoadUserData","loadUserData","getUserDataFile","userDataFile","SetupEyeBlinkIds","setupEyeBlinkIds","WaitLoadUserData","eyeBlinkIdCount","_eyeBlinkIds","getEyeBlinkParameterId","SetupLipSyncIds","setupLipSyncIds","lipSyncIdCount","getLipSyncParameterCount","_lipSyncIds","getLipSyncParameterId","SetupLayout","setupLayout","layout","_modelMatrix","getLayoutMap","setupFromLayout","LoadMotion","loadCubismMotion","WaitLoadMotion","_model","saveParameters","_allMotionCount","_motionCount","group","motionGroupCount","getMotionGroupCount","getMotionGroupName","getMotionCount","preLoadMotionGroup","LoadTexture","_motionManager","stopAllMotions","createRenderer","setupTextures","getRenderer","startUp","usePremultiply","textureCount","getTextureCount","modelTextureNumber","getTextureFileName","console","log","texturePath","onLoad","textureInfo","bindTexture","id","_textureCount","CompleteSetup","getInstance","getTextureManager","createTextureFromPngFile","setIsPremultipliedAlpha","WaitLoadTexture","reloadRenderer","deleteRenderer","update","deltaTimeSeconds","getDeltaTime","_userTimeSeconds","_dragManager","_dragX","getX","_dragY","getY","motionUpdated","loadParameters","isFinished","startRandomMotion","MotionGroupIdle","PriorityIdle","updateMotion","updateParameters","_expressionManager","addParameterValueById","_idParamEyeBallX","_idParamEyeBallY","_physics","evaluate","_lipsync","value","_wavFileHandler","getRms","getSize","at","_pose","startMotion","no","priority","onFinishedMotionHandler","PriorityForce","setReservePriority","reserveMotion","_debugMode","motionFileName","getMotionFileName","name","_motions","autoDelete","loadMotion","fadeTime","getMotionFadeInTimeValue","setFadeInTime","getMotionFadeOutTimeValue","setFadeOutTime","setEffectIds","setFinishedMotionHandler","voice","getMotionSoundFileName","localeCompare","path","start","startMotionPriority","Math","floor","random","setExpression","expressionId","setRandomExpression","_keyValues","first","motionEventFired","eventValue","s","hitTest","hitArenaName","x","y","_opacity","getHitAreasCount","getHitAreaName","drawId","getHitAreaId","isHit","tmpMotion","releaseMotions","clear","releaseExpressions","doDraw","viewport","width","height","setRenderState","drawModel","draw","matrix","multiplyByMatrix","setMvpMatrix","hasMocConsistencyFromFile","_consistency","hasMocConsistency","constructor","public","_hitArea","_userArea","ParamAngleX","ParamAngleY","ParamAngleZ","ParamEyeBallX","ParamEyeBallY","ParamBodyAngleX","MOCConsistencyValidationEnable","LoadAssets"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/src/lappmodel.ts"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport 'whatwg-fetch';\n\nimport { CubismDefaultParameterId } from '../Framework/src/cubismdefaultparameterid';\nimport { CubismModelSettingJson } from '../Framework/src/cubismmodelsettingjson';\nimport {\n  BreathParameterData,\n  CubismBreath\n} from '../Framework/src/effect/cubismbreath';\nimport { CubismEyeBlink } from '../Framework/src/effect/cubismeyeblink';\nimport { ICubismModelSetting } from '../Framework/src/icubismmodelsetting';\nimport { CubismIdHandle } from '../Framework/src/id/cubismid';\nimport { CubismFramework } from '../Framework/src/live2dcubismframework';\nimport { CubismMatrix44 } from '../Framework/src/math/cubismmatrix44';\nimport { CubismUserModel } from '../Framework/src/model/cubismusermodel';\nimport {\n  ACubismMotion,\n  FinishedMotionCallback\n} from '../Framework/src/motion/acubismmotion';\nimport { CubismMotion } from '../Framework/src/motion/cubismmotion';\nimport {\n  CubismMotionQueueEntryHandle,\n  InvalidMotionQueueEntryHandleValue\n} from '../Framework/src/motion/cubismmotionqueuemanager';\nimport { csmMap } from '../Framework/src/type/csmmap';\nimport { csmRect } from '../Framework/src/type/csmrectf';\nimport { csmString } from '../Framework/src/type/csmstring';\nimport { csmVector } from '../Framework/src/type/csmvector';\nimport {\n  CSM_ASSERT,\n  CubismLogError,\n  CubismLogInfo\n} from '../Framework/src/utils/cubismdebug';\n\nimport * as LAppDefine from './lappdefine';\nimport { canvas, frameBuffer, gl, LAppDelegate } from './lappdelegate';\nimport { LAppPal } from './lapppal';\nimport { TextureInfo } from './lapptexturemanager';\nimport { LAppWavFileHandler } from './lappwavfilehandler';\nimport { CubismMoc } from '../Framework/src/model/cubismmoc';\n\nenum LoadStep {\n  LoadAssets,\n  LoadModel,\n  WaitLoadModel,\n  LoadExpression,\n  WaitLoadExpression,\n  LoadPhysics,\n  WaitLoadPhysics,\n  LoadPose,\n  WaitLoadPose,\n  SetupEyeBlink,\n  SetupBreath,\n  LoadUserData,\n  WaitLoadUserData,\n  SetupEyeBlinkIds,\n  SetupLipSyncIds,\n  SetupLayout,\n  LoadMotion,\n  WaitLoadMotion,\n  CompleteInitialize,\n  CompleteSetupModel,\n  LoadTexture,\n  WaitLoadTexture,\n  CompleteSetup\n}\n\n/**\n * ユーザーが実際に使用するモデルの実装クラス<br>\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\n */\nexport class LAppModel extends CubismUserModel {\n  /**\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\n   * @param dir\n   * @param fileName\n   */\n  public loadAssets(dir: string, fileName: string): void {\n    this._modelHomeDir = dir;\n\n    var request = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({'location': `${this._modelHomeDir}${fileName}`})\n      }\n\n      fetch('/Resources', request)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => {\n        const setting: ICubismModelSetting = new CubismModelSettingJson(\n          arrayBuffer,\n          arrayBuffer.byteLength\n        );\n\n        // ステートを更新\n        this._state = LoadStep.LoadModel;\n\n        // 結果を保存\n        this.setupModel(setting);\n      });\n  }\n\n  /**\n   * model3.jsonからモデルを生成する。\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\n   *\n   * @param setting ICubismModelSettingのインスタンス\n   */\n  private setupModel(setting: ICubismModelSetting): void {\n    this._updating = true;\n    this._initialized = false;\n\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n\n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({'location': `${this._modelHomeDir}${modelFileName}`})\n        }\n\n        fetch('/Resources', request)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          this.loadModel(arrayBuffer, this._mocConsistency);\n          this._state = LoadStep.LoadExpression;\n\n          // callback\n          loadCubismExpression();\n        });\n\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = (): void => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count: number = this._modelSetting.getExpressionCount();\n\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName =\n            this._modelSetting.getExpressionFileName(i);\n          \n          var request = {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({'location': `${this._modelHomeDir}${expressionFileName}`})\n            }\n\n            fetch('/Resources', request)\n            .then(response => response.arrayBuffer())\n            .then(arrayBuffer => {\n              const motion: ACubismMotion = this.loadExpression(\n                arrayBuffer,\n                arrayBuffer.byteLength,\n                expressionName\n              );\n\n              if (this._expressions.getValue(expressionName) != null) {\n                ACubismMotion.delete(\n                  this._expressions.getValue(expressionName)\n                );\n                this._expressions.setValue(expressionName, null);\n              }\n\n              this._expressions.setValue(expressionName, motion);\n\n              this._expressionCount++;\n\n              if (this._expressionCount >= count) {\n                this._state = LoadStep.LoadPhysics;\n\n                // callback\n                loadCubismPhysics();\n              }\n            });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = (): void => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n\n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({'location': `${this._modelHomeDir}${physicsFileName}`})\n          }\n    \n\n          fetch('/Resources', request)\n          .then(response => response.arrayBuffer())\n          .then(arrayBuffer => {\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.LoadPose;\n\n            // callback\n            loadCubismPose();\n          });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = (): void => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n\n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({'location': `${this._modelHomeDir}${poseFileName}`})\n          }\n    \n\n          fetch('/Resources', request)\n          .then(response => response.arrayBuffer())\n          .then(arrayBuffer => {\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlink;\n\n            // callback\n            setupEyeBlink();\n          });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = (): void => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = (): void => {\n      this._breath = CubismBreath.create();\n\n      const breathParameters: csmVector<BreathParameterData> = new csmVector();\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(\n          CubismFramework.getIdManager().getId(\n            CubismDefaultParameterId.ParamBreath\n          ),\n          0.5,\n          0.5,\n          3.2345,\n          1\n        )\n      );\n\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = (): void => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n\n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({'location': `${this._modelHomeDir}${userDataFile}`})\n          }\n    \n          fetch('/Resources', request)\n          .then(response => response.arrayBuffer())\n          .then(arrayBuffer => {\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlinkIds;\n\n            // callback\n            setupEyeBlinkIds();\n          });\n\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = (): void => {\n      const eyeBlinkIdCount: number =\n        this._modelSetting.getEyeBlinkParameterCount();\n\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(\n          this._modelSetting.getEyeBlinkParameterId(i)\n        );\n      }\n\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = (): void => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = (): void => {\n      const layout: csmMap<string, number> = new csmMap<string, number>();\n\n      if (this._modelSetting == null || this._modelMatrix == null) {\n        CubismLogError('Failed to setupLayout().');\n        return;\n      }\n\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = (): void => {\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group: string[] = [];\n\n      const motionGroupCount: number = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n\n        this._updating = false;\n        this._initialized = true;\n\n        this.createRenderer();\n        this.setupTextures();\n        this.getRenderer().startUp(gl);\n      }\n    };\n  }\n\n  /**\n   * テクスチャユニットにテクスチャをロードする\n   */\n  private setupTextures(): void {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount: number = this._modelSetting.getTextureCount();\n\n      for (\n        let modelTextureNumber = 0;\n        modelTextureNumber < textureCount;\n        modelTextureNumber++\n      ) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          console.log('getTextureFileName null');\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        let texturePath =\n          this._modelSetting.getTextureFileName(modelTextureNumber);\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        const onLoad = (textureInfo: TextureInfo): void => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n\n          this._textureCount++;\n\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        LAppDelegate.getInstance()\n          .getTextureManager()\n          .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\n   * レンダラを再構築する\n   */\n  public reloadRenderer(): void {\n    this.deleteRenderer();\n    this.createRenderer();\n    this.setupTextures();\n  }\n\n  /**\n   * 更新\n   */\n  public update(): void {\n    if (this._state != LoadStep.CompleteSetup) return;\n\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      // モーションの再生がない場合、待機モーションの中からランダムで再生する\n      this.startRandomMotion(\n        LAppDefine.MotionGroupIdle,\n        LAppDefine.PriorityIdle\n      );\n    } else {\n      motionUpdated = this._motionManager.updateMotion(\n        this._model,\n        deltaTimeSeconds\n      ); // モーションを更新\n    }\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(\n      this._idParamAngleZ,\n      this._dragX * this._dragY * -30\n    );\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(\n      this._idParamBodyAngleX,\n      this._dragX * 10\n    ); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      let value = 0.0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      this._wavFileHandler.update(deltaTimeSeconds);\n      value = this._wavFileHandler.getRms();\n\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    this._model.update();\n  }\n\n  /**\n   * 引数で指定したモーションの再生を開始する\n   * @param group モーショングループ名\n   * @param no グループ内の番号\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startMotion(\n    group: string,\n    no: number,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion: CubismMotion = this._motions.getValue(name) as CubismMotion;\n    let autoDelete = false;\n\n    if (motion == null) {   \n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({'location': `${this._modelHomeDir}${motionFileName}`})\n        };\n        fetch('/Resources', request)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          motion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            null,\n            onFinishedMotionHandler\n          );\n          let fadeTime: number = this._modelSetting.getMotionFadeInTimeValue(\n            group,\n            no\n          );\n\n          if (fadeTime >= 0.0) {\n            motion.setFadeInTime(fadeTime);\n          }\n\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, no);\n          if (fadeTime >= 0.0) {\n            motion.setFadeOutTime(fadeTime);\n          }\n\n          motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n          autoDelete = true; // 終了時にメモリから削除\n        });\n    } else {\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n\n    //!voice\n    const voice = this._modelSetting.getMotionSoundFileName(group, no);\n    if (voice.localeCompare('') != 0) {\n      let path = voice;\n      path = this._modelHomeDir + path;\n      this._wavFileHandler.start(path);\n    }\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\n    }\n    return this._motionManager.startMotionPriority(\n      motion,\n      autoDelete,\n      priority\n    );\n  }\n\n  public \n\n  /**\n   * ランダムに選ばれたモーションの再生を開始する。\n   * @param group モーショングループ名\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startRandomMotion(\n    group: string,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const no: number = Math.floor(\n      Math.random() * this._modelSetting.getMotionCount(group)\n    );\n\n    return this.startMotion(group, no, priority, onFinishedMotionHandler);\n  }\n\n  /**\n   * 引数で指定した表情モーションをセットする\n   *\n   * @param expressionId 表情モーションのID\n   */\n  public setExpression(expressionId: string): void {\n    const motion: ACubismMotion = this._expressions.getValue(expressionId);\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n\n    if (motion != null) {\n      this._expressionManager.startMotionPriority(\n        motion,\n        false,\n        LAppDefine.PriorityForce\n      );\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\n   * ランダムに選ばれた表情モーションをセットする\n   */\n  public setRandomExpression(): void {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n\n    const no: number = Math.floor(Math.random() * this._expressions.getSize());\n\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name: string = this._expressions._keyValues[i].first;\n        console.log(name)\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * イベントの発火を受け取る\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\n   * 当たり判定テスト\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\n   *\n   * @param hitArenaName  当たり判定をテストする対象のID\n   * @param x             判定を行うX座標\n   * @param y             判定を行うY座標\n   */\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n\n    const count: number = this._modelSetting.getHitAreasCount();\n\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * モーションデータをグループ名から一括でロードする。\n   * モーションデータの名前は内部でModelSettingから取得する。\n   *\n   * @param group モーションデータのグループ名\n   */\n  public preLoadMotionGroup(group: string): void {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(\n          `[APP]load motion: ${motionFileName} => [${name}]`\n        );\n      }\n      \n        var request = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({'location': `${this._modelHomeDir}${motionFileName}`})\n          }\n\n\n        fetch('/Resources', request)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => {\n          const tmpMotion: CubismMotion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            name\n          );\n\n          let fadeTime = this._modelSetting.getMotionFadeInTimeValue(group, i);\n          if (fadeTime >= 0.0) {\n            tmpMotion.setFadeInTime(fadeTime);\n          }\n\n          fadeTime = this._modelSetting.getMotionFadeOutTimeValue(group, i);\n          if (fadeTime >= 0.0) {\n            tmpMotion.setFadeOutTime(fadeTime);\n          }\n          tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n\n          if (this._motions.getValue(name) != null) {\n            ACubismMotion.delete(this._motions.getValue(name));\n          }\n\n          this._motions.setValue(name, tmpMotion);\n\n          this._motionCount++;\n          if (this._motionCount >= this._allMotionCount) {\n            this._state = LoadStep.LoadTexture;\n\n            // 全てのモーションを停止する\n            this._motionManager.stopAllMotions();\n\n            this._updating = false;\n            this._initialized = true;\n\n            this.createRenderer();\n            this.setupTextures();\n            this.getRenderer().startUp(gl);\n          }\n        });\n    }\n  }\n\n  /**\n   * すべてのモーションデータを解放する。\n   */\n  public releaseMotions(): void {\n    this._motions.clear();\n  }\n\n  /**\n   * 全ての表情データを解放する。\n   */\n  public releaseExpressions(): void {\n    this._expressions.clear();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public doDraw(): void {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\n\n    this.getRenderer().setRenderState(frameBuffer, viewport);\n    this.getRenderer().drawModel();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public draw(matrix: CubismMatrix44): void {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n\n      this.getRenderer().setMvpMatrix(matrix);\n\n      this.doDraw();\n    }\n  }\n\n  public async hasMocConsistencyFromFile() {\n    CSM_ASSERT(this._modelSetting.getModelFileName().localeCompare(``));\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n\n      \n      var request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({'location': `${this._modelHomeDir}${modelFileName}`})\n        }\n\n\n      const response = await fetch('/Resources', request);\n      const arrayBuffer = await response.arrayBuffer();\n\n      this._consistency = CubismMoc.hasMocConsistency(arrayBuffer);\n\n      if (!this._consistency) {\n        CubismLogInfo('Inconsistent MOC3.');\n      } else {\n        CubismLogInfo('Consistent MOC3.');\n      }\n\n      return this._consistency;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n\n    this._eyeBlinkIds = new csmVector<CubismIdHandle>();\n    this._lipSyncIds = new csmVector<CubismIdHandle>();\n\n    this._motions = new csmMap<string, ACubismMotion>();\n    this._expressions = new csmMap<string, ACubismMotion>();\n\n    this._hitArea = new csmVector<csmRect>();\n    this._userArea = new csmVector<csmRect>();\n\n    this._idParamAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleX\n    );\n    this._idParamAngleY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleY\n    );\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleZ\n    );\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallX\n    );\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallY\n    );\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamBodyAngleX\n    );\n\n    if (LAppDefine.MOCConsistencyValidationEnable) {\n      this._mocConsistency = true;\n    }\n\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n    this._wavFileHandler = new LAppWavFileHandler();\n    this._consistency = false;\n  }\n\n  _modelSetting: ICubismModelSetting; // モデルセッティング情報\n  _modelHomeDir: string; // モデルセッティングが置かれたディレクトリ\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  _eyeBlinkIds: csmVector<CubismIdHandle>; // モデルに設定された瞬き機能用パラメータID\n  _lipSyncIds: csmVector<CubismIdHandle>; // モデルに設定されたリップシンク機能用パラメータID\n\n  _motions: csmMap<string, ACubismMotion>; // 読み込まれているモーションのリスト\n  _expressions: csmMap<string, ACubismMotion>; // 読み込まれている表情のリスト\n\n  _hitArea: csmVector<csmRect>;\n  _userArea: csmVector<csmRect>;\n\n  _idParamAngleX: CubismIdHandle; // パラメータID: ParamAngleX\n  _idParamAngleY: CubismIdHandle; // パラメータID: ParamAngleY\n  _idParamAngleZ: CubismIdHandle; // パラメータID: ParamAngleZ\n  _idParamEyeBallX: CubismIdHandle; // パラメータID: ParamEyeBallX\n  _idParamEyeBallY: CubismIdHandle; // パラメータID: ParamEyeBAllY\n  _idParamBodyAngleX: CubismIdHandle; // パラメータID: ParamBodyAngleX\n\n  _state: number; // 現在のステータス管理用\n  _expressionCount: number; // 表情データカウント\n  _textureCount: number; // テクスチャカウント\n  _motionCount: number; // モーションデータカウント\n  _allMotionCount: number; // モーション総数\n  _wavFileHandler: LAppWavFileHandler; //wavファイルハンドラ\n  _consistency: boolean; // MOC3一貫性チェック管理用\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}