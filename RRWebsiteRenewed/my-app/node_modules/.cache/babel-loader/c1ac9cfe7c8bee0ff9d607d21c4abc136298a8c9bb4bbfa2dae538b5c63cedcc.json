{"ast":null,"code":"/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\n\nimport { Live2DCubismFramework as cubismmath } from './cubismmath';\nvar CubismMath = cubismmath.CubismMath;\nexport let Live2DCubismFramework;\n(function (_Live2DCubismFramework) {\n  const FrameRate = 30;\n  const Epsilon = 0.01;\n\n  /**\r\n   * 顔の向きの制御機能\r\n   *\r\n   * 顔の向きの制御機能を提供するクラス。\r\n   */\n  class CubismTargetPoint {\n    /**\r\n     * コンストラクタ\r\n     */\n    constructor() {\n      this._faceTargetX = void 0;\n      // 顔の向きのX目標値（この値に近づいていく）\n      this._faceTargetY = void 0;\n      // 顔の向きのY目標値（この値に近づいていく）\n      this._faceX = void 0;\n      // 顔の向きX（-1.0 ~ 1.0）\n      this._faceY = void 0;\n      // 顔の向きY（-1.0 ~ 1.0）\n      this._faceVX = void 0;\n      // 顔の向きの変化速度X\n      this._faceVY = void 0;\n      // 顔の向きの変化速度Y\n      this._lastTimeSeconds = void 0;\n      // 最後の実行時間[秒]\n      this._userTimeSeconds = void 0;\n      this._faceTargetX = 0.0;\n      this._faceTargetY = 0.0;\n      this._faceX = 0.0;\n      this._faceY = 0.0;\n      this._faceVX = 0.0;\n      this._faceVY = 0.0;\n      this._lastTimeSeconds = 0.0;\n      this._userTimeSeconds = 0.0;\n    }\n\n    /**\r\n     * 更新処理\r\n     */\n    update(deltaTimeSeconds) {\n      // デルタ時間を加算する\n      this._userTimeSeconds += deltaTimeSeconds;\n\n      // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\n      // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\n      const faceParamMaxV = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\n      const maxV = faceParamMaxV * 1.0 / FrameRate; // 1frameあたりに変化できる速度の上限\n\n      if (this._lastTimeSeconds == 0.0) {\n        this._lastTimeSeconds = this._userTimeSeconds;\n        return;\n      }\n      const deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\n      this._lastTimeSeconds = this._userTimeSeconds;\n\n      // 最高速度になるまでの時間を\n      const timeToMaxSpeed = 0.15;\n      const frameToMaxSpeed = timeToMaxSpeed * FrameRate; // sec * frame/sec\n      const maxA = deltaTimeWeight * maxV / frameToMaxSpeed; // 1frameあたりの加速度\n\n      // 目指す向きは、（dx, dy）方向のベクトルとなる\n      const dx = this._faceTargetX - this._faceX;\n      const dy = this._faceTargetY - this._faceY;\n      if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\n        return; // 変化なし\n      }\n\n      // 速度の最大よりも大きい場合は、速度を落とす\n      const d = CubismMath.sqrt(dx * dx + dy * dy);\n\n      // 進行方向の最大速度ベクトル\n      const vx = maxV * dx / d;\n      const vy = maxV * dy / d;\n\n      // 現在の速度から、新規速度への変化（加速度）を求める\n      let ax = vx - this._faceVX;\n      let ay = vy - this._faceVY;\n      const a = CubismMath.sqrt(ax * ax + ay * ay);\n\n      // 加速のとき\n      if (a < -maxA || a > maxA) {\n        ax *= maxA / a;\n        ay *= maxA / a;\n      }\n\n      // 加速度を元の速度に足して、新速度とする\n      this._faceVX += ax;\n      this._faceVY += ay;\n\n      // 目的の方向に近づいたとき、滑らかに減速するための処理\n      // 設定された加速度で止まる事の出来る距離と速度の関係から\n      // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\n      // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\n      {\n        // 加速度、速度、距離の関係式。\n        //            2  6           2               3\n        //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\n        // v = --------------------------------------\n        //                    2\n        //                 4 t  - 2\n        // (t=1)\n        // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\n        // \t考えているので、t＝１として消してよい（※未検証）\n\n        const maxV = 0.5 * (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) - maxA);\n        const curV = CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);\n        if (curV > maxV) {\n          // 現在の速度 > 最高速度のとき、最高速度まで減速\n          this._faceVX *= maxV / curV;\n          this._faceVY *= maxV / curV;\n        }\n      }\n      this._faceX += this._faceVX;\n      this._faceY += this._faceVY;\n    }\n\n    /**\r\n     * X軸の顔の向きの値を取得\r\n     *\r\n     * @return X軸の顔の向きの値（-1.0 ~ 1.0）\r\n     */\n    getX() {\n      return this._faceX;\n    }\n\n    /**\r\n     * Y軸の顔の向きの値を取得\r\n     *\r\n     * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\r\n     */\n    getY() {\n      return this._faceY;\n    }\n\n    /**\r\n     * 顔の向きの目標値を設定\r\n     *\r\n     * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\r\n     * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\r\n     */\n    set(x, y) {\n      this._faceTargetX = x;\n      this._faceTargetY = y;\n    }\n\n    // デルタ時間の積算値[秒]\n  }\n  _Live2DCubismFramework.CubismTargetPoint = CubismTargetPoint;\n})(Live2DCubismFramework || (Live2DCubismFramework = {}));","map":{"version":3,"names":["Live2DCubismFramework","cubismmath","CubismMath","_Live2DCubismFramework","FrameRate","Epsilon","CubismTargetPoint","constructor","_faceTargetX","_faceTargetY","_faceX","_faceY","_faceVX","_faceVY","_lastTimeSeconds","_userTimeSeconds","update","deltaTimeSeconds","faceParamMaxV","maxV","deltaTimeWeight","timeToMaxSpeed","frameToMaxSpeed","maxA","dx","dy","abs","d","sqrt","vx","vy","ax","ay","a","curV","getX","getY","set","x","y"],"sources":["C:/Users/cleyc/OneDrive/Documents/RR/RRWebsiteRenewed/my-app/src/mylive2d/react-live2d/Samples/TypeScript/Demo/Framework/src/math/cubismtargetpoint.ts"],"sourcesContent":["/**\r\n * Copyright(c) Live2D Inc. All rights reserved.\r\n *\r\n * Use of this source code is governed by the Live2D Open Software license\r\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\r\n */\r\n\r\nimport { Live2DCubismFramework as cubismmath } from './cubismmath';\r\nimport CubismMath = cubismmath.CubismMath;\r\n\r\nexport namespace Live2DCubismFramework {\r\n  const FrameRate = 30;\r\n  const Epsilon = 0.01;\r\n\r\n  /**\r\n   * 顔の向きの制御機能\r\n   *\r\n   * 顔の向きの制御機能を提供するクラス。\r\n   */\r\n  export class CubismTargetPoint {\r\n    /**\r\n     * コンストラクタ\r\n     */\r\n    public constructor() {\r\n      this._faceTargetX = 0.0;\r\n      this._faceTargetY = 0.0;\r\n      this._faceX = 0.0;\r\n      this._faceY = 0.0;\r\n      this._faceVX = 0.0;\r\n      this._faceVY = 0.0;\r\n      this._lastTimeSeconds = 0.0;\r\n      this._userTimeSeconds = 0.0;\r\n    }\r\n\r\n    /**\r\n     * 更新処理\r\n     */\r\n    public update(deltaTimeSeconds: number): void {\r\n      // デルタ時間を加算する\r\n      this._userTimeSeconds += deltaTimeSeconds;\r\n\r\n      // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\r\n      // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\r\n      const faceParamMaxV: number = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\r\n      const maxV: number = (faceParamMaxV * 1.0) / FrameRate; // 1frameあたりに変化できる速度の上限\r\n\r\n      if (this._lastTimeSeconds == 0.0) {\r\n        this._lastTimeSeconds = this._userTimeSeconds;\r\n        return;\r\n      }\r\n\r\n      const deltaTimeWeight: number =\r\n        (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\r\n      this._lastTimeSeconds = this._userTimeSeconds;\r\n\r\n      // 最高速度になるまでの時間を\r\n      const timeToMaxSpeed = 0.15;\r\n      const frameToMaxSpeed: number = timeToMaxSpeed * FrameRate; // sec * frame/sec\r\n      const maxA: number = (deltaTimeWeight * maxV) / frameToMaxSpeed; // 1frameあたりの加速度\r\n\r\n      // 目指す向きは、（dx, dy）方向のベクトルとなる\r\n      const dx: number = this._faceTargetX - this._faceX;\r\n      const dy: number = this._faceTargetY - this._faceY;\r\n\r\n      if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\r\n        return; // 変化なし\r\n      }\r\n\r\n      // 速度の最大よりも大きい場合は、速度を落とす\r\n      const d: number = CubismMath.sqrt(dx * dx + dy * dy);\r\n\r\n      // 進行方向の最大速度ベクトル\r\n      const vx: number = (maxV * dx) / d;\r\n      const vy: number = (maxV * dy) / d;\r\n\r\n      // 現在の速度から、新規速度への変化（加速度）を求める\r\n      let ax: number = vx - this._faceVX;\r\n      let ay: number = vy - this._faceVY;\r\n\r\n      const a: number = CubismMath.sqrt(ax * ax + ay * ay);\r\n\r\n      // 加速のとき\r\n      if (a < -maxA || a > maxA) {\r\n        ax *= maxA / a;\r\n        ay *= maxA / a;\r\n      }\r\n\r\n      // 加速度を元の速度に足して、新速度とする\r\n      this._faceVX += ax;\r\n      this._faceVY += ay;\r\n\r\n      // 目的の方向に近づいたとき、滑らかに減速するための処理\r\n      // 設定された加速度で止まる事の出来る距離と速度の関係から\r\n      // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\r\n      // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\r\n      {\r\n        // 加速度、速度、距離の関係式。\r\n        //            2  6           2               3\r\n        //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\r\n        // v = --------------------------------------\r\n        //                    2\r\n        //                 4 t  - 2\r\n        // (t=1)\r\n        // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\r\n        // \t考えているので、t＝１として消してよい（※未検証）\r\n\r\n        const maxV: number =\r\n          0.5 *\r\n          (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\r\n            maxA);\r\n        const curV: number = CubismMath.sqrt(\r\n          this._faceVX * this._faceVX + this._faceVY * this._faceVY\r\n        );\r\n\r\n        if (curV > maxV) {\r\n          // 現在の速度 > 最高速度のとき、最高速度まで減速\r\n          this._faceVX *= maxV / curV;\r\n          this._faceVY *= maxV / curV;\r\n        }\r\n      }\r\n\r\n      this._faceX += this._faceVX;\r\n      this._faceY += this._faceVY;\r\n    }\r\n\r\n    /**\r\n     * X軸の顔の向きの値を取得\r\n     *\r\n     * @return X軸の顔の向きの値（-1.0 ~ 1.0）\r\n     */\r\n    public getX(): number {\r\n      return this._faceX;\r\n    }\r\n\r\n    /**\r\n     * Y軸の顔の向きの値を取得\r\n     *\r\n     * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\r\n     */\r\n    public getY(): number {\r\n      return this._faceY;\r\n    }\r\n\r\n    /**\r\n     * 顔の向きの目標値を設定\r\n     *\r\n     * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\r\n     * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\r\n     */\r\n    public set(x: number, y: number): void {\r\n      this._faceTargetX = x;\r\n      this._faceTargetY = y;\r\n    }\r\n\r\n    private _faceTargetX: number; // 顔の向きのX目標値（この値に近づいていく）\r\n    private _faceTargetY: number; // 顔の向きのY目標値（この値に近づいていく）\r\n    private _faceX: number; // 顔の向きX（-1.0 ~ 1.0）\r\n    private _faceY: number; // 顔の向きY（-1.0 ~ 1.0）\r\n    private _faceVX: number; // 顔の向きの変化速度X\r\n    private _faceVY: number; // 顔の向きの変化速度Y\r\n    private _lastTimeSeconds: number; // 最後の実行時間[秒]\r\n    private _userTimeSeconds: number; // デルタ時間の積算値[秒]\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}